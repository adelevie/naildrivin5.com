<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Naildrivin' &#10106;]]></title>
  <link href="http://www.naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://www.naildrivin5.com/"/>
  <updated>2012-10-05T13:09:27-04:00</updated>
  <id>http://www.naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Making it Right: Technical Debt vs. Slop]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/10/05/making-it-right-technical-debt-vs-slop.html"/>
    <updated>2012-10-05T11:36:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/10/05/making-it-right-technical-debt-vs-slop</id>
    <content type="html"><![CDATA[<p>We were recently having a discussion at work about &#8220;doing it right&#8221; and &#8220;technical debt&#8221;.  The discussion revolved around the
optionality of &#8220;doing it right&#8221; - when is it OK to not &#8220;do it right&#8221;?</p>

<p>I would say it&#8217;s <strong>almost never</strong> OK to write code incorrectly.  If your understanding of what &#8220;doing it right&#8221;
means includes an &#8220;optional&#8221; clause, <strong>you have the wrong definition</strong>.  As professionals, we should always do it right.  We
should always do our work correctly.  I don&#8217;t mean we should over-engineer, nor do I mean that we should solve an abstract
problem instead of the one in front of us for &#8220;flexibility&#8221;, but we should have a basic standard that we inflexibly hold
ourselves to.</p>

<p>Writing code that <strong>does not</strong> adhere to our personal standards of correctness isn&#8217;t technical debt - it&#8217;s slop.</p>

<!-- more -->


<ul>
<li>Code with no tests isn&#8217;t technical debt, it&#8217;s slop.</li>
<li>Code that passes its test due to copy and paste isn&#8217;t technical debt, it&#8217;s slop.</li>
<li>Code with conditional expressions that wrap the screen isn&#8217;t technical debt, it&#8217;s slop.</li>
<li>Code that you write, without knowing <em>why</em>…it&#8217;s slop.</li>
</ul>


<p>The people who&#8217;ve paid for us to write code (which I will call <em>stakeholders</em> for lack of a better term), do not want slop, <em>even
if they don&#8217;t even know what that means</em>.  They want The Feature, the Whole Feature, and Nothing But The Feature, but they don&#8217;t
want it wrapped around a pile of shit.  And you know it.</p>

<p>Stakeholders trust us to do things correctly, and to not over-engineer some solution.  They trust us not to turn a boring problem
into an interesting one, and its our responsibility to deliver something done &#8220;right&#8221;.</p>

<h2>&#8220;Right&#8221; isn&#8217;t an option</h2>

<p>You must first absolve yourself of the notion that &#8220;doing it right&#8221; is optional.  Doing this requires you to do two things:</p>

<ul>
<li>Be honest with yourself about the differences between solving the problem in front of you in a clean way and turning that
problem into an architecture astronautic framework generified flexibilty extraction.  &#8220;Doing it right&#8221; doesn&#8217;t mean you get to
extract a framework at the end.  &#8220;Doing it right&#8221; doesn&#8217;t mean the code is now an open-source project.</li>
<li>Stand firm about the quality of work you will deliver.  You will not deliver slop.  Ever.  You are a professional who knows what you are
doing and you are paid a very high salary for that expertise.  Do not take a shit on it by delivering slop as completed work.</li>
</ul>


<h2>Holmes on Homes - Get in the mindset</h2>

<p>Coming to terms with what &#8220;doing it right&#8221; really means can be difficult, especially if you don&#8217;t have much experience.  Your instinct is to provide immediate gratification to a
stakeholder, and you might not truly understand the difference between &#8220;doing it right&#8221; and flying off with the Architecture
Astronauts.  We&#8217;ll get to some techniques to help.</p>

<p>But first, I&#8217;d encourage you to watch an episode of the HGTV television program <a href="http://www.hgtv.com/holmes-on-homes/show/index.html">Holmes on Homes</a>.  If you&#8217;ve ever spent time in someone else&#8217;s codebase, you will identify very closely with Mike Holmes (the host) and the problems he faces.  He&#8217;s called in to clean up a mess made by other home contractors.  His catch phrase is &#8220;make it right&#8221;.</p>

<p>Sometimes, Mike has to rip out entire rooms to fix a problem introduced by another contractor who took a shortcut, or did
something wrong.  Other times, he simply applies the right technique or tool for the job, at little additional cost over &#8220;the
quick and incorrect way&#8221; another contractor might.</p>

<p>It&#8217;s also important to note that Mike doesn&#8217;t turn one thing into another.  If a homeowner&#8217;s deck is faulty, he doesn&#8217;t give them
a screened-in porch.  He fixes the deck to make it right.</p>

<p>Watching the show, you will also begin to see how stakeholders view your work.  The homeowners (who are the stakeholders of these
projects) typically don&#8217;t have the technical
expertise necessary to examine the work they&#8217;ve paid for.  They will only ever see the finished veneer of a project, and trust
the contractor to have done the right thing underneath.  Sound familiar?</p>

<h2>Be the stakeholder</h2>

<p>Think about when <em>you&#8217;ve</em> been the stakeholder.  If you&#8217;ve hired a contractor to do some work, this is the perfect analog, though
if you&#8217;ve ever paid a CPA to do your taxes, hired a lawyer, or had surgery, you&#8217;ve been the stakeholder.  You have no idea how
the professional you&#8217;ve hired does their work, and while you want it done as quickly and cheaply as possible, you expect a certain
standard of quality.</p>

<p>Suppose you&#8217;re having something rewired in your hose and the electrician runs out of wire.  Suppose he sees that you have enough
speaker wire to finish the job, and offers to use that.  It&#8217;ll save you time and money.  Would you accept this?  Of course not,
and you&#8217;d be wise to treat everything this person says from then on with extreme suspicion.  They are offering you a
solution that is wrong, and presenting it with the same validity as the correct solution (going to the store to buy more
of the correct wire).</p>

<p>So, why are you offering your stakeholder, who&#8217;s put their trust in you, a cheap, easy, and dangerous way out?  Why present an
option that you know to be wrong?  Stakeholders want solutions, not decisions, and they don&#8217;t have the ability to make a
technical decision anyway - that&#8217;s why they hired you!</p>

<h2>How to make it right</h2>

<p>Here&#8217;s how to make it right, in four steps.</p>

<ol>
<li><strong>Think before you type</strong>.  Do you understand the problem you are solving?  How will you solve it?  What should the system
look like when it&#8217;s done?  Agile teaches us to avoid &#8220;Big Design Up Front&#8221;, but we&#8217;ve interpreted this as &#8220;JUST START
TYPING!!!!&#8221;.  Don&#8217;t just start typing.  Think.  Write something down if you need to.  It&#8217;s OK.  This is the hardest part to
remember to do.</li>
<li><strong>Write a test or tests</strong>.  Yup, write your tests first.  There&#8217;s a few reasons to do this.  First, you want a test to exist
when all is said and done, and writing it <em>right after you thought about the problem</em> is the best time to do so.  Second, you
want a way to run your code while you work on it.  An automated test, run from the command-line or your IDE is <strong>way</strong> easier
than manually doing it.  Finally, a test persists as your intention of how the system should work, and you <strong>already know how
it should work</strong>, so write it down now…as a test.  This is the hardest, most tedious step, so it&#8217;s nice to get it out of the
way early.</li>
<li><strong>Get it working</strong>.  As quickly as possible, make the test pass.  It can be sloppy. It can be less than ideal.  You can make a
mess.  What you want is to get the code into a shape where it does what you want it to do.  This should be the easiest part of
the process.  Any idiot can make code work.</li>
<li><strong>Make it right</strong>.  I&#8217;m not going to use the &#8220;R&#8221; word here.  In this step, you clean up the mess you made.  You remove duplicate code.  You change your print statements to log statements.  You extract your complex conditionals into methods.  You move unrelated code into new classes.  It&#8217;s fast.  It requires being creative, and is extremely satisfying.  Also, your brain is in the problem, so there&#8217;s no better time to do this than right now.  <strong>This is the most fun and rewarding part of writing a computer program</strong>.  That&#8217;s why it&#8217;s important, and that&#8217;s why we do it last.</li>
</ol>


<p>Repeat these steps until you&#8217;ve solved the problem in front of you.</p>

<h2>What about technical debt?</h2>

<ul>
<li>A shitty variable name isn&#8217;t technical debt, it&#8217;s slop.</li>
<li>Absent API documentation isn&#8217;t technical debt, it&#8217;s slop.</li>
</ul>


<p>Technical debt is an assumption you know does not hold (e.g. no user will buy more than three items at a time).  Technical debt
is a design decision you know to be less than optimal (e.g. we&#8217;ll special case these orders to use a different shipping provider
instead of creating a new shipping subsystem).  Technical debt is code to stop the bleeding of your business (e.g. shut off
all access to the beta site until this wave of users from TechCrunch has passed).  Technical debt is not sloppily written code.
It is clean code that is less than optimal.</p>

<p>When you acquire technical debt, <strong>write it the fuck down</strong>.  It&#8217;s <strong>that</strong> important.  Ideally, you would write it as a code
comment where the debt was acquired.  If that won&#8217;t work, include it as the commit message when you change the system.</p>

<p>And then add a new task to your task list to pay it off.</p>

<p>But always make it right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GLI 2.0]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/08/19/gli-2-dot-0.html"/>
    <updated>2012-08-19T19:54:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/08/19/gli-2-dot-0</id>
    <content type="html"><![CDATA[<p><a href="http://davetron5000.github.com/gli">GLI</a> 2.0 is out!  GLI is <em>the best</em> way to make a &#8220;command-suite&#8221; command line interface.  If you need to make a complex
command line app that takes subcommands, like <code>git</code> or <code>gem</code>, GLI is the most powerful and easy-to-use way to do that.</p>

<!-- more -->


<p>Unlike <code>thor</code> or <code>trollop</code>, GLI sits on top of <code>OptionParser</code>, giving you access to its powerful features.  GLI-powered apps have
fully-featured help systems - you just need to provide a bit of documentation.  There&#8217;s also support for a basic application
lifecycle and with almost no code, you have an awesome, well-behaved command-line app that&#8217;s easy to write, easy to test, easy to
use, and easy to maintain.</p>

<h2>New Features</h2>

<ul>
<li>Arbitrarily deep sub- and sub-sub-commands.  Think <code>git remote add</code>.</li>
<li>Uses <code>OptionParser</code>, meaning your command-line options can benefit from type conversions, validation checks, negatability, and
all the other awesome that comes from <code>OptionParser</code>.</li>
<li>Whole new help system that shows command-line invocation examples, generated from your code.</li>
<li>Bootstrapped apps now include an <code>.rvmrc</code> and a shell for acceptance testing via <a href="https://github.com/cucumber/aruba">aruba</a>.</li>
<li>More flexible documentation-generation systems to allow any format of documentation to be generated (currently, only RDoc is
implemented).</li>
<li>More easily structure your code in external files</li>
<li>Lots of bug-fixes</li>
</ul>


<h2>Get Started</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; gem install gli
</span><span class='line'>&gt; gli init your-new-app
</span></code></pre></td></tr></table></div></figure>


<h2>Learn More</h2>

<ul>
<li><a href="http://davetron5000.github.com/gli">Walkthrough</a> of GLI&#8217;s features at a more detailed level</li>
<li>A more sophisticated application with <a href="http://davetron5000.github.com/gli/todo.html">annotated source</a></li>
<li>Source code on <a href="http://www.github.com/davetron5000/gli">Github</a></li>
<li><a href="http://davetron5000.github.com/gli/rdoc">API Documentation</a></li>
<li><a href="http://www.pragprog.com/titles/dccar">Buy the book</a> - One of the running examples uses GLI, and the examples should all work with 2.0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; Hate COBOL, not Java?]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/08/13/hate-cobol-not-java.html"/>
    <updated>2012-08-13T09:14:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/08/13/hate-cobol-not-java</id>
    <content type="html"><![CDATA[<p>Another stinker from <a href="http://blog.jelastic.com">jelastic</a>, this time on how <a href="http://blog.jelastic.com/2012/08/13/hate-java/">Java&#8217;s not that bad</a>:</p>

<blockquote><p>So next week someone will invent another DSL that makes Twitter easier to use, but your bank will be writing new COBOL to more efficiently transfer funds to another Bank. We’re embarrassing ourselves with our petty arguments.</p></blockquote>


<p>So, because some industries are still using COBOL, we should stop advancing the state of the art, which involves moving onto more
modern languages than Java, and go help out these poor billion-dollar industries get into the cloud?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; End of Rational Discourse?]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/08/10/end-of-rational-discourse.html"/>
    <updated>2012-08-10T08:56:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/08/10/end-of-rational-discourse</id>
    <content type="html"><![CDATA[<p><a href="https://plus.google.com/110981030061712822816/posts">Steve Yegge</a> has an interesting post up, that classifies programmers along the <a href="https://plus.google.com/110981030061712822816/posts/KaSKeg4vQtz">conservative-to-liberal</a> axis
(which is, ironically, completely useless in classifying real people&#8217;s political feelings):</p>

<blockquote><p>I think that my conceptual framework gives us an &#8220;out&#8221; &#8211; a way to avoid being emotional about these subjects. Casting the problem as a clash between Liberalism and Conservatism gives us the ultimate ticket for &#8220;agreeing to disagree&#8221;.</p></blockquote>


<p>The way to avoid being emotional is to…avoid being emotional.  I think that casting the problem as some unchangeable political &#8220;stance&#8221; is lazy thinking, and gives use the ultimate ticket for avoiding any real discussion.  This way of thinking seems most useful in dismissing arguments one doesn&#8217;t feel like thinking too hard about.</p>

<p>Honestly, if you can&#8217;t have a real discussion about the pros and cons of e.g. static typing, you either have a lot to learn, or
are not a very capable developer.  If your best answer to &#8220;Can we use Ruby on this project?&#8221; is &#8220;oh, we&#8217;re Conservative, so…no&#8221;, then you are either have a lot to learn or you are an asshole.  If you refuse to even discuss what the benefits of explicit, yet verbose code are over implicit, but compact code, then you are either have a lot to learn or are an asshole<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>As developers, we&#8217;re blessed to work in a field full of objective truths.  To avoid seeking them out under the guise of immutable
political stances is the epitome of anti-intellectualism.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>I would make the same conclusion for the opposite: you should be able to discuss the benefits of implicit, terse code over explict, verbose code, too. <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Stock]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/08/02/running-stock.html"/>
    <updated>2012-08-02T09:55:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/08/02/running-stock</id>
    <content type="html"><![CDATA[<p>One of my fellow developers asked me the other day if I had any good dotfiles for <code>bash</code>.  I realized I don&#8217;t.  I don&#8217;t even have <code>ll</code> aliased to <code>ls -l</code> like most of the known universe.  I realized that I like to run as stock as I can.</p>

<!-- more -->


<p>Here&#8217;s what I have aliased in <code>bash</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">alias </span><span class="nv">vi</span><span class="o">=</span><span class="s1">&#39;mvim&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">ps</span><span class="o">=</span><span class="s1">&#39;ps auxwwwwwwww&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls -FG&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">irb</span><span class="o">=</span>pry
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s <strong>it</strong>.  I type <code>bundle exec</code> if I have to (and always in anger).  I have a function called <code>go</code> that sets up a few things for working on a particular project (e.g. <code>go gli</code> before I start working on <a href="http://davetron5000.github.com/gli">gli</a>), but otherwise, I type the commands as
they come and use whatever options I need at the time, even if I tend to use the same options a lot (e.g. <code>grep -r</code>).</p>

<p>Over the years, my muscle memory has evolved around <em>just using the shell as it is</em> and not wound around a lot of customizations.  As such, when I&#8217;m tunneled into some production server, or other location where I don&#8217;t have my dotfiles (such as another
developer&#8217;s box), I&#8217;m almost exactly as proficient as I am in my own environment.</p>

<p>Sure, it takes some probably-measurable amount of time to type <code>bundle exec</code> or <code>ls -l</code> instead of <code>bx</code> or <code>ll</code>, but I find I don&#8217;t spend a lot of my time typing things.  I spend most of it reading and thinking, and there&#8217;s really no shortcut for that.</p>

<p>Similarly, my global <code>git</code> config contains only one alias: <code>lol</code>, which shows logs on one line (<code>log --oneline --graph --decorate</code>).</p>

<p>My <code>.vimrc</code> is a bit of an exception, as I have a fair amount of default configuration overridden, but in terms of mappings, I still don&#8217;t have that much set up.  I use <a href="https://github.com/tpope/vim-pathogen/">pathogen</a> plugins and know the shortcuts many of them provide (like the amazing <a href="https://github.com/tpope/vim-rails">rails.vim</a>), but I don&#8217;t tend to customize them that much.  Here&#8217;s all the
mappings I have setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="s2">&quot; cd to directory of current file</span>
</span><span class='line'><span class="s2">map c :cd %:p:h</span>
</span><span class='line'><span class="s2">&quot;</span> open buffer list
</span><span class='line'>map b n<span class="se">\b</span>e
</span><span class='line'><span class="s2">&quot; next error</span>
</span><span class='line'><span class="s2">map   :cnext</span>
</span><span class='line'><span class="s2">&quot;</span> fold this line
</span><span class='line'>map f !!fold -w77 -s
</span><span class='line'><span class="s2">&quot; ^O tries to open the thing under the cursor using gf</span>
</span><span class='line'><span class="s2">map  sgf</span>
</span><span class='line'><span class="s2">&quot;</span> Avoid annoying ^Z minimizing to nowhere
</span><span class='line'>map  
</span></code></pre></td></tr></table></div></figure>


<p>Again, that&#8217;s <strong>it</strong>.  Whenever I&#8217;m in <code>vi</code>, <em>anywhere</em>, I&#8217;m 99% effective.</p>

<p>I tend to automate things away when they become annoying, so I guess I don&#8217;t tend to get annoyed by typing small words into the terminal.  My brain thinks in chunks of words, which is why I dislike abbreviations and acronyms.  They seem like a vestige of
the days when we had to write things instead of auto-complete them.</p>

<p>Anyway, I&#8217;d recommend all developers try to run as stock as possible.  I bet you won&#8217;t be as slowed down as you think, and you won&#8217;t feel hamstrung in an environment you can&#8217;t totally control.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; Hungry Academy graduates]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/07/30/hungry-academy-graduates.html"/>
    <updated>2012-07-30T09:41:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/07/30/hungry-academy-graduates</id>
    <content type="html"><![CDATA[<p>An <a href="http://www.washingtonpost.com/business/capitalbusiness/with-hungry-academy-livingsocial-aims-to-build-its-own-techies/2012/07/29/gJQAH5Q2IX_story.html">article in the Washington Post</a> gives a good summary of <a href="http://hungryacademy.com/">Hungry Academy</a>, LivingSocial&#8217;s experiment to train 24
motivated people to become fully-functional developers in just five months.  They worked hard and <strong>all</strong> graduated last week,
starting as official developers over the next week.</p>

<blockquote><p>The benefit, if all goes according to plan, however, is a fleet of engineers that can be hired en masse with a commitment to work at LivingSocial for at least 18 months. Unlike fresh hires, the academy students are already familiar with the company’s products and culture.</p></blockquote>


<p>The 2-3-week-long projects they delivered over the course were impressive enough, but given that many of them didn&#8217;t have any
professional programming skills beforehand, their progress has been amazing to watch.  The first half of this grand experiment is
over and it was a rousing success.  The second half - how well they succeed in the actual work environment - begins now.  I&#8217;m optimistic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; Six languages to master]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/07/29/six-languages-to-master.html"/>
    <updated>2012-07-29T10:48:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/07/29/six-languages-to-master</id>
    <content type="html"><![CDATA[<p><a href="https://michaelochurch.wordpress.com/2012/07/27/six-languages-to-master/">This</a> post, by <a href="https://michaelochurch.wordpress.com/">Michael O Church</a> is an excellent post on being a better programmer and full of a lot more awesome
than the title implies.  You need to read the entire thing. After he makes the case for which five programming languages to learn, the best stuff starts when he makes his case for the sixth:</p>

<blockquote><p>The sixth is one that very few programmers are willing to use in source code: English.</p></blockquote>


<p>He rightly defends comments and documentation:</p>

<blockquote><p>Most problems are custom problems that require documentation of what is being solved, why, and how. People need to know, when they read code, what they’re looking at; otherwise, they’re going to waste a massive amount of time focusing on details that aren’t relevant.</p></blockquote>


<p>And makes very salient points about depending on IDEs to develop.  This is one of many, but my personal favorite:</p>

<blockquote><p>If you’re IDE-dependent, you can’t write code outside of a corporate environment, because when you go home, you don’t have a huge support team to set the damn thing up.</p></blockquote>


<p>Really great read.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; A world without nil]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/07/25/a-world-without-nil.html"/>
    <updated>2012-07-25T15:39:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/07/25/a-world-without-nil</id>
    <content type="html"><![CDATA[<p><a href="http://www.naildrivin5.com/blog/2012/07/17/adventures-in-functional-programming-with-ruby.html">Previously</a>, we saw how just using functions in Ruby, we could create a lot of powerful code.  Let&#8217;s continue the theme of &#8220;programming with constraints&#8221; and try to solve an actual problem. <code>nil</code>.</p>

<!-- more -->


<h2>Is <code>nil</code> a problem?</h2>

<p><code>nil</code> creates problems in code clarity and revealing programmer intent.  <code>nil</code> means
&#8220;no value&#8221; sometimes, but other times it means <code>false</code>.  Other times it means &#8220;the developer didn&#8217;t think of the proper default
for a value&#8221;.  Rails migrations, by default, allow database columns to be nullable.  This is often not correct, and by making it
the default, you cannot tell the difference between &#8220;the business requires that this field be nullable&#8221; and &#8220;the developer forgot
to consider the nullability of this column&#8221;.</p>

<p>The problems manifest when you see a test failure or production error where something is <code>nil</code> that you weren&#8217;t expecting.  Now
you have to figure out if that value could be <code>nil</code> (and the original developer missed the edge case) or if it should <em>never</em> be
<code>nil</code>, and you have a more serious problem in either your data, business logic, or worse.</p>

<p>The reason this becomes complex isn&#8217;t necessarily the concept of &#8220;no such value&#8221; (though this <em>is</em> a bit of a problem), but the way in which <code>nil</code> is treated by the language.  In Ruby, <code>nil</code> is the only instance of <code>NilClass</code> and has the following magical properties that cannot be bestowed on any other object:</p>

<ul>
<li>it is &#8220;falsey&#8221; (a trait shared with only one other value, <code>false</code>, the sole value of <code>FalseClass</code>)</li>
<li>it is the default value of every variable</li>
</ul>


<p>Because of these two things, we use it all over the place to represent &#8220;no value&#8221;, and our code is littered with:</p>

<ul>
<li><code>do_something if value.nil?</code></li>
<li><code>foo ||= {}</code></li>
<li><code>Array(some_list).each</code></li>
</ul>


<p>And so forth.  Avdi Grimm gave <a href="http://confreaks.com/videos/763-rubymidwest2011-confident-code">a talk at Ruby Midwest</a> called &#8220;Confident Ruby&#8221; that deals, in part, with nil and how to avoid it.  Things like <code>Array()</code>, <code>String()</code>, and null objects are good techniques.</p>

<p>But let&#8217;s take a different approach.  What if there were no such thing as <code>nil</code>, and the language didn&#8217;t support it?</p>

<h2>Can you imagine? A world without <code>nil</code>?</h2>

<p><img class="right" src="http://25.media.tumblr.com/tumblr_ltbtgjU70B1qztjn5o1_500.jpg" width="275"></p>

<p>Suppose there were no such thing as <code>nil</code> in Ruby.  Every variable would require that a value be assigned to it at declare time, and the runtime would raise an exception if you tried to use a variable/parameter/etc. without a value.</p>

<p>How would that change the way we code?</p>

<p>Of course, we could re-invent it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NilClass</span>
</span><span class='line'>  <span class="vc">@@nil</span> <span class="o">=</span> <span class="no">NilClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">new</span>
</span><span class='line'>    <span class="vc">@@nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">nil?</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BasicObject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">nil?</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$nil</span> <span class="o">=</span> <span class="no">NilClass</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us a value that means &#8220;no value&#8221;, but without the magic provided by the language, what good is it?</p>

<p>Let&#8217;s return to our domain from the previous post, where we want to make a system that manages users in a database.  Since we now have our fully armed and operational object-oriented programming language, we might be inclined to make a <code>Person</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:birthdate</span><span class="p">,</span> <span class="ss">:gender</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:id</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@birthdate</span> <span class="o">=</span> <span class="n">birthdate</span>
</span><span class='line'>    <span class="vi">@gender</span> <span class="o">=</span> <span class="n">gender</span>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="nb">id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember, we don&#8217;t have <code>nil</code>, so we don&#8217;t have a default value for any variable - we must assign one explicitly or we&#8217;ll get runtime errors.  Given the code above, this shouldn&#8217;t be a problem, since we assign values to our ivars when they are declared.</p>

<p>If you recall, however, we have two optional values in our <code>Person</code>: <code>title</code>, and <code>id</code>. <code>title</code> is simply optional - a person might not have a title - while <code>id</code> will only be populated if the person has been stored in the database.  How can we model this?</p>

<h2>Generic optional values?</h2>

<p>Scala (a statically-typed functional/OO language that runs on the JVM), &#8220;solves&#8221; this by creating an <code>Option</code> type that makes explicit the concept of an optional value<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.  In Ruby, it would look like this:</p>

<figure class='code'><figcaption><span>An optional type</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># The base class that also serves as a factory for instances</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Optional</span>
</span><span class='line'>  <span class="c1"># Optional value that has a value</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">some</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Some</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Optional value with NO value</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">none</span>
</span><span class='line'>    <span class="no">None</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Some</span> <span class="o">&lt;</span> <span class="no">Optional</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:value</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">exists?</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">None</span> <span class="o">&lt;</span> <span class="no">Optional</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">exists?</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use it like so:</p>

<figure class='code'><figcaption><span>Using our optional type</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dave</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Dave&quot;</span><span class="p">,</span><span class="s2">&quot;1972-01-01&quot;</span><span class="p">,</span><span class="ss">:male</span><span class="p">,</span><span class="no">Optional</span><span class="o">.</span><span class="n">none</span><span class="p">,</span><span class="no">Optional</span><span class="o">.</span><span class="n">none</span><span class="p">)</span>
</span><span class='line'><span class="n">rudy</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Rudy&quot;</span><span class="p">,</span><span class="s2">&quot;2001-01-01&quot;</span><span class="p">,</span><span class="ss">:male</span><span class="p">,</span><span class="no">Optional</span><span class="o">.</span><span class="n">some</span><span class="p">(</span><span class="s2">&quot;cat&quot;</span><span class="p">),</span><span class="no">Optional</span><span class="o">.</span><span class="n">some</span><span class="p">(</span><span class="mi">42</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salutation</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">title</span><span class="o">.</span><span class="n">exists?</span>
</span><span class='line'>      <span class="n">title</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nb">name</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, we&#8217;ve replaced what would be a call to <code>.nil?</code> in regular Ruby with a call to <code>.exists?</code> in our nil-less Ruby.  Is this really any better?  We could wrap the logic of &#8220;do one thing if there&#8217;s a value, do another if there isn&#8217;t&#8221; into a method on <code>Optional</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Some</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">with_value</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">,</span><span class="o">&amp;</span><span class="n">_</span><span class="p">)</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">None</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">with_value</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_</span><span class="p">,</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could then implement <code>salutation</code> like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salutation</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">with_value</span><span class="p">(</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="p">{</span> <span class="n">title</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nb">name</span> <span class="p">},</span>
</span><span class='line'>      <span class="o">-&gt;</span>        <span class="p">{</span> <span class="nb">name</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yech.  We might be able to play some syntax games and clean this up, but this is <em>not</em> an improvement.  <code>if/else</code> statements are
easy to understand and with the magic of <code>nil</code>, the logic is pretty straightforward:</p>

<figure class='code'><figcaption><span>using nil&#8217;s falsiness</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salutation</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">title</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Optional</code>, as we&#8217;ve defined it, is just a degenerate implementation of <code>nil</code> that has a terrible API<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.  It <em>does</em> have the advantage of not being magic - we are required to provide a value for every variable, which is nice - but can we do better?</p>

<h2>Solving the problem in front of us</h2>

<p>Let&#8217;s step back and just try solving the problem in front of us, instead of adding the general concept of optional values.  What if we used the type system more explicitly?</p>

<p>Suppose we define <code>Person</code> to be only the <em>required</em> values, i.e. the bare essence of a person in our system, and then create
mixins for the optional values.  We could make a mixin like <code>Stored</code> act as both a &#8220;tag&#8221; for an object that is stored in the
database, and as the location for related code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="c1"># Every person must have a name, birthdate, and gender.</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:birthdate</span><span class="p">,</span> <span class="ss">:gender</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@birthdate</span> <span class="o">=</span> <span class="n">birthdate</span>
</span><span class='line'>    <span class="vi">@gender</span> <span class="o">=</span> <span class="n">gender</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Stored</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:id</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Titled</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:title</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we don&#8217;t make <code>id</code> or <code>title</code> mutable; they are still read-only fields.  So, how do they get set?  We tightly couple
<code>Person</code> with these new modules and set the fields there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">title</span><span class="o">=</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Titled</span><span class="p">)</span> <span class="c1"># THIS object is now a Titled, but other Person instances are not</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">id</span><span class="o">=</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="nb">id</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Stored</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that if we wanted to maintain total immutability, we would need to jump through a few hoops:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">with_title</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>      <span class="n">person</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Titled</span><span class="p">)</span>
</span><span class='line'>      <span class="n">person</span><span class="o">.</span><span class="n">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@title&quot;</span><span class="p">,</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In either case, we end up with an instance that has mixed in <code>Titled</code> and absolutey has a value for <code>title</code>.</p>

<p>How would this affect our <code>salutation</code> method?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salutation</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span><span class="no">Titled</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">title</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve replaced a generic check - for <code>nil</code> - with a specific check - for being <code>Titled</code>.  This may not seem like an improvement, but I&#8217;d argue that it makes our domain a bit richer and more intention-revelaing.  It turns an implementation decsion (treating <code>nil</code> as not having a title) into something explicit. And, at the end of the day, if we need logic based on the existence of a value, well, we&#8217;re going to need to use <code>if</code> statements.</p>

<p>Or are we?</p>

<p>Before we answer that, it&#8217;s worth noting that although <code>Titled</code> is specific to our <code>Person</code> class, <code>Stored</code> is a more generic concept that could be broadly used to explicitly call out records not stored in the database.  Imagine an <code>update</code> method like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">NotStoredError</span> <span class="k">unless</span> <span class="n">record</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span><span class="no">Stored</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That reads a lot better to me than a <code>nil</code> check<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.  It also abstracts away the way in which we know that a record is stored, but without requiring a common superclass.</p>

<p>Back to our <code>if</code> statement.  We have a business rule based on the existence of a value, so it seems we just have to live with the conditional logic, right?  Not exactly.  What if both <code>Person</code> and <code>Titled</code> implemented <code>salutation</code>?</p>

<p>Person would use the &#8220;default if no title&#8221; version, because a raw <code>Person</code> has no title:</p>

<figure class='code'><figcaption><span>Person&#8217;s default implementation of salutation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salutation</span>
</span><span class='line'>    <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once <code>Titled</code> is mixed in, we know that we absolutely have a title, so we override it with the correct logic given a title:</p>

<figure class='code'><figcaption><span>Titled overrides it, since it knows it has a value</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Titled</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salutation</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, <em>this</em> is interesting.  We&#8217;re using polymorphism and inheritance as a way to avoid <code>if</code> statements.  If we&#8217;d used <code>nil</code> to
represent &#8220;no title&#8221;, we&#8217;d be stuck with conditional logic.  The added constraint of programming without <code>nil</code> has forced us to
get creative and resulted in a cleaner solution.</p>

<p>We&#8217;ve now used the type system to create an explicit description of our domain, and we didn&#8217;t need <code>nil</code>.  Of course, a type that has a lot of optional values will require a lot of these sorts of modules, and it could get ugly.  This might be a good thing.</p>

<p>Now that we can handle optional values in our data structures, what about containers?</p>

<h2>Optional values in container classes</h2>

<p>I see a lot of code using <code>first</code> or <code>last</code> on an array as a shortcut for checking if the array is empty and, if not, getting the first or last element respectively.  Obviously, this would have to stop, but what about so-called &#8220;sparse arrays&#8221; where some indeces contain <code>nil</code> values?  Dealing with this cleanly is not simple given the currently API of <code>Array</code>.  Of course, if the language never had <code>nil</code>, you could imagine that <code>Array</code> would have <em>some</em> facility for dealing with this.  On idea would be that each accessor method would accept an optional block that would be run if there were no value, so that the caller could provide a default:</p>

<figure class='code'><figcaption><span>Imaginary Array API when we don&#8217;t have nil</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">list</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>                               <span class="c1"># =&gt; raises IndexError</span>
</span><span class='line'><span class="n">list</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">{</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span> <span class="s2">&quot;default</span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span> <span class="c1"># =&gt; default0</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">first</span> <span class="p">{</span> <span class="s2">&quot;default&quot;</span> <span class="p">}</span>              <span class="c1"># =&gt; default</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we&#8217;re talking about containers, however, we&#8217;d need to be able to model &#8220;there is no value at this location&#8221; more explicitly.  Since <em>this</em> actually <em>is</em> a generic problem, we can bring back our <code>Optional</code> class to handle it.  We could assume that the <code>Array</code> class bakes in the use of <code>Optional</code>, but a) the API would be somewhat inconvienient and b) it doesn&#8217;t help us in the real world.  What if we created a mix-in that we could use for <code>Array</code> instances that contained optional values?</p>

<figure class='code'><figcaption><span>Mix-in to make it easier to work with Arrays that contain Optional values</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">OptionalValuesArray</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Set a value directly</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">[]=</span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="no">Optional</span><span class="o">.</span><span class="n">some</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># clear the value at this index</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">clear_value</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="no">Optional</span><span class="o">.</span><span class="n">none</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># get the value or, if it&#39;s not there, call the block</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">with_value</span><span class="p">(</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span> <span class="n">value</span> <span class="p">},</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="p">()</span>      <span class="p">{</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># iterate over only the values that exist</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">each_value</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="n">optional</span><span class="p">)</span>
</span><span class='line'>      <span class="n">optional</span><span class="o">.</span><span class="n">with_value</span><span class="p">(</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="p">()</span>      <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Map only the values that exist</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">map_values</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[].</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">new_array</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">each_value</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="n">new_array</span> <span class="o">&lt;&lt;</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">optional_values_allowed</span> <span class="o">=</span> <span class="o">[].</span><span class="n">extend</span><span class="p">(</span><span class="no">OptionalValuesArray</span><span class="p">)</span>
</span><span class='line'><span class="n">no_optional_values</span> <span class="o">=</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This API might not be &#8220;right&#8221;, but we can see that, without <code>nil</code>, we have to be explicit about which arrays can be missing
values and which cannot.  That makes our code more intention-revealing.  If Ruby really didn&#8217;t have <code>nil</code>, I would expect the
Array class to better &#8220;bake-in&#8221; this concept so that the API was clean and easy.</p>

<p><code>Hash</code>, on the other hand, comes built-in with everything we need to avoid <code>nil</code>, namely the <code>fetch</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="ss">:bar</span><span class="p">,</span> <span class="ss">:baz</span> <span class="o">=&gt;</span> <span class="ss">:quux</span> <span class="p">}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span>                   <span class="c1"># =&gt; :bar</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:blah</span><span class="p">)</span>                  <span class="c1"># =&gt; raises IndexError</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:blah</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="s2">&quot;crud&quot;</span> <span class="p">}</span> <span class="c1"># =&gt; &quot;crud&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using <code>fetch</code>, we can be very clear about what we want to do.  Without a block, we are getting the value for a key that must exist.  <em>With</em> a block we indicate that we&#8217;re getting a value for a key that is optional&#8230;and we must specify the value to use if it&#8217;s missing.</p>

<p>An alternative is to specify a block that provides default values, and then use <code>[]</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="o">|</span> <span class="ss">:default_value</span> <span class="p">}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:bar</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>  <span class="c1"># =&gt; :bar</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:blah</span><span class="o">]</span> <span class="c1"># =&gt; :default_value</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way in which we use <code>nil</code> in a <code>Hash</code> is in the &#8220;options hash&#8221; pattern where we can parameterize a method call, typically
omitting keys where we want to use the default value provided by the API.  In this case, we use <code>nil</code> to mean &#8220;don&#8217;t use the
default, but omit the value entirely&#8221;.</p>

<p>For example, in Rails 3, we can use <code>respond_with</code> to send an object to the caller in the
controller.  By default, the HTTP location header is set by examining the type of the object and getting a URL for it.
<code>respond_with</code> takes an options hash and, if we wish to avoid setting this header, we must set <code>:location</code> to <code>nil</code>:</p>

<figure class='code'><figcaption><span>Using nil to &#8220;unset&#8221; an option</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SomeController</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">record</span> <span class="o">=</span> <span class="n">create_record_somehow</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="n">record</span><span class="p">,</span> <span class="ss">:location</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doing this without <code>nil</code> is trickier, and I think it requires a small change in how we design APIs using the options hash.
The result, again, will be more intention-revelaing code.  Instead of using <code>nil</code> for &#8220;don&#8217;t set the location header&#8221;, we would
set an option that indicates that more clearly:</p>

<figure class='code'><figcaption><span>Imagined options for respond_with</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SomeController</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">record</span> <span class="o">=</span> <span class="n">create_record_somehow</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="n">record</span><span class="p">,</span> <span class="ss">:set_location</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would even improve the implementation of <code>respond_with</code> as well:</p>

<figure class='code'><figcaption><span>Imagined implementation of respond_with if nil were not an option</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">respond_with</span><span class="p">(</span><span class="n">record</span><span class="p">,</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">options</span><span class="o">[</span><span class="ss">:location</span><span class="o">]</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:location</span><span class="p">)</span> <span class="p">{</span> <span class="n">default_location_for</span><span class="p">(</span><span class="n">record</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:set_location</span><span class="o">]</span>
</span><span class='line'>    <span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Location&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:location</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># and whatever else</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, the absence of <code>nil</code> is making our code a <em>bit</em> longer, but much more intention-revealing and explicit.</p>

<p>In reality, though, <code>nil</code> exists and is used in many places.  Can we take anything from this to the real world?</p>

<h2>Back to reality</h2>

<p>First and foremost, I would suggest that you design APIs in a way that <code>nil</code> is not required nor used.  Methods that return
collections should return an empty version instead of <code>nil</code>.  Method parameters should not allow <code>nil</code> to be passed in for any
value, and should use an options has for optional values.</p>

<p>Not every API is written this way, and to deal with them, there are a few handy methods provided by Ruby that can help:</p>

<ul>
<li><code>String()</code> - converts <code>nil</code> to the empty string, and converts any string to itself.  Wrap a possibly-<code>nil</code> string in this and you avoid a <code>nil</code> check. (ActiveSupport&#8217;s <code>#present?</code> is a way to do this, too, but <code>String()</code> works everywhere in Ruby)</li>
<li><code>Array()</code> - converts <code>nil</code> to an empty array and converts an array to itself.  Perfect for dealing with pesky APIs that insist on returning <code>nil</code> instead of an empty array.</li>
<li><code>Hash[Array()]</code> - by combining <code>Hash#[]</code> and <code>Array()</code>, we can convert nil to an empty hash and a hash to itself.  <code>Array()</code> will turn a <code>Hash</code> into a two-dimensional array, and <code>Hash#[]</code> will turn a two-dimensional array back into a <code>Hash</code>.  Since <code>Array()</code> turns <code>nil</code> into an empty array, <code>Hash[Array(nil)]</code> returns an empty has.  Ruby really should include a method named <code>Hash()</code> that does this, but it doesn&#8217;t.</li>
</ul>


<p>Beyond this, <a href="http://en.wikipedia.org/wiki/Null_Object_pattern">null objects</a> are a useful pattern for encapsulating logic of the type &#8220;do this if some value is nil&#8221;, and the <a href="http://api.rubyonrails.org/classes/Object.html#method-i-try"><code>try</code></a>
method in Rails is also very useful.</p>

<p>It&#8217;s still interesting to think about a world without <code>nil</code>. Without it, we can still handle the absence of values in objects, as well as containers, and our code is more intentional-revelaing.  Why <em>do</em> we need <code>nil</code>?</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>The JVM still allows <code>null</code> and so does Scala, so <code>Option</code> only provides a way to express optional types more clearly; <code>null</code> is still there and is the default value of variables that aren&#8217;t given an initial value. <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>It&#8217;s worth pointing out that in Scala, <code>Option</code> is a lot more useful, because <code>null</code> has no such magical properties on the JVM like it does in Ruby. <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>I realize that Active Record encapsulates this concept in <code>new_record?</code>, but a) we&#8217;re in an imaginary domain without Active Record and b) that Active Record encapsulates the <code>nil</code> check gives more credence that doing so is a good idea in general. <a href='#fnref:3' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; Slides from my OSCON talk]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/07/19/slides-from-my-oscon-talk.html"/>
    <updated>2012-07-19T15:28:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/07/19/slides-from-my-oscon-talk</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="500887bdded00e000201b1c3" data-ratio="1.7444633730834753"
src="http://www.naildrivin5.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Adventures in functional programming with Ruby]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/07/17/adventures-in-functional-programming-with-ruby.html"/>
    <updated>2012-07-17T11:33:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/07/17/adventures-in-functional-programming-with-ruby</id>
    <content type="html"><![CDATA[<p>The following is an aimless journey through a degenerate form of Ruby, in an effort to learn a bit more about functional programming, simplicity, and API design.</p>

<p>Suppose that the only way we have to organize code in Ruby is to make lambdas, and the only way we have to structure data are arrays:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">square</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="p">}</span>
</span><span class='line'><span class="n">square</span><span class="o">.</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c1"># =&gt; 16</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Dave&quot;</span><span class="p">,</span><span class="ss">:male</span><span class="o">]</span>
</span><span class='line'><span class="n">print_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">((</span><span class="nb">name</span><span class="p">,</span><span class="n">gender</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> is a </span><span class="si">#{</span><span class="n">gender</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print_person</span><span class="o">.</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the most bare-bones essence of functional programming: all we have is functions.   Let&#8217;s write some real-ish code this way and see how far we get before it starts
becoming painful.</p>

<!-- more -->


<p>Suppose we want to manipulate a database of people, and someone has provided us a few functions to interact with a data store.   We want to use these to add a UI and some validations.</p>

<p>Here&#8217;s how we interact with our data store:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">insert_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">)</span> <span class="c1"># =&gt; returns an id</span>
</span><span class='line'><span class="n">update_person</span><span class="o">.</span><span class="p">(</span><span class="n">new_name</span><span class="p">,</span><span class="n">new_birthdate</span><span class="p">,</span><span class="n">new_gender</span><span class="p">,</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'><span class="n">delete_person</span><span class="o">.</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'><span class="n">fetch_person</span><span class="o">.</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span> <span class="c1"># =&gt; returns the name, birthdate, and gender as an array</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we need to be able to add a person to our database, along with some validations.  We&#8217;ll get this data from user input (we can assume that <code>puts</code> and <code>gets</code> are built-ins that work as expected):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Name?&quot;</span>
</span><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Birthdate?&quot;</span>
</span><span class='line'><span class="n">birthdate</span> <span class="o">=</span> <span class="nb">gets</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Gender?&quot;</span>
</span><span class='line'><span class="n">gender</span> <span class="o">=</span> <span class="nb">gets</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need a function to do our validations and add a person to the database.  What might it look like?  It should accept the attributes of a person and return
either an id (on successfully validation and insertion), or an error message, representing what went wrong.   Since we don&#8217;t have exceptions or hashes - just arrays -
we&#8217;re going to have to get creative.</p>

<p>Let&#8217;s create a convention in our system that every business logic methods returns an array of size 2.  The first element is the return value on success, and
the second element is an error message on failure.  The presence or absence of data in one of these slots indicates the result.</p>

<p>Now that we&#8217;ve sorted out what we accept as arguments and what we&#8217;re going to return, let&#8217;s write our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Name is required&quot;</span><span class="o">]</span>                  <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Birthdate is required&quot;</span><span class="o">]</span>             <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">birthdate</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender is required&quot;</span><span class="o">]</span>                <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">gender</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender must be &#39;male&#39; or &#39;female&#39;&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">gender</span> <span class="o">!=</span> <span class="s1">&#39;male&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">gender</span> <span class="o">!=</span> <span class="s1">&#39;female&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">id</span> <span class="o">=</span> <span class="n">insert_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>  <span class="o">[[</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="nb">id</span><span class="o">]</span><span class="p">,</span><span class="kp">nil</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you aren&#8217;t familiar with <code>String()</code>, it is a function that coalesces nil to the empty string, so we don&#8217;t have to check for both.</p>

<p>With this function, what we&#8217;d like to do is call it in a loop until the user has provided correct input, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">invalid</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">while</span> <span class="n">invalid</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Name?&quot;</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Birthdate?&quot;</span>
</span><span class='line'>  <span class="n">birthdate</span> <span class="o">=</span> <span class="nb">gets</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Gender?&quot;</span>
</span><span class='line'>  <span class="n">gender</span> <span class="o">=</span> <span class="nb">gets</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">add_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Successfully added person </span><span class="si">#{</span><span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">invalid</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Problem: </span><span class="si">#{</span><span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we never said anything about <code>while</code> loops :)  Suppose we don&#8217;t have them.</p>

<h2>Loops are just functions (called recursively)</h2>

<p>To loop, we simply wrap our code in a function and call it recursively until we achieve the desired result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get_new_person</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Name?&quot;</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Birthdate?&quot;</span>
</span><span class='line'>  <span class="n">birthdate</span> <span class="o">=</span> <span class="nb">gets</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Gender?&quot;</span>
</span><span class='line'>  <span class="n">gender</span> <span class="o">=</span> <span class="nb">gets</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">add_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Successfully added person </span><span class="si">#{</span><span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Problem: </span><span class="si">#{</span><span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">get_new_person</span><span class="o">.</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="n">get_new_person</span><span class="o">.</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can envision that our code is going to have a lot of <code>if result[1] == nil</code> in it, so let&#8217;s wrap it in a function.
The great thing about functions is that they allow us to re-use structure, as opposed to logic.  The structure here is
checking for an error and doing one thing on success and another on error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">handle_result</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="n">on_success</span><span class="p">,</span><span class="n">on_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">on_success</span><span class="o">.</span><span class="p">(</span><span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">on_error</span><span class="o">.</span><span class="p">(</span><span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, our <code>get_new_person</code> function abstracts away the error handling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get_new_person</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Name?&quot;</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Birthdate?&quot;</span>
</span><span class='line'>  <span class="n">birthdate</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Gender?&quot;</span>
</span><span class='line'>  <span class="n">gender</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">add_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">handle_result</span><span class="o">.</span><span class="p">(</span><span class="n">result</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="p">((</span><span class="nb">id</span><span class="p">,</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Successfully added person </span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="o">[</span><span class="nb">id</span><span class="p">,</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="nb">id</span><span class="o">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="p">(</span><span class="n">error_message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Problem: </span><span class="si">#{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">get_new_person</span><span class="o">.</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="n">get_new_person</span><span class="o">.</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice what the use of <code>handle_result</code> allows us to explicitly name variables, instead of using Array de-referencing.  Not only can we name <code>error_message</code>, but, using Ruby&#8217;s
array-extraction syntax, we can &#8220;explode&#8221; our person array into its attributes via the <code>((id,name,birthdate,gender))</code> syntax.</p>

<p>So far, so good.  This code is probably a bit weird looking, but it&#8217;s not terribly verbose, or complex.</p>

<h2>Clean code uses more functions.</h2>

<p>One thing that might seem odd is that our person has no real structure or formal definition.  We simply have an array, and a
convention that the first element is the name, second element is birthdate, etc.  Our domain is pretty simple as-is, but let&#8217;s
suppose we want to add a new field: title.  What happens to our code when we do this?</p>

<p>Our database team delivers new versions of <code>insert_person</code> and <code>update_person</code> to us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">insert_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'><span class="n">update_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We then have to update our <code>add_person</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Name is required&quot;</span><span class="o">]</span>                  <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Birthdate is required&quot;</span><span class="o">]</span>             <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">birthdate</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender is required&quot;</span><span class="o">]</span>                <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">gender</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender must be &#39;male&#39; or &#39;female&#39;&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">gender</span> <span class="o">!=</span> <span class="s1">&#39;male&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">gender</span> <span class="o">!=</span> <span class="s1">&#39;female&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">id</span> <span class="o">=</span> <span class="n">insert_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[[</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="o">]</span><span class="p">,</span><span class="kp">nil</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, since we use these extractions in <code>get_new_person</code>, <strong>that</strong> has to change, too.  Ugh:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get_new_person</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Name?&quot;</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Birthdate?&quot;</span>
</span><span class='line'>  <span class="n">birthdate</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Gender?&quot;</span>
</span><span class='line'>  <span class="n">gender</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Title?&quot;</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">add_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">handle_result</span><span class="o">.</span><span class="p">(</span><span class="n">result</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="p">((</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Successfully added person </span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="o">[</span><span class="nb">id</span><span class="p">,</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="o">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="p">(</span><span class="n">error_message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Problem: </span><span class="si">#{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">get_new_person</span><span class="o">.</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the very definition of high-coupling.  <code>get_new_person</code> really shouldn&#8217;t care about the particular fields of a person; it
should simply read them in, and then pass them to <code>add_person</code>.  Let&#8217;s see if we can make that happen by extracting some of this code into new functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">read_person_from_user</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Name?&quot;</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Birthdate?&quot;</span>
</span><span class='line'>  <span class="n">birthdate</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Gender?&quot;</span>
</span><span class='line'>  <span class="n">gender</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Title?&quot;</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="o">[</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">person_id</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">_</span><span class="p">,</span><span class="nb">id</span><span class="p">)</span> <span class="p">{</span> <span class="nb">id</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">get_new_person</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">handle_result</span><span class="o">.</span><span class="p">(</span><span class="n">add_person</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">read_person_from_user</span><span class="o">.</span><span class="p">())</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Successfully added person </span><span class="si">#{</span><span class="n">person_id</span><span class="o">.</span><span class="p">(</span><span class="n">person</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">person</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="p">(</span><span class="n">error_message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Problem: </span><span class="si">#{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">get_new_person</span><span class="o">.</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve now abstracted the way in which we store a person into two functions: <code>read_person_from_user</code> and <code>person_id</code>.  At this
point, <code>get_new_person</code> will not need to change if we add more fields to a person.</p>

<p>If you&#8217;re confused about the use of <code>*</code> in this code, here&#8217;s a brief explanation:  <code>*</code> allows us to treat an array as a list of arguments and vice versa.  In <code>person_id</code>, we
use the parameter list <code>*_,id</code>, which tells Ruby to place all arguments to the function, save the last, into the variable <code>_</code> (so-named because we don&#8217;t care about its value),
and place the last argument in the variable <code>id</code>.  This only works in Ruby 1.9; in 1.8 only the last argument of a function may use the <code>*</code> syntax.  Further, when we call
<code>add_person</code>, we use the <code>*</code> on the results of <code>read_person_from_user</code>.  Since <code>read_person_from_user</code> returns an array, we want to treat that array as if it were an argument
list, since <code>add_person</code> accepts explicit arguments.  The <code>*</code> does that for us.  Nice!</p>

<p>Back to our code, you&#8217;ll note that we still have coupling between <code>read_person_from_user</code> and <code>person_id</code>.  They both are intimate with how we store a person in an array.
Further, if we added new features to actually <em>do</em> something with our people database, we can envision more methods coupled to this array-based format.</p>

<p>We need some sort of data structure.</p>

<h1>Data structures are just functions</h1>

<p>In non-degenerate Ruby, we&#8217;d probably make a class at this point, or at least us a <code>Hash</code>, but we don&#8217;t have access to those
here.  Can we make a real data structure just using functions?  It turns out we can, if we create a function that treats its first argument as an attribute of our data
structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">attribute</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">id</span>        <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:id</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">name</span>      <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">birthdate</span> <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:birthdate</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">gender</span>    <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:gender</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">title</span>     <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:title</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dave</span> <span class="o">=</span> <span class="n">new_person</span><span class="o">.</span><span class="p">(</span><span class="s2">&quot;Dave&quot;</span><span class="p">,</span><span class="s2">&quot;06-01-1974&quot;</span><span class="p">,</span><span class="s2">&quot;male&quot;</span><span class="p">,</span><span class="s2">&quot;Baron&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">dave</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>   <span class="c1"># =&gt; &quot;Dave&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">dave</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">)</span> <span class="c1"># =&gt; &quot;male&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>new_person</code> acts like a constructor, but instead of returning an object (which don&#8217;t exist for us), we return a function that, when called, can tell us the values of the
various attributes of our person.  We explicitly itemize the possible attributes, so we have a fairly firm definition of what the type of a person is.</p>

<p>Compare this to a class that does the same thing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:birthdate</span><span class="p">,</span> <span class="ss">:gender</span><span class="p">,</span> <span class="ss">:title</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="nb">id</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@birthdate</span> <span class="o">=</span> <span class="n">birthdate</span>
</span><span class='line'>    <span class="vi">@gender</span> <span class="o">=</span> <span class="n">gender</span>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">dave</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Dave&quot;</span><span class="p">,</span><span class="s2">&quot;06-01-1974&quot;</span><span class="p">,</span><span class="s2">&quot;male&quot;</span><span class="p">,</span><span class="s2">&quot;Baron&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">dave</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">dave</span><span class="o">.</span><span class="n">gender</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interesting.  The size of these two bits of code is more or less the same, but the class-based version is full of <em>special forms</em>.  Special Forms are essentially magic provided by the language or runtime.  To understand this code, you need to know:</p>

<ul>
<li>what <code>class</code> means</li>
<li>that calling <code>new</code> on the class&#8217;s name calls the <code>initialize</code> methods</li>
<li>what methods are</li>
<li>that prepending <code>@</code> to a variable makes it private to the class&#8217; instance</li>
<li>the difference between a class and an instance</li>
<li>what <code>attr_reader</code> does</li>
</ul>


<p>Compared to our functional version, all you need to know is:</p>

<ul>
<li>how to define a function</li>
<li>how to invoke a function</li>
</ul>


<p>Like I said, I find this interesting.  We have two ways of writing essentially the same code, and one way requires you to have a lot more special knowledge than the other.</p>

<p>OK, now that we have a real data structure, let&#8217;s rework our code to use it, instead of arrays:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">read_person_from_user</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Name?&quot;</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Birthdate?&quot;</span>
</span><span class='line'>  <span class="n">birthdate</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Gender?&quot;</span>
</span><span class='line'>  <span class="n">gender</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Title?&quot;</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">new_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">add_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Name is required&quot;</span><span class="o">]</span>                  <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Birthdate is required&quot;</span><span class="o">]</span>             <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:birthdate</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender is required&quot;</span><span class="o">]</span>                <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender must be &#39;male&#39; or &#39;female&#39;&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;male&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                                                      <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;female&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">id</span> <span class="o">=</span> <span class="n">insert_person</span><span class="o">.</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">),</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:birthdate</span><span class="p">),</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">),</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:title</span><span class="p">))</span>
</span><span class='line'>  <span class="o">[</span><span class="n">new_person</span><span class="o">.</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">),</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:birthdate</span><span class="p">),</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">),</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:title</span><span class="p">),</span><span class="nb">id</span><span class="p">),</span><span class="kp">nil</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">get_new_person</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">handle_result</span><span class="o">.</span><span class="p">(</span><span class="n">add_person</span><span class="o">.</span><span class="p">(</span><span class="n">read_person_from_user</span><span class="o">.</span><span class="p">()),</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Successfully added person </span><span class="si">#{</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">person</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="p">(</span><span class="n">error_message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Problem: </span><span class="si">#{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">get_new_person</span><span class="o">.</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>add_person</code> is a bit noisier, due to the syntax of getting an attribute, but we can now add new fields very easily and keep things structured.</p>

<h2>Object-orientation is just functions</h2>

<p>We can also add derived fields.  Suppose we want a saluation for the person that uses their title?  We can make that an attribute of the person:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">attribute</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">id</span>        <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:id</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">name</span>      <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">birthdate</span> <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:birthdate</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">gender</span>    <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:gender</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">title</span>     <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:title</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:salutation</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">name</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">title</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nb">name</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Heck, we can create full-on OO-style <em>methods</em> if we wanted to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">attribute</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">id</span>        <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:id</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">name</span>      <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">birthdate</span> <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:birthdate</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">gender</span>    <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:gender</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">title</span>     <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:title</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:salutation</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">name</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">title</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nb">name</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:update</span>
</span><span class='line'>      <span class="n">update_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:destroy</span>
</span><span class='line'>      <span class="n">delete_person</span><span class="o">.</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">some_person</span><span class="o">.</span><span class="p">(</span><span class="ss">:update</span><span class="p">)</span>
</span><span class='line'><span class="n">some_person</span><span class="o">.</span><span class="p">(</span><span class="ss">:destroy</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While we&#8217;re at it, let&#8217;s add inheritance!  Suppose we have an employee that is a person, but with an employee id number:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_employee</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="n">employee_id_number</span><span class="p">,</span><span class="nb">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">=</span> <span class="n">new_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">attribute</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">employee_id_number</span> <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:employee_id_number</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="n">attribute</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve created classes, objects, and inheritance, all with just functions, and in just a few lines of code.</p>

<p>In a sense, an object in an OO language is a set of functions that have access to a shared set of data.  It&#8217;s not hard to see why adding an object system to a functional
language is considered trivial by those knoweldgable in functional languages.  It&#8217;s certainly a lot easier than adding functions to an object-oriented language!</p>

<p>Although the syntax for accessing attributes is a bit clunky, I&#8217;m not feeling a <em>ton</em> of pain by not having classes.  Classes seem almost like syntactic sugar at this point,
rather than some radical concept.</p>

<p>One thing that seems problematic is mutation.  Look at how verbose <code>add_person</code> is.  It calls <code>insert_person</code> to put our person into the database, and
gets an ID back.  We then have to create an entirely new person just to set the ID.  In classic OO, we&#8217;d just do <code>person.id = id</code>.</p>

<p>Is mutable state what&#8217;s nice about this construct?  I&#8217;d argue that its compactness is what&#8217;s nice, and the fact that this compactness is implemented via mutable state is just
incidental.  Unless we are in a severely memory-starved environment, with terrible garbage collection, we aren&#8217;t going to be concerned about making new objects.  We <em>are</em> going
to be annoyed by the needless repetition of building new objects from scratch.  Since we already know how to add functions to our, er, function, let&#8217;s add one to bring back
this compact syntax.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="nb">id</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">id</span>        <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:id</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">name</span>      <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">birthdate</span> <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:birthdate</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">gender</span>    <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:gender</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">title</span>     <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:title</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:salutation</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">name</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">title</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nb">name</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:with_id</span> <span class="c1"># &lt;===</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">new_person</span><span class="o">.</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">gender</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, <code>add_person</code> is even simpler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Name is required&quot;</span><span class="o">]</span>                  <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Birthdate is required&quot;</span><span class="o">]</span>             <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:birthdate</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender is required&quot;</span><span class="o">]</span>                <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender must be &#39;male&#39; or &#39;female&#39;&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;male&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                                                      <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;female&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">id</span> <span class="o">=</span> <span class="n">insert_person</span><span class="o">.</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">),</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:birthdate</span><span class="p">),</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">),</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:title</span><span class="p">))</span>
</span><span class='line'>  <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:with_id</span><span class="p">,</span><span class="nb">id</span><span class="p">),</span><span class="kp">nil</span><span class="o">]</span> <span class="c1"># &lt;====</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s not quite as clean as <code>person.id = id</code>, but it&#8217;s terse enough that it&#8217;s still readable, and the code is better for it.</p>

<h2>Namespaces are just functions</h2>

<p>What I&#8217;m really missing is namespaces.  If you&#8217;ve done any C programming, you know that your code becomes littered with functions that have complex prefixes to avoid
name-clashes.  We could certainly do that here, but it would be nice to have proper namespacing, like we get via modules in Ruby or object literals in JavaScript.
We&#8217;d like to add this without adding a feature to our language.  The simplest way to do that is to implement some sort of map.  We can already get explicit attributes
of a data structure, so we just need a more generic way to do so.</p>

<p>Currently, the only data structure we have is an array, and we don&#8217;t have methods, since we don&#8217;t have classes.  The arrays we have are really tuples, and the only general
operations we have are the ability to extract data from them.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">first</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">((</span><span class="n">f</span><span class="p">,</span><span class="o">*</span><span class="n">rest</span><span class="p">))</span> <span class="p">{</span> <span class="n">f</span>    <span class="p">}</span> <span class="c1"># or should I name this car? :)</span>
</span><span class='line'><span class="n">rest</span>  <span class="o">=</span> <span class="o">-&gt;</span><span class="p">((</span><span class="n">f</span><span class="p">,</span><span class="o">*</span><span class="n">rest</span><span class="p">))</span> <span class="p">{</span> <span class="n">rest</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can model a map as a list, by treating it as a list with three entires: the key, the value, and the rest of the map.  Let&#8217;s avoid the &#8220;OO style&#8221; of making &#8220;methods&#8221; and
just keep it pureful functional:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">empty_map</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">add</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">map</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">[</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">,</span><span class="n">map</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">get</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">map</span><span class="p">,</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">map</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">map</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="k">if</span> <span class="n">map</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">key</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">get</span><span class="o">.</span><span class="p">(</span><span class="n">map</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use it like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">map</span> <span class="o">=</span> <span class="n">add</span><span class="o">.</span><span class="p">(</span><span class="n">empty_map</span><span class="p">,</span><span class="ss">:foo</span><span class="p">,</span><span class="ss">:bar</span><span class="p">)</span>
</span><span class='line'><span class="n">map</span> <span class="o">=</span> <span class="n">add</span><span class="o">.</span><span class="p">(</span><span class="n">map</span><span class="p">,</span><span class="ss">:baz</span><span class="p">,</span><span class="ss">:quux</span><span class="p">)</span>
</span><span class='line'><span class="n">get</span><span class="o">.</span><span class="p">(</span><span class="n">map</span><span class="p">,</span><span class="ss">:foo</span><span class="p">)</span>  <span class="c1"># =&gt; :bar</span>
</span><span class='line'><span class="n">get</span><span class="o">.</span><span class="p">(</span><span class="n">map</span><span class="p">,</span><span class="ss">:baz</span><span class="p">)</span>  <span class="c1"># =&gt; :quux</span>
</span><span class='line'><span class="n">get</span><span class="o">.</span><span class="p">(</span><span class="n">map</span><span class="p">,</span><span class="ss">:blah</span><span class="p">)</span> <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is enough to namepsace things:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="n">add</span><span class="o">.</span><span class="p">(</span><span class="n">empty_map</span> <span class="p">,</span><span class="ss">:insert</span> <span class="p">,</span><span class="n">insert_person</span><span class="p">)</span>
</span><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="n">add</span><span class="o">.</span><span class="p">(</span><span class="n">people</span>    <span class="p">,</span><span class="ss">:update</span> <span class="p">,</span><span class="n">update_person</span><span class="p">)</span>
</span><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="n">add</span><span class="o">.</span><span class="p">(</span><span class="n">people</span>    <span class="p">,</span><span class="ss">:delete</span> <span class="p">,</span><span class="n">delete_person</span><span class="p">)</span>
</span><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="n">add</span><span class="o">.</span><span class="p">(</span><span class="n">people</span>    <span class="p">,</span><span class="ss">:fetch</span>  <span class="p">,</span><span class="n">fetch_person</span><span class="p">)</span>
</span><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="n">add</span><span class="o">.</span><span class="p">(</span><span class="n">people</span>    <span class="p">,</span><span class="ss">:new</span>    <span class="p">,</span><span class="n">new_person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">add_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Name is required&quot;</span><span class="o">]</span>                  <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Birthdate is required&quot;</span><span class="o">]</span>             <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:birthdate</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender is required&quot;</span><span class="o">]</span>                <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender must be &#39;male&#39; or &#39;female&#39;&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;male&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                                                      <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;female&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">id</span> <span class="o">=</span> <span class="n">get</span><span class="p">(</span><span class="n">people</span><span class="p">,</span><span class="ss">:insert</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">),</span>
</span><span class='line'>                            <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:birthdate</span><span class="p">),</span>
</span><span class='line'>                            <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">),</span>
</span><span class='line'>                            <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:title</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="n">get</span><span class="p">(</span><span class="n">people</span><span class="p">,</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="ss">:with_id</span><span class="p">,</span><span class="nb">id</span><span class="p">),</span><span class="kp">nil</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could certainly replace our <code>new_person</code> implementation with a map, but it&#8217;s nice to have an explicit list of attributes that we support, so we&#8217;ll leave <code>new_person</code> as-is.</p>

<p>One last bit of magic.  <code>include</code> is a nice feature of Ruby; it lets us bring modules into scope to avoid using the namespace.  Can we do that here?  We can get close:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_namespace</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span><span class="n">code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">code</span><span class="o">.</span><span class="p">(</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span> <span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span><span class="n">key</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">add_person</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Name is required&quot;</span><span class="o">]</span>                  <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Birthdate is required&quot;</span><span class="o">]</span>             <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:birthdate</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender is required&quot;</span><span class="o">]</span>                <span class="k">if</span> <span class="nb">String</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">))</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Gender must be &#39;male&#39; or &#39;female&#39;&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;male&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                                                      <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;female&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">include_namespace</span><span class="p">(</span><span class="n">people</span><span class="p">,</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">_</span><span class="p">(</span><span class="ss">:insert</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:name</span><span class="p">),</span>
</span><span class='line'>                     <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:birthdate</span><span class="p">),</span>
</span><span class='line'>                     <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:gender</span><span class="p">),</span>
</span><span class='line'>                     <span class="n">person</span><span class="o">.</span><span class="p">(</span><span class="ss">:title</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="n">_</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="ss">:with_id</span><span class="p">,</span><span class="nb">id</span><span class="p">),</span><span class="kp">nil</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, this might be over the top, but it&#8217;s fairly interesting to think of something like <code>include</code> as just a way to &#8220;type less stuff&#8221;, and that we can achieve a similar
reduction in &#8220;typing stuff&#8221; by just using functions.</p>

<h2>What have we learned?</h2>

<p>With just a few basic language constructs, we can create a fairly usable programming language.  We can create bona-fide types, namespaces, and even
do object-oriented programming, without any explicit support for these features.  And we can do so in more or less the same amount of code that would be required
by using Ruby&#8217;s built-in support.  The syntax is <em>slightly</em> verbose compared to the full-blown Ruby equivalent, but it&#8217;s not
<em>that</em> bad.  We could write real code using this degenerate form of Ruby, and it wouldn&#8217;t be too bad.</p>

<p>Does this help us in our everyday work?  I think this is a lesson in simplicity.  Ruby is fraught with DSLs, abused syntax, and meta-programming, yet we&#8217;ve just
been able to accomplish a lot without even using classes!  Perhaps the problem you have in front of you can be solved by something simple?  Perhaps you don&#8217;t
need anything fancy, but can rely on the more straightforward parts of your language.</p>
]]></content>
  </entry>
  
</feed>
