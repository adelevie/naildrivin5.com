<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Naildrivin' &#10106;]]></title>
  <link href="http://www.naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://www.naildrivin5.com/"/>
  <updated>2013-08-14T11:06:31-04:00</updated>
  <id>http://www.naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Responsible Refactoring]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/08/08/responsible-refactoring.html"/>
    <updated>2013-08-08T09:11:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/08/08/responsible-refactoring</id>
    <content type="html"><![CDATA[<p>Emboldened by tests, and with the words &#8220;ruthless refactoring&#8221; in my head, I used to &#8220;improve&#8221; the codebase I was maintaining at a previous job.  One day,
my &#8220;cleanup&#8221; caused production to break.  How could this be?  I was being Agile.  I was Testing.  I was Merciless in my Refactoring.  I had found Code
Smells, dammit!</p>

<p>I was being irresponsible.</p>

<!-- more -->


<p>Lets be clear, first:  I&#8217;m not going to be talking about the third step of the TDD cycle.  Refactoring code that&#8217;s in development and not
currently running on production is something you must absolutely do.  Work clean, and <em>write</em> clean code.  What we&#8217;re talking about is changes to existing,
running code.</p>

<p>In <a href="http://www.naildrivin5.com/blog/2013/06/16/production-is-all-that-matters.html">Production is All That Matters</a>, I outlined the importance of code in production and how to keep it running smoothly.  One thing I
didn&#8217;t touch on was changing that code.  Every change to production introduces a risk of breaking something.  Any system beyond a to-do list or blog
engine has complexity that can be difficult to cover by tests.  Integration tests are brittle, and cross-system tests more so.  Manual QA is the most
brittle of all.</p>

<p>Ideally, the size of your changes to production should be commensurate with the size of the feature you are adding.  Small features should require small
changes.  Large changes should be an indicator of a large or complex feature.</p>

<p>A pure refactoring breaks this rule completely - a refactoring adds no direct business value to the application, yet introduces risk that something will break.</p>

<p>&#8220;But,&#8221; you say, &#8220;refactoring bad code makes it easier to change in the future.  It makes us faster later, and we can deliver more business value then!&#8221;</p>

<p>&#8220;The future&#8221;, you say?  I say <a href="http://en.wikipedia.org/wiki/You_aren't_gonna_need_it">You Ain&#8217;t Gonna Need It</a>, AKA YAGNI.  We tell ourselves not to invent features or add complexity to our code because
we don&#8217;t know what the future holds.  I would say that refactoring outside of the TDD cycle should be viewed in the same light.</p>

<p>How then, do we prevent our code base from rotting?  How can we <em>ever</em> improve it?  If we focus our efforts on demonstrable business value - the future
be damned - how do we avoid having a big pile of shit codebase?</p>

<p>Before we answer, consider a piece of code you&#8217;d like to refactor.  When you see it, it just looks bad.  It&#8217;s hard to follow, has poor naming, and is
generally ugly.  It&#8217;s <em>begging</em> to be cleaned up.  Now suppose that for the next six months, no requirement surfaces, nor bug is found, that requires modifying that code. Is its lack of cleanliness <em>really</em> a problem?</p>

<p>Clean code is not an end unto itself.  Repeat: clean code is not an end unto itself<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>Clean code is a feature of code that is easy to change.  Code that is easy to change enables us to provide value to the business more easily.</p>

<p>Our job isn&#8217;t to write clean code.  Our job isn&#8217;t even to necessarily even write code at all.  It&#8217;s to use software to deliver business value.</p>

<p>With that in mind, let&#8217;s get back to the question at hand: how do we improve our codebase?</p>

<p>When faced with a change we need to make, we form a plan of attack.  This plan may be entirely in our heads, or we might sketch it out, but at some level
we decide how we&#8217;re going to get started.  I would argue that there are at least two ways to tackle every problem:</p>

<ul>
<li>Plow through, making the change as expediently as possible, changing only what&#8217;s needed to ship.</li>
<li>Clean up or improve the code in a way that makes the change easier, then make the change.</li>
</ul>


<p>All you have to do is decide which approach will deliver more value more quickly.  To be honest, it&#8217;s often the first approach, but it&#8217;s not <em>always</em>.
Occasionally, it&#8217;s actually faster to clean things up first.</p>

<p>And <strong>this</strong> is how you improve your codebase. When cleaning up the code <em>enables you to work faster</em> for a task you aren&#8217;t dreaming up but <em>actually have at
hand</em>, refactoring is the way to go.</p>

<p>The beauty of this approach is that you never again need a &#8220;refactoring story&#8221; in your backlog, nor do you need to get &#8220;permission&#8221; to clean up some code.   You simply do it to get your job done faster and better.</p>

<p>Of course, we are bad at estimating, so how can we know what to do?  Here&#8217;s some guidelines that I&#8217;ve found helpful in determining if a refactoring will
help:</p>

<ul>
<li>Changes to public APIs - function, method, module, or class names - are almost never worth it, especially in a dynamically typed language, especially in Ruby but even moreso in JavaScript.</li>
<li>If you have to change a test, it&#8217;s probably not worth it (and not technically a refactoring).</li>
<li>If you&#8217;ll be deleting code, it&#8217;s probably a good sign.</li>
<li>If you are unfamiliar with the code, resist the urge to &#8220;clean it up&#8221; - we often conflate &#8220;I don&#8217;t understand this&#8221; with &#8220;this is poorly designed&#8221;.</li>
</ul>


<p>When you <em>do</em> decide a refactoring is going to help, be sure to put that refactoring in its own commit.  Ideally, get that refactoring up on production in advance
of your change (depending on the significance of your change).  Your tests only tell you what works, not what doesn&#8217;t.  Production can give you more
information.</p>

<p>Pushing your refactoring to production ahead of the actual change also has a nice side-effect: it forces you to consider the risk of the refactoring.  When deciding what to do, if you know your refactoring is going up to production on its own, it allows you to think more clearly about the risk involved in the proposed refactoring.  You may decide it&#8217;s not worth it.</p>

<p>This is what I call <em>responsible refactoring</em>.  Although you don&#8217;t get to go apeshit &#8220;improving&#8221; your codebase, you do get a clear and simple process to make the code better in a way that has demonstrable, immediate benefits.  Think about it next time you are tempted to &#8220;clean up&#8221; some smelly code.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>It&#8217;s also worth pointing out that the following things are <strong>also</strong> not ends unto themselves: object-orientated, pure functional, immmutabile, referentially transparent, thread safe, O(log n), fast tests, the smallest-sized-CSS-you-can-dream-of, and performance.  I&#8217;m sure I left out about a billion things <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; Manual vs Automatic Continuous Deployment]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/08/07/manual-vs-automatic-continuous-deployment.html"/>
    <updated>2013-08-07T12:31:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/08/07/manual-vs-automatic-continuous-deployment</id>
    <content type="html"><![CDATA[<p>My ex-colleague from LivingSocial, <a href="https://twitter.com/danmayer">Dan Mayer</a> posted a <a href="http://mayerdan.com/programming/2013/08/04/thoughts-on-continuous-deployment/">great read about continuous deployment</a>, and the tradeoffs when doing an automatic deploy:</p>

<blockquote><p>After considering some of the real world implications of automated continuous deployment, I didn’t feel it was right for our team on most of our projects at the moment. Both because we would need a bit of additional tooling around deployment and dashboards, and because our tests are far to slow.</p></blockquote>

<p>It&#8217;s a good (and quick) read. Having worked on at least one of the apps that Dan&#8217;s talking about, I would agree he&#8217;s making the right call and that if your test suite is slow, automatic deployment can be a killer.  I also think there&#8217;s a relationship between the size of the contributor group and the speed of the test suite - the more devs pushing stuff in, the faster it has to be.</p>

<p>In <a href="http://www.theseniorsoftwareengineer.com">my book</a>, there&#8217;s a chapter on bootstrapping new applications, and my recommendation is to set up automatic continuous deployment from the start.  I stand by that, because it basically turns the problem Dan identifies around: slow tests slow your deployment which should thus motivate keeping tests slow (and applications lean).  We&#8217;ll see how it works out at <a href="http://stitchfixjobs.com/blog/2013/07/30/our-git-workflow/">Stitch Fix</a>.  We have one app with a somewhat slow test suite, and three with relatively fast ones.  Automatic deploys work really well so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; Stitch Fix Git Workflow]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/07/30/stitch-fix-git-workflow.html"/>
    <updated>2013-07-30T11:04:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/07/30/stitch-fix-git-workflow</id>
    <content type="html"><![CDATA[<p>The Stitch Fix <a href="http://stitchfixjobs.com/blog">tech blog</a> is up, and I just posted <a href="http://stitchfixjobs.com/blog/2013/07/30/our-git-workflow/">how we use Git and Hubot</a> to automate deployment, without having a complex series of
branches and tags.</p>

<blockquote><p>This is fairly simple - new code goes on branches, master is always deployable (when clean), and <code>deploy/production</code> always contains whatever&#8217;s on production.</p></blockquote>

<p><a href="http://www.theseniorsoftwareengineer.com">My book</a> talks about bootstrapping new applications, and my recommendation is to set up continuous deployment.  If you&#8217;ve ever worked on a release
schedule, you&#8217;ll know that continuous deployment is a pure joy.  It&#8217;s also a boon to the users, who get the features and fixes as fast as possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Agile Email Management]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/07/23/agile-email-management.html"/>
    <updated>2013-07-23T08:27:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/07/23/agile-email-management</id>
    <content type="html"><![CDATA[<p>Email is a fact of life.  It&#8217;s the primary conduit through which all information in our work life flows.  Clients email us.
Users email us.  Project managers email us. Our issue management systems email us.  Heck, even our <em>apps</em> email us when things are going wrong.</p>

<p>Managing email can be tricky - if you spend too much time on it, you don&#8217;t get any other work done, and if you don&#8217;t spend enough
time on it, you appear flaky at best and incompetent at worst.  Over the past several years, I&#8217;ve developed a system for managing
email as a developer that maximizes my responsiveness without creating an undue burden on my workload.  In short, I&#8217;m a lot more
agile in how I deliver results by allowing emails to occasionally &#8220;overrule&#8221; my otherwise prioritized backlog.</p>

<p>I&#8217;m going to share it with you to see if you like it</p>

<!-- more -->


<p>First, we need to understand what is actually coming to us via email.  Emails have many attributes that we&#8217;ll need to use to
figure out what to do:</p>

<ul>
<li>Is the email actionable?</li>
<li>If it is, do I need to take action now?</li>
<li>If not, should someone else take action now?</li>
<li>If not, is this action even worth doing?</li>
</ul>


<p>It&#8217;s actually fairly easy to manage your inbox if you think along these lines.  The key to making it work is the second question,
&#8220;Do I need to take action now?&#8221;  By being honest about your workload and your interpretation of you and your team&#8217;s priorities, you will always be working on what&#8217;s important. You&#8217;ll also transform &#8220;urgent&#8221; (i.e. not urgent) requests into conversations about priorities instead of an ever-growing list of to-dos or a black-hole of unresponsiveness.</p>

<p>The basic process is:</p>

<ol>
<li>Lightly filter unactionable and highly-actionable emails</li>
<li>Read all unread email</li>
<li>Archive unactionable emails</li>
<li>Identify which actionable emails are priorities</li>
<li>Defer all the rest by starting a discussion about priorities</li>
<li>Address priority emails immediately</li>
</ol>


<h2>Lightly filter unactionable and highly-actionable emails</h2>

<p>Ideally, you don&#8217;t get regular emails that can be machine-identified as unactionable.  We don&#8217;t live in the ideal world, so set
up filters for these.  These are emails that you <strong>never</strong> need to read as they come in.  Set your email client to archive - not
delete - these messages.</p>

<p>Second, there are emails that are a requirement for immediate action.  For example, if your website is down.  Configure your
email client to forward these to your cellphone via SMS and <em>leave them as unread</em>.</p>

<p>This is the only filtering you should do.  As we&#8217;ll see, we&#8217;ll be keeping our inbox very clean, and machine-filtering of emails
only serves to hide things from your attention.</p>

<p>Once you&#8217;ve set this up, the remaining emails you receive will require you to read them.</p>

<h2>Read all unread email</h2>

<p>The more frequently you read email, the less you will have to read each time you do so.  I tend to read emails within 15 minutes
of their arrival, however checking once per hour is probably a good place to start.  You should not be &#8220;heads down&#8221; in code for
more than an hour at a time, so this is a good cadence for checking your email.</p>

<p>Each time you check email, read <em>all</em> of it.  You want to establish a Service Level Agreement (SLA) that you read all your emails
at least once per hour (during business hours of course).  This means that any request anyone has of you can get your attention
within 59 minutes.  Doing this reduces the need for others to find you in person, call you on the phone, hit you up on IM or
otherwise interrupt you on <em>their</em> schedule.</p>

<p>Reading email less frequently is an invitation for constant disruption, because anyone who feels their request is urgent will not
want to wait very long for a response.  They are highly likely to wait an hour.</p>

<p>Once you&#8217;ve read your emails, you need to start addressing them before getting back to work.</p>

<h2>Archive all unactionable emails</h2>

<p>Un-actionable emails are emails where the <em>sender</em> agrees that no response is required from you.  This is important.  Just
because <em>you</em> think an email is unactionable, it doesn&#8217;t mean the sender does.  Don&#8217;t passive-aggressively archive emails that are
poorly written or that request information you feel is unimportant.</p>

<p>Once you&#8217;ve identified unactionable emails, archive them.  Never delete your email.  Never.  Delete. Email.  You want to be able
to pull up any email anyone sent you - it&#8217;s an historical record that often clashes with our fallible human memory.</p>

<p>The remaining emails will require you to do <em>something</em>.  This requires prioritization.</p>

<h2>Identify which actionable emails are priorities</h2>

<p>Every email that is actionable must now be prioritized; actionable doesn&#8217;t mean &#8220;do it now&#8221;.  I prefer a modified version of the Merlin Mann School of Priority.
Merlin says that there is only ever one priority - the thing you are working on right now.  I take this one step back and feel that
actions or requests are either a priority or they are not.  There are no relative priorities - just a boolean &#8220;yes&#8221; or &#8220;no&#8221;.</p>

<p>Priority requests are those that require a response within the next 24 hours (accounting for weekends and holidays).  Judge this on your own - if you feel a request is a
priority, then you agree with the sender and can get to it.  If you disagree with the sender, they must convince you - it&#8217;s your
time on the line, so the request isn&#8217;t a priority until you are convinced.</p>

<p>Do not reply to emails that you&#8217;ve identified as priorities.  Since you&#8217;ll be getting to this request quickly, you can simply
deliver one reply when the work is done.  &#8220;I&#8217;m on it&#8221; is not helpful and invites further emails.</p>

<p>Any emails that are <em>not</em> priorities, however,  <em>do</em> require a response.</p>

<h2>Defer all the rest by starting a discussion about priorities</h2>

<p>Requests that aren&#8217;t priorities have a chance of never being done.  Which means that there&#8217;s no guarantee you will ever work on
them.  The sender needs to know this so that they can plan accordingly.  Part of being responsive and reliable is being clear
about what you <em>aren&#8217;t</em> going to be doing.  Since you&#8217;re allowing certain requests to override your current work queue, this
means you get to say &#8220;no&#8221; to things that shouldn&#8217;t.</p>

<p>For requests that you feel are important, but that you don&#8217;t have time for, you have two options:</p>

<ul>
<li>Identify someone else who can do it.  In this case, reply as such and add said person to the email chain</li>
<li>Commit to doing it in the next five days.  If you can&#8217;t commit to this timetable, it&#8217;s probably not that important, so make
this commitment only when you really can get it done.  Don&#8217;t commit farther out, because your accuracy will go <em>way</em> down.</li>
</ul>


<p>For requests you feel are <em>not</em> important (usually because they are not really a priority), you have to let the
requester know.  As briefly and tactfully as possible, lay out your reasons why you won&#8217;t be able to address the request. Include a list of your current priorities - perhaps the requester knows something you don&#8217;t that would change your priorities.</p>

<p>Since this email is going to be &#8220;bad news&#8221; to the sender, it&#8217;s important that you write it well.  There&#8217;s a section in <a href="http://www.theseniorsoftwareengineer.com">my latest book</a> about how do write effective emails, but the short answer is to be concise and read what you write before you send it.</p>

<p>Resist the urge to throw the request into your backlog or feature management system.  Your backlog is a black hole of broken promises and is a
dishonest and passive-aggressive way of dealing with your fellow co-workers&#8217;s requests.  Respect them enough to tell them it&#8217;s not a
priority and that you can&#8217;t realistically guarantee you&#8217;ll ever get to it.  Make <em>them</em> prioritize it - even if by fiat.</p>

<p>Once you reply, archive the original email.  No more action is required on your part unless someone responds.  You&#8217;ll handle
that response the next time you check email.</p>

<p>At this point, your inbox is a short list of emails representing urgent, priority actions, or requests you&#8217;ve agreed to address
in the next five days.  You can differentiate them by the existence of a reply.  Unreplied emails are your priority. Get to them.</p>

<h2>Address priority emails immediately</h2>

<p>Generally, emails either request information or require writing code.  Address the emails requesting information first, as these
are the easiest to deal with.  Find a definitive answer, show how you arrived at it, send the reply, and archive the email.  It&#8217;s
done and out of your life.</p>

<p>Requests that require writing code must now be balanced against your current workload.  I would recommend that bugs that you can
fix in three hours or less you fix immediately.  Your brain is already aligned to the bug by having read and prioritized the
email, so just fix it and get it out of your life.</p>

<p>For everything else, you&#8217;ll have to find a way to deal with it in the next 24 hours.  Work in order based on whatever factors you
feel are important.</p>

<p>Whenever you complete something, reply with your results.  If you are using continuous deployment, reply when the code is on
production.  If you aren&#8217;t, reply when code is in version control scheduled for release, and let the requester know when to
expect the code on production.</p>

<p>After 24 hours, any request you haven&#8217;t addressed deserves a reply.  Your SLA for email <em>responses</em> is 24 hours.  Since you have
no actual result to report, you&#8217;ll need to indicate what the holdup us, and when you can expect to address the issue.</p>

<p>Once your priority requests are addressed, you&#8217;ll need to factor in your &#8220;five-day&#8221; requests into your regular workflow.  Be sure
to circle back to the requester for any issues you haven&#8217;t addressed in five days.  You may need to defer them or delegate them,
but if you find you are frequently unable to deliver on these promises, you need to start promising less of them.</p>

<p>It&#8217;s important that you tailor your promises to match your actual delivered results as much as you can.  Not only does this make
you reliable, but it also allows others to accurately plan based on your availability and existing priorities.  They need - and
deserve - to know that you cannot handle but so much.  Acting as a black  hole makes it very hard for others to do their jobs,
because they don&#8217;t know what you will (and will not) be delivering.</p>

<h2>What this all results in</h2>

<p>It may seem like you&#8217;re going to spend all of your time managing email and addressing the requests therein.  Remember that the key
to this is identifying priorities.  A priority is something you absolutely plan to do in the next 24 hours.  You can only do so
much in that time, especially given everything else you are working on, so it forces you to commit to very little.</p>

<p>The &#8220;five day&#8221; commitment further reinforces this but allowing some flexibility without leading anyone on about what you&#8217;ll
be doing.</p>

<h2>What about my Scrumban Agile Board of Index Cards™?</h2>

<p>I have seen very strict agile processes where the only way to insert work at the top of a developer&#8217;s queue is if something is on
fire and the business is about to go under - everything else goes to the backlog.  This is anything but agile.</p>

<p>If you use a feature management system, it should be used for planned work according to a roadmap resulting from thinking
about solving business problems.  Such planning cannot account for the reality of how a system is built or used.  Over time,
pressure builds from the users of the system against the team&#8217;s plan for its enhancement. Your inbox is a valve to releieve some of
that pressure.  It&#8217;s a way to allow a controlled circumvention of your development process whenever it&#8217;s warranted.</p>

<p>By carefully managing your email, you make yourself (and your team) much more responsive to the reality of the business.  By
promising only what can be delivered in 24 hours, you enable urgent requests to be addressed without becoming lost in a sea of
emails, all while providing honest and useful feedback to your users and co-workers about what can realistically be accomplished.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Senior Software Engineer - My New Book]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/07/15/my-new-book.html"/>
    <updated>2013-07-15T08:00:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/07/15/my-new-book</id>
    <content type="html"><![CDATA[<p>Last November, I did my own private <a href="http://pragprog.com/news/november-writing-month-pragmatic-guide-to-git-in-print">PragProWriMo</a>, writing every day that month to produce a non-fiction technology book:</p>

<blockquote class="twitter-tweet"><p>And that&#39;s IT! 671 words today for a total of 46,611 words. Now what? Editing hell I guess :) <a href="https://twitter.com/search?q=%23digwrimo&amp;src=hash">#digwrimo</a> <a href="https://twitter.com/search?q=%23PragProWriMo&amp;src=hash">#PragProWriMo</a></p>&mdash; ❺➠ David Copeland (@davetron5000) <a href="https://twitter.com/davetron5000/statuses/274513337486823425">November 30, 2012</a></blockquote>


<script async src="http://www.naildrivin5.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Between Dec 1, 2012 and today, I&#8217;ve been editing it, and it&#8217;s finally complete!</p>

<p><a href="http://www.theseniorsoftwareengineer.com">The Senior Software Engineer</a> is a 200-page e-book on everything a developer needs to know to be a truly senior
engineer…except for how program.</p>

<p>The book&#8217;s subtitle is &#8220;A Guide for Making the Most of Your Career&#8221; and that&#8217;s exactly what it is.  I realized over the past few years
that the best and most successful developers I&#8217;ve come across aren&#8217;t just good at writing code.  They can communicate effectively
with others.  They can launch a greenfield project without incident.  They can write documentation.  They can lead others without
becoming managers who have to give up coding.</p>

<p>In short, these developers prioritize the delivery of results above all else.  They often (though not always) use software to
deliver those results.</p>

<p>This is the subject of the book.  It&#8217;s designed to get you thinking about the big picture, of which computer programs are only a
small part.  It&#8217;s a roadmap for advancing in your career without giving up writing code.</p>

<p>It&#8217;s also prescriptive.  You&#8217;ll learn how to give a code review as well as receive one.  You&#8217;ll learn how to keep organized while
implementing complex features.  You&#8217;ll learn how to create a convincing technical argument by understanding others&#8217; priorities.
You&#8217;ll learn how to interview potential team members, and then lead them to successful product delivery.  <a href="http://www.theseniorsoftwareengineer.com">Check out the website</a>, where you&#8217;ll find a full table of contents as well as some excerpts.</p>

<p>The lessons in this book have taken me a long time to learn, and I still struggle every day with many of them. My hope is
that if we all start thinking about this stuff earlier in our careers (at least as much as we think about the next great language or framework) we can do better work and make software better.</p>

<p><a href="http://www.theseniorsoftwareengineer.com">It&#8217;s available now for $25, in PDF, EPUB, MOBI, and Markdown</a>.  I hope you enjoy it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Production is all that matters]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/06/16/production-is-all-that-matters.html"/>
    <updated>2013-06-16T12:53:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/06/16/production-is-all-that-matters</id>
    <content type="html"><![CDATA[<p>This is important.  It has to do with your treatment and reaction to how your software runs in production. How your software runs in production is <strong>all that matters</strong>.  The most amazing abstractions, cleanest code, or beautiful algorithms are meaningless if your code doesn&#8217;t run well on production.</p>

<p>If you have no way to understand how your code runs in production, you are more typist than engineer.  It&#8217;s not necessarily your fault - many organizations don&#8217;t allow developers any real access to production - but you need to do something about it, and I&#8217;m gonna show you how.</p>

<!-- more -->


<p>Let&#8217;s get a few terms straight:</p>

<ul>
<li><em>Production</em> - the environment where your app runs and users are using it.  It could be a server, or a series of servers, or a browser, or an iPhone, or a desktop computer.</li>
<li><em>Access</em> - access isn&#8217;t necessarily a login to the production server.  Access means you have the ability to observe aspects of how your application is running: logs, performance, statistics.  It could include the ability to easily make changes to production, but doesn&#8217;t necessarily need to.</li>
<li><em>Error</em> - anything that goes wrong on production.  Anything from excessive 404s, to a 500, to bad data, to a crash, an error is something that happens on production that your application is unable to handle.</li>
</ul>


<p>Here&#8217;s how we&#8217;re gonna attack this problem:</p>

<ol>
<li>Understand why handling production errors is important</li>
<li>Learn to detect production errors</li>
<li>Learn how to fix production errors</li>
<li>Starting writing code to avoid production errors</li>
</ol>


<h2>Why handling production errors matters</h2>

<p>Your application serves a purpose.  It meets the needs of its users.  When it encounters a problem, it fails to meet that need.  When your application fails to meet the need of a user, revenue could be lost.  In other words, when your application experiences a failure, you are putting the business at risk.</p>

<p>Let&#8217;s take an example.  Suppose that every time a user signs up, they must activate their account by clicking on a link sent by an automated email from your application.  Suppose a user signs up and, at the exact moment the welcome email is to be sent, there is a network error and the email isn&#8217;t sent.</p>

<p>The user will never get their activation email unless steps are taken.  If no steps are taken,
this customer won&#8217;t use your service, which means you aren&#8217;t making money from them.  This user <em>could</em> have
been a happy customer, even one that was an advocate for your company, one who could drive
many more customers to you but, because of an un-handled error on production, we&#8217;ll never
know.</p>

<p>Now, this customer could call up customer service and ask why they didn&#8217;t get their sign-up
email?  Customer service could manually activate them, but this has a cost, too.  Handling this
means not handling something else. If it piles up, you&#8217;ll need more customer
service people and that costs money.</p>

<p>All because a very basic production error wasn&#8217;t handled.</p>

<p><span class='pullquote-right' data-pullquote='make sure there&#8217;s no software standing in their way '>
You may think that a few missing users won&#8217;t matter in the grand scheme of things.  That&#8217;s bad customer service, but it&#8217;s also foolish and lazy thinking.  Every customer matters.  Someone wants to pay the company money, your job as a developer is to make sure there&#8217;s no software standing in their way.  And don&#8217;t think it doesn&#8217;t matter for internal users.  If their jobs are inefficient because of buggy software, they will cost more, and the business will be less successful.
</span></p>

<p>Dismissing errors like this sets a dangerous precedent.  You must begin to make judgement calls.
Which production errors <em>matter</em>?  How many failures is &#8220;too many&#8221;?  How much loss of revenue/increase in cost is it OK for the engineering team to create before something needs to be done?</p>

<p>I&#8217;m here to tell you that <em>all</em> failures matter, <em>one</em> is too many, and that the engineering team should not tolerate loss of revenue or increased costs due to software issues.  Engineers are paid a lot of money to solve problems, and should treat losses in revenue seriously.</p>

<p>The way we do that is by detecting, handling, and preventing errors in our production
applications.</p>

<p>The way to do <strong>that</strong> is to build fault-tolerant software.  This means thinking a bit harder
about what you&#8217;re doing than maybe you would otherwise.  This means being a bit more paranoid
about what might happen.  Mostly, however, it means gaining an understanding of how your
application behaves in production, and making it a priority to improve its behavior.</p>

<p>The first step to fault-tolerant software is to detect errors in production.</p>

<h2>Detecting production errors</h2>

<p>A software application is nothing more than a complex input/output device.  Information comes in, processing happens, and output is returned.  Inexperienced developers primarily focus on input from and output to the software&#8217;s users.  You need to do more.  You need, at the very least, some output that is just for you, the developer, to understand how the software is running.</p>

<p>The most basic developer-targeted output is the application log.</p>

<h3>Your Application Log</h3>

<p>Making use of this log requires two things:</p>

<ul>
<li>Sensible &amp; judicious logging of useful information throughout your application</li>
<li>A searchable, durable location for those logs</li>
</ul>


<h4>Useful logging messages</h4>

<p>Your log statements should have, at a minimum:</p>

<ul>
<li><strong>Timestamp</strong></li>
<li><strong>Severity</strong> (error/warning/info/debug)</li>
<li><strong>Process identifier</strong> - this allows you to know which messages come from which servers and processes</li>
<li><strong>Request identifier</strong> - this allows you to associate multiple log messages with a particular request.  Often, your web server can handle this, although you could use the currently-logged-in user id as a proxy.</li>
<li><strong>Some information</strong> - a description of what you&#8217;d like to know if things go wrong.  Likely, you&#8217;ll want database identifiers and descriptions of what is happening or why.</li>
</ul>


<p><span class='pullquote-right' data-pullquote='Log every request and what the response was '>
Log every request and what the response was, along with anything else that&#8217;s relevant to what went on during the request.  Log edge cases in your logic, warnings, or other events that are outside the &#8220;happy path&#8221;.  You might also log the results of complex calculations whose results are important (i.e. show your work).
</span></p>

<p>Don&#8217;t worry about performance - you can remove logging if you need to, but your primary duty is to understand how your application is working, and the log is a great place to do that.</p>

<p>These logs must be aggregated somewhere where, at the very least, you can <code>grep</code> them.</p>

<h4>A searchable location for logs</h4>

<p>Without the ability to search logs, they are useless.  If they are sitting on a disk you have
access to, open up the man page for <code>grep</code> and have at it.  More likely, you&#8217;ll need them in some
sort of log aggregator like Splunk, Loggly, or PaperTrail.  These allow sophisticated searches in
a web interface.</p>

<p>The main advantage of these systems over <code>grep</code> is that you can easily share log results with
others, including nontechnical but technically-minded folks who may be involved in diagnosing a
production error.</p>

<p>Your log aggregator can also be hooked into your second developer output stream, which is
alerting.</p>

<h3>Alerting</h3>

<p>Alerting is a push notification that an event has occurred that requires some action.</p>

<p>If you do not fully comprehend every piece of that sentence, you will have bad alerting, and your
ability to detect and fix production errors will be severely hampered, so let&#8217;s break down each
part of it:</p>

<ul>
<li><em>push notification</em> - you get an email, a popup, an SMS, a page, a siren, whatever.  Something you can&#8217;t ignore that is sent to you.  This isn&#8217;t something you must remember to check.  The form might be related to its severity (e.g. the site being down might page you, but an un-handled exception will email you).</li>
<li><em>an event has occurred</em> - something has happened that shouldn&#8217;t have.  This could be a particular branch of complex logic (e.g. <code>// this should never happen</code>), or it could be the result of an external process checking for system invariants.</li>
<li><em>requires some action</em> - because of this event, you must take action or loss of revenue/increase in cost will occur.  This means that you don&#8217;t alert on non-actionable events.  By all means log them, but do not alert if no action needs to, or can, be taken.</li>
</ul>


<p>For proper alerting, you need three things:</p>

<ul>
<li>A system to manage sending and cataloging alerts</li>
<li>A way in your application code to trigger an alert</li>
<li>A way to trigger alerts from outside your application code</li>
</ul>


<p>An example of an alerting system is Airbrake.  Another example is <code>/bin/mail</code>.  You might need multiple systems. For example, you may use Pager Duty for application alerting, but use PingDom for general website availability alerting.  The fewer the better, but you need all alertable events covered.</p>

<p>Triggering an alert depends on the system you are using, but, at the very least, you need a catch-all exception handler that triggers an alert whenever an exception occurs that your code doesn&#8217;t handle.</p>

<p>Finally, you need an easy way to write monitoring scripts that trigger your alerting system.  This is because you should start writing scripts that assert invariants about your environment, and alert when those invariants are no longer true.</p>

<p>For example, your database might store records of customer purchases.  You might further store, for successful purchases, what the credit card authorization code was.  If you have a successful purchase, but no credit card authorization code, something is wrong.  That should never happen.</p>

<p>You should then write a script that checks all successful purchases for an
authorization code - any purchase that has been in a successful state for more than, say, a few minutes, but that doesn&#8217;t have an authorization code, should trigger an alert.  Someone might be getting something for free.  Loss of revenue.</p>

<p><span class='pullquote-right' data-pullquote='do not ignore alerts '>
One final note: do not ignore alerts.  If you are filtering out or ignoring alerts, you are
not doing your job.  You are ignoring your system telling you that you might be losing revenue.
If you have so many alerts that you are overwhelmed with them, you either have a terrible system, or you are alerting for non-actionable things.  Fix those issues before reaching for your email filters.  Fix them before adding features, because your business is starting to tank.
</span></p>

<p>There is a third output stream, and it&#8217;s related to the aggregation of non-alertable system
events.  For example, a 404 is not an alertable event, however 5,000 over the course of 2 minutes
might be.  You need statistics.</p>

<h3>Application statistics</h3>

<p>Application statistics represent a set of vital signs for your application.  They indicate, at a
high level, what&#8217;s going on.  Such statistics might be the number of 404 response, the number of
broken builds, the number of purchases made, or the number of user logins.  Anything and
everything.</p>

<p>To set up this output stream, you need three things:</p>

<ul>
<li>A system to manage your statistics</li>
<li>A way to send statistics to this system from your application without negatively impacting performance <em>or</em> causing production errors</li>
<li>A way to send statistics from outside your application code</li>
</ul>


<p>A common tool for managing statistics is Graphite.  A common tool for sending them is Statsd.
You could also use specially-formatted log messages and <code>grep</code>.</p>

<p>With these tools, you &#8220;stat&#8221; information inside your application, and write external scripts that
run periodically to stat other things as well.  The more the merrier, because you don&#8217;t know what
you&#8217;re going to need.</p>

<p>Note that this isn&#8217;t like tracking website activity, conversions, or A/B test results.  Those
things are important, but they are not what we&#8217;re talking about.</p>

<p>Once you have some statistics set up, you can then observe your application&#8217;s &#8220;rhythm&#8221; over time.  Hopefully, you&#8217;ll see a &#8220;normal&#8221; usage pattern.  For example, at Stitch Fix, I can see a spike in processing returned merchandise every day when the USPS truck arrives at our warehouse.</p>

<p>Once you have <em>this</em>, you can then <strong>alert</strong> if certain statistics are out of whack.  This is definitely &#8220;Advanced Band&#8221;, but can be really useful.  For example, if you see a drastic drop in purchases, or a spike in CSR tickets - something&#8217;s wrong.</p>

<p>Now that we know how to identify these problems, the next step is how to fix them.  And fix them, we must.</p>

<h2>Fixing production errors</h2>

<p>Production errors must be addressed immediately.  There are two reasons for this:</p>

<ul>
<li>It eliminates any judgement from your remediation procedure - production errors can lead to a loss of revenue or increased costs, so addressing them should be your highest priority.</li>
<li>When fixing production errors interrupts your workflow, you eventually learn to write more fault-tolerant code, so that you have fewer production errors to interrupt you.  We&#8217;ll get to that in the next section.</li>
</ul>


<p>How do we address production errors?  It depends on the error, but I have a few rules of thumb:</p>

<ul>
<li>If the error is continuously happening, drop what you are doing and fix it.  The most common
example is rolling out a new version of the app to production, and things start breaking.
Rollback and stop the bleeding.</li>
<li>If the error is a &#8220;one off&#8221; and has a clear remediation procedure (e.g. re-trying a background
job that failed due to intermittent issues), perform the procedure immediately.</li>
<li>If the error is transient but has no obvious remediation procedure, you&#8217;ll have to investigate:

<ul>
<li>Is the state of the system now invalid, e.g. bad data in the database?</li>
<li>What was the user&#8217;s experience?  Is there some intent that we can capture and manually address? (for example, a customer makes a purchase, but the system fails - we could re-make that purchase on their behalf to ensure capturing the revenue)</li>
<li>Can the code that broke be enhanced to avoid this problem?  If so, do it.</li>
</ul>
</li>
</ul>


<p><span class='pullquote-right' data-pullquote='Do not stop until the problem is fixed '>
Your results might be different, but understand the theme here: restore service and then put the system back into a valid state.  <strong>Do not stop until the problem is fixed or you&#8217;ve handed it off to someone who will follow this rule</strong>.  Sometimes, it takes a while to recover from a production error.  When you need a break, hand it off, but do not stop.
</span></p>

<p>We had a problem once at LivingSocial where thousands of attempted purchases failed due
to issues with our promo code back-end service.  The users were all left with the impression they&#8217;d made a successful purchase discounted by the promo code they provided.  Because of proper logging and alerting, we saw the problem, fixed the systems so it would stop happening, and then re-created all the customer purchases behind the scenes without them ever knowing it.  We protected the revenue.</p>

<p>Reacting to buggy software is no fun.  The second reason we fix production errors immediately is to motivate us to write more fault tolerant software.  We want to avoid production errors entirely.</p>

<h2>Avoiding production errors</h2>

<p>Networks are flaky.  Third-party APIs have bugs of their own.  These cause production errors, and
you <em>can</em> manually fix them.  But, flakiness and intermittent failures can be normal.  It&#8217;s
entirely possible that your shipping vendor&#8217;s API will never behave properly, and will always be
slow or non-responsive.  This means that your code is not handling normal, expected behavior.</p>

<p>Your alerting and history around production errors should be your guide to where to start
enhancing the fault-tolerance of your software.  Root-cause analysis will usually lead you to
where you want to start.</p>

<p>Let&#8217;s take an example.  Suppose you have a background job that charges customers a monthly fee for your service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MonthlyFeeChargingJob</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">customer</span> <span class="o">=</span> <span class="no">Customer</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">charge_amount</span> <span class="o">=</span> <span class="no">MonthlyCharge</span><span class="o">.</span><span class="n">for_customer</span><span class="p">(</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="no">ThirdPartyCreditCardGateway</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">customer_id</span><span class="p">,</span><span class="n">charge_amount</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">declined?</span>
</span><span class='line'>      <span class="no">ChargeFailedMailer</span><span class="o">.</span><span class="n">mail</span><span class="p">(</span><span class="n">customer_id</span><span class="p">,</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We handle the two expected cases: a successful charge, and a decline.  Suppose, though,
that every once in a while we get a &#8220;connection refused&#8221; exception from the call to <code>ThirdPartyCreditCardGateway.charge</code>.  This is a production error.</p>

<p>We fix it by re-trying the job, since the network is likely working and, in that case, the job succeeds (remember that the <em>job</em> succeeds when it completes execution, regardless of the result of charging the customer).  This happens enough that we no longer want to fix it manually.  How can we make this code more fault-tolerant?</p>

<p>Occasional network blips happen, and usually go away quickly, so we can simply automate the
manual retry procedure.</p>

<p>First, our job will take an optional argument to indicate how many retries there have been.  This
allows us to break out of the retry loop in the event of a serious and lengthly network outage.
Next, we catch the particular error and perform the retry (making sure to log what is going on in
case we need to investigate).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MonthlyFeeChargingJob</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">customer_id</span><span class="p">,</span><span class="n">num_attempts</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">customer</span> <span class="o">=</span> <span class="no">Customer</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">charge_amount</span> <span class="o">=</span> <span class="no">MonthlyCharge</span><span class="o">.</span><span class="n">for_customer</span><span class="p">(</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="no">ThirdPartyCreditCardGateway</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">customer_id</span><span class="p">,</span><span class="n">charge_amount</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">declined?</span>
</span><span class='line'>        <span class="no">ChargeFailedMailer</span><span class="o">.</span><span class="n">mail</span><span class="p">(</span><span class="n">customer_id</span><span class="p">,</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">NetworkError</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>      <span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Got </span><span class="si">#{</span><span class="n">ex</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2"> charging </span><span class="si">#{</span><span class="n">customer_id</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">charge_amount</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">num_attempts</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span><span class='line'>        <span class="n">perform</span><span class="p">(</span><span class="n">customer_id</span><span class="p">,</span><span class="n">num_attempts</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">raise</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we are only rescuing one type of error from the one line of code that&#8217;s causing the
problem.  This prevents us from applying the wrong fix to other errors that might happen (for
example, if we caught all exceptions, and the <code>ChargeFailedMailer</code> raised one, we could
potentially charge the customer a second time by retrying this job.  Not good).</p>

<p>I&#8217;ll leave it as an exercise to the reader as to what happens here (and how to fix it) if we get a timeout, instead of an outright refusal (hint: loss of revenue due to potential lawsuits).</p>

<p>The key to fault-tolerant code is to take a step back from your code and re-cast the concept of success.  Many devs conflate non-happy-path code with actual errors.  Any time you see an API that uses exceptions for control flow, you can be sure the developer of that API doesn&#8217;t understand the difference.</p>

<p><span class='pullquote-right' data-pullquote='Your job is to figure out how likely it is to go off, and how much damage it will do if it does. '>
A &#8220;negative case&#8221; in business logic is normal - it is a success when it happens.  Failure is the
code&#8217;s inability to complete execution.  This should be your mindset when creating fault-tolerant code.  Every line of code is a ticking time-bomb.  Your job is to figure out how likely it is to go off, and how much damage it will do if it does.
</span></p>

<p>Consider a bit of code to read the current user&#8217;s name out of the database in order to display it
in the upper-right corner when they&#8217;re logged in.  A network outage could prevent this database
query from succeeding.  In most normal configurations, this is highly unlikely.  The consequence
of this failure is also minimal - we are unlikely to lose revenue if we can&#8217;t include the user&#8217;s
name on the screen for a small period of time.  So don&#8217;t worry about it.</p>

<p>Now, suppose that a user has registered for our website, and we store their email address before
sending them an email.  Sending the email could fail, though it&#8217;s unlikely.  The consequences,
however, are far more dire.  The user not only won&#8217;t get their welcome email, but we&#8217;ll have
their email recorded in the database, preventing them from fixing the issue themselves by signing
up again.  In this case, I&#8217;d be proactive in my code.</p>

<p><span class='pullquote-right' data-pullquote='Fault-tolerant code is ugly.  It requires conditionals.  '>
Fault-tolerant code is ugly.  It requires conditionals. It won&#8217;t look like code in programming books, screencasts, or blog entries.  This is the way it has to be, I&#8217;m sorry.
</span></p>

<p>If you can&#8217;t outright prevent a production error, you can often find a way to turn it into a
production error that&#8217;s easier to resolve.  For example, consider this Rails code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update_prefs</span><span class="p">(</span><span class="n">email</span><span class="p">,</span><span class="n">best_time</span><span class="p">)</span>
</span><span class='line'>  <span class="n">customer</span><span class="o">.</span><span class="n">email_preferences</span>   <span class="o">=</span> <span class="n">email</span>
</span><span class='line'>  <span class="n">cutomer</span><span class="o">.</span><span class="n">best_time_to_contact</span> <span class="o">=</span> <span class="n">best_time</span>
</span><span class='line'>  <span class="n">customer</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If <code>save!</code> blows up, we have a production error, and not much to go on.  It will likely be the
error message straight from the database, which won&#8217;t be useful.  If the success of this code is crucial, we can
make its failure easier to deal with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update_prefs</span><span class="p">(</span><span class="n">email</span><span class="p">,</span><span class="n">best_time</span><span class="p">)</span>
</span><span class='line'>  <span class="n">customer</span><span class="o">.</span><span class="n">email_preferences</span>   <span class="o">=</span> <span class="n">email</span>
</span><span class='line'>  <span class="n">cutomer</span><span class="o">.</span><span class="n">best_time_to_contact</span> <span class="o">=</span> <span class="n">best_time</span>
</span><span class='line'>  <span class="n">customer</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;Saving customer </span><span class="si">#{</span><span class="n">customer</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&#39;s preferences &quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot;to </span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">best_time</span><span class="si">}</span><span class="s2"> failed: </span><span class="si">#{</span><span class="n">ex</span><span class="o">.</span><span class="n">message</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if something goes wrong, we can recreate the effects of this code manually.  We know which customer was affected, and what the system was trying to do when the failure occurred.</p>

<p>Here&#8217;s a few rules of thumb that help me know when to take extra care:</p>

<ul>
<li>Network connections to third-parties should be assumed flaky - code with this in mind.</li>
<li>Responses from third-parties should be assumed to be garbled, unparseable, or invalid 10% of the time - log exactly what you get and exactly what you sent so you can help them improve their service, and improve your code as well.</li>
<li>Never ignore return values or status codes - log things if you don&#8217;t know how to handle them, raise explicit errors if you <em>really</em> don&#8217;t know how to handle them.</li>
<li>Returning a boolean for &#8220;success&#8221; is almost always wrong</li>
<li>When you log a warning or an error, it should include the context of what was being attempted, an explanation of what went wrong, and steps for remediation.  I don&#8217;t care if it wraps in your editor.</li>
</ul>


<h3>Don&#8217;t overdo it</h3>

<p>Fault-tolerant code is about <em>balance</em>.  Don&#8217;t go crazy with abstractions, DSLs, frameworks, or otherwise over-the-top paranoia.  Think.  Observe.  Know your system, and strike a balanced approach.  A week of developer time to avoid a production error that happens every other day might not be worth it.  Your time fixing this stuff is an increased cost, too.</p>

<h2>Not my job</h2>

<p>Many organizations set up a wall between operations and development.  Developers are typists who
put code into black rectangular windows and use a version control system.  Operations are people
who scratch their head at bizarre logs and end up ignoring entire classes of errors that they
don&#8217;t know how to handle.</p>

<p>The fact is, it&#8217;s nearly impossible to maintain an application in production that you didn&#8217;t have
a hand in writing.  The author of the code is the <em>best</em> person to understand how it&#8217;s working,
how to improve it, and how to support it.</p>

<p>The best use of an operations team is to have them maintaining the environment in which your
application runs, and to assist you with setting up the tools <em>you</em> need to maintain your
production system.  I guarantee they&#8217;d love to help you with this rather than sort through your
terrible log files.</p>

<h2>Conclusion</h2>

<p>I know this was a long one, but the bottom line is that you need to take an <em>active</em>  interest in
how your application behaves in production.  Not only will you learn a ton about programming that
you can&#8217;t learn any other way, but you will be aligned with the goals of your employers and be
seen as a valuable member of the team instead of a typist.</p>

<p>If you want to read more about this, by someone who is more an expert than me, you should purchase and read <a href="http://pragprog.com/book/mnee/release-it">Release It!</a>, by Michael Nygard.  It&#8217;s well-written and practice.</p>

<p><em>If you enjoyed this post, I&#8217;ve written <a href="http://www.theseniorsoftwareengineer.com">an entire book</a> about being a production-oriented developer called &#8220;The Senior
Software Engineer&#8221;.  Pick up a copy - it&#8217;s only $25</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Source Code Typography]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/05/17/source-code-typography.html"/>
    <updated>2013-05-17T08:53:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/05/17/source-code-typography</id>
    <content type="html"><![CDATA[<p>What&#8217;s the one thing we, as developers, do with source code more than anything else?  We <em>read</em> it.  Sure, we change it, and even occasionally we write new source code, but, by and large, we <em>read</em> source code.  We read it to know how to use it.  We read it to know where to change it.  We read it to understand what it does.</p>

<p>But, it&#8217;s not just the content - the code itself - that affects readability.  How it&#8217;s presented matters and if we&#8217;re going to talk about presentation, we have to talk about typography.</p>

<!-- more -->


<p>One could argue that, all things being equal, source code should be written in a way optimized for reading.  Sure, occasional performance concerns require putting readability in the backseat, but this is rare.  Source code should be written to be understood by people.</p>

<p>This isn&#8217;t a radical concept, and it&#8217;s why we have structured programming, why we use descriptive variable names, and why we have conventions about where the files containing source code live. If a codebase is like a book, we&#8217;re all agreed how to title the chapters, where the table of contents should go, and what the index looks like.</p>

<p>But there&#8217;s also how the code is presented to us - the code&#8217;s <em>typography</em>.  Typography is, according to Wikipedia, &#8220;the art and technique of arranging type in order to make language visible.&#8221;  <em>Type</em> of course, is the presented text, so typography, then, answers the question &#8220;what does each letter look like, and where does it go?&#8221;</p>

<p>We use typography all the time in our code.  We indent it whenever a new scope is created.  We limit our line lengths to a certain number of characters.  We color-code bits of code according to their purpose, aka syntax highlighting.  Some of us even align other parts of our code, such repeated inline comments, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">shape</span><span class="o">.</span><span class="na">positionLeft</span><span class="o">();</span> <span class="c1">// Our display is left-oriented</span>
</span><span class='line'><span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">shape</span><span class="o">.</span><span class="na">positionTop</span><span class="o">();</span>   <span class="c1">// We start drawing pixels from the top</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sort of &#8220;code formatting&#8221; isn&#8217;t about correctness, it&#8217;s about aesthetics, all in aid of making the code easier to read.  Typography doesn&#8217;t address what <em>should</em> be written but rather how it should be presented to make what <em>was</em> written as readable as possible.</p>

<p>A designer friend recommended <a href="http://www.amazon.com/Elements-Typographic-Style-Robert-Bringhurst/dp/0881791326">&#8220;The Elements of Typographic Style&#8221;</a>, by Robert Bringhurst.  This is &#8220;The Art of Computer Programming&#8221; for typography.  Very early in the book, Bringhurst has this to say:</p>

<blockquote><p>Well-chosen words deserve well-chosen letters; these in turn deserve to be
set with affection, intelligence, knowledge and skill.  Typography is a link,
and as it ought, as a matter of honor, courtesy and pure delight, to be as
strong as others in the chain.</p></blockquote>

<p>This is a passion for &#8220;fonts and stuff&#8221; that I never knew existed.  But, he&#8217;s right.  A well-typeset book is a leisurely stroll on a spring day, while a poorly set document is an encumbered march through a muddy field on a rainy day.</p>

<p>If you are at all interested in typography, typesetting, or fonts, I highly recommend the book.  It&#8217;s easily read, well-written, and - of course - beautifully typeset.</p>

<p>In the book, he talks about font choices, line heights, kerning, alignment, grids, tables, and anything else you could possibly imagine needing to make a design decision about when putting words onto a page.  But, it&#8217;s all about prose.  Can we apply any of these lessons to source code?</p>

<p>We&#8217;ve already established that programmers generally get value out of typography, via indentation and whitespace.  Many of us have a favorite fixed-width font for editing, and we can all argue about what the proper length of a line of code should be.</p>

<p>Some languages, like CoffeeScript and Python, require adherence to certain typographic principles - you must indent new blocks of scope.  The Go language comes bundled with its own typesetting program: <code>gofmt</code>.  Thus, all Go programs adhere to a strict set of typographic principles.  There&#8217;s a certain logic to this.</p>

<p>Is indenting and color-coding our source enough?  Can we make our code even more readable by heavier use of typography?</p>

<p>Let&#8217;s find out.</p>

<p>We&#8217;ll start with C, one of the oldest &#8220;high-level&#8221; languages.  Here is the source code for the <code>strcpy</code> function from the BSD kernel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span>
</span><span class='line'><span class="n">strcpy</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">from</span><span class="p">)</span>
</span><span class='line'>        <span class="k">register</span> <span class="kt">char</span> <span class="o">*</span><span class="n">to</span><span class="p">;</span>
</span><span class='line'>        <span class="k">register</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">from</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="o">*</span><span class="n">save</span> <span class="o">=</span> <span class="n">to</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(;</span> <span class="p">(</span><span class="o">*</span><span class="n">to</span> <span class="o">=</span> <span class="o">*</span><span class="n">from</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">++</span><span class="n">from</span><span class="p">,</span> <span class="o">++</span><span class="n">to</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">(</span><span class="n">save</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s a short routine that packs a lot of functionality.  It&#8217;s set according to the BSD guidelines, with an 8-character indent (likely a tab).  Other than that, there&#8217;s not much going on typographically.  Does this make it hard to read?  Can we make it easier to read without changing the code?</p>

<p>Let&#8217;s start with the function declaration.  I like how the return type (line 1) is on a different line than the function and argument names (line 2), as it breaks up the signature into different chunks.  The argument declarations themselves (lines 3 and 4), which each appear on their own line after the function name, could be better set, in my opinion.</p>

<p>A C argument declaration is made up of modifiers (<code>register</code>, <code>const</code>), a data type (<code>char *</code>), and a name (<code>from</code>).  In this case, the elements of each declaration are vertically aligned, but in an odd way (likely their alignment is merely by happenstance - both arguments are declared <code>register</code>).  The <code>char</code> for the argument <code>to</code> aligns with the <code>const</code> of the argument <code>from</code>.  <code>const</code> is a modifier, and <code>char</code> is a data type.  Things that are different are aligned with each other, which implies a sameness that doesn&#8217;t exist.</p>

<p>Let&#8217;s re-set the argument list, aligning like with like, forming a table structure, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span>
</span><span class='line'><span class="n">strcpy</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">from</span><span class="p">)</span>
</span><span class='line'>        <span class="k">register</span>       <span class="kt">char</span><span class="o">*</span> <span class="n">to</span><span class="p">;</span>
</span><span class='line'>        <span class="k">register</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">from</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the arguments block forms a table of three columns.  The modifiers make up the first column, the data types are aligned in the second column, and the names are in the third column (also notice how the syntax highlighting reinforces the new table structure).  We&#8217;ve also re-set the data type such that there is no space between <code>char</code> and <code>*</code> - the data type of both of these variables is &#8220;pointer to char&#8221;, so it makes more sense to put the space before the argument name, not in the middle the data type&#8217;s name (<strong>update</strong>: it should be pointed out that this only makes sense for a single declaration.  A construct like <code>char* a, b</code> will create a pointer to <code>char</code>, <code>a</code>, and a regular <code>char</code>, <code>b</code>).</p>

<p>Let&#8217;s move onto the <code>for</code> loop.  I&#8217;ve always found the <code>for</code> loop in C to be an odd construct, and it squeezes quite a bit of functionality into a small space.  It has two parts: the loop declaration and the loop body.  The declaration itself has three sub-parts: an initializing section, a test to see if the loop should continue, and code to run each time through the loop (the body is also executed each time through the loop, which is one reason I find this construct strage).</p>

<p>This particular <code>for</code> loop is tricky, because there is no initializing code in the declaration, nor is there a loop body.  To make this loop easier to read, we could rewrite it, but typography isn&#8217;t about changing the words, it&#8217;s about honoring them and making them easier to understand.  Can we re-set this code without changing it, but make it more readable?</p>

<p>One thing that would be handy is to make it more clear that there is <em>intentionally</em> no initializing code nor loop body.  We&#8217;d also like to make it simpler to see each part of the <code>for</code> loop for what it is.  Let&#8217;s add some whitespace and vertical alignment to see if we can improve it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span> <span class="p">(</span>
</span><span class='line'>                          <span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">to</span> <span class="o">=</span> <span class="o">*</span><span class="n">from</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="o">++</span><span class="n">from</span><span class="p">,</span> <span class="o">++</span><span class="n">to</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By vertically aligning the semi-colons, the missing initializer jumps right out at you.  The whitespace created by the semicolons now looks intentional - that space couldn&#8217;t be there by accident.  We&#8217;ve done the same with the loop body, although we took care <em>not</em> to vertically align that semi-colon, thus creating a visual distinction between the two parts of the <code>for</code> loop.</p>

<p>With regard to the intentionally missing elements, developers might reveal this intent via a comment, like <code>/* no-op */</code>.  What I find interesting is that we can do this with mere typography.  The reader feels the intention without being directly told.</p>

<p>Let&#8217;s look at another example, this time using a much more recent programming language: Ruby.  Ruby takes its syntactic cues from Smalltalk and relies much less on analphabetic characters like braces and parens.  It also supports a powerful literal syntax for arrays and hash tables.  You can&#8217;t read too much Ruby code before coming across a <code>Hash</code> literal.</p>

<p>Let&#8217;s look at the routine from Ruby on Rails for creating a text field tag in HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">text_field_tag</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">tag</span> <span class="ss">:input</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">sanitize_to_id</span><span class="p">(</span><span class="nb">name</span><span class="p">),</span> <span class="ss">:value</span> <span class="o">=&gt;</span> <span class="n">value</span> <span class="p">}</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">stringify_keys</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow, that is way off the page (or wrapping horribly, depending on how you&#8217;re reading this).</p>

<p>An important role that typography plays is to establish a &#8220;rhythm&#8221; to the typeset prose.  In a book, this means making decisions about font size, margins, line lengths, and so on.    The idea is to set each line long enough to let the reader take it in, but not so long that the reader becomes exhausted or loses their place.  This code has no rhythm and is exhausting to read.</p>

<p>Compounding the problem of overall length is that the information here is at varying levels of abstraction.  We have a method call to <code>tag</code>, some symbols, a <code>Hash</code>, and more method calls at the end.  By the time you get to the end of this line, it&#8217;s hard to remember what it&#8217;s even supposed to be doing.  We need to break this up with some sort of rhythm that will allow us to process it in chunks.</p>

<p>In English, we would establish this rhythm by analyzing the length of words and sentences. In source code, we have tokens and expressions. This Ruby method has 29 tokens, all on one line.  That line has several expressions as well, and both of these facts are what&#8217;s making this line so hard to read.</p>

<p>Let&#8217;s re-set this code to keep the tokens-per-line low but avoid splitting expressions across lines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">text_field_tag</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">tag</span> <span class="ss">:input</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="ss">:type</span>  <span class="o">=&gt;</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:name</span>  <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:id</span>    <span class="o">=&gt;</span> <span class="n">sanitize_to_id</span><span class="p">(</span><span class="nb">name</span><span class="p">),</span>
</span><span class='line'>        <span class="ss">:value</span> <span class="o">=&gt;</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">stringify_keys</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each line now has only one or two expressions, and many fewer tokens.  We&#8217;ve also used indentation and whitespace to delineate each part of this code.</p>

<p>Both arguments to <code>tag</code> are left-aligned at the seventh column - similar things have similar alignment.  The biggest change, however, is in the <code>Hash</code> literal.</p>

<p>First, we&#8217;ve offset its contents by whitespace, primarily to distinguish it from the call to the <code>update</code> method.  Without a blank line after the final value in the <code>Hash</code>, there&#8217;s an unfortunate vertical alignment between the hash key <code>:value</code> and the method call to <code>update</code>.  We want to make it clear that these are distinct, and want to keep the reader from getting confused.</p>

<p>The <code>Hash</code> contents themselves have been re-formatted to form a visual table.  We&#8217;ve used the &#8220;hashrockets&#8221; as a dividing line between key and value, which results in both being vertically left-aligned.</p>

<p>The code now has more of a rhythm to it, and can be read more easily, with line breaks inserted to give the reader a rest at the appropriate times.</p>

<p>Before we finish, I&#8217;d like to examine a typographical convention I&#8217;ve seen in JavaScript code, and discuss why I believe it actually impairs readability, failing to honor the content and thus fail to help the reader.</p>

<p>The convention was born out of a common idiom in in JavaScript where variables are declared in a comma-delimited list after a single <code>var</code>, with the list terminated by a semicolon. The typographical convention I&#8217;m referring to is in how this list is formatted, namely, it&#8217;s formatted with leading commas, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">left</span><span class="p">()</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">right</span><span class="p">()</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">numSides</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">sides</span><span class="p">()</span>
</span><span class='line'>  <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is typeset poorly, insomuch as it does not honor the readability of the content, instead hindering it.</p>

<p>The most important part of a variable declaration is the name of the variable (the second being its default value).  Putting a comma first creates at typographic roadblock between the reader and the information they need (the variable name).  That a comma is required between variable declarations is one of the least important pieces of information in this code, yet it&#8217;s front and center.  This is bad typography.</p>

<p>The more conventional approach is much better, as the language&#8217;s peculiarities simply fade away:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">left</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">y</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">right</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">numSides</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">sides</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each line can now be easily read from left to right.  The <code>var</code> establishes this block as a &#8220;paragraph&#8221;, and each declaration is a sentence. Each line is eminently readable - it starts with the name of the variable, which is what the reader is most interested in, and is followed by the default value.  The names are left-aligned and are the first thing on each line (save for the initial <code>var</code> which establishes that these are variables).  The commas, being incidental, are hidden nicely at the end of the line.</p>

<p>We can reinforce this structure with vertical alignment of the <code>=</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span>        <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">left</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">y</span>        <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">right</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">numSides</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">sides</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could go even further and align the commas and semi-colon, however this draws attention to aspects of the code that aren&#8217;t important (much as the comma-first style does).  Although JavaScript needs to know when each declaration ends, we, the human reader, already know - the line merely ends.  The declaration block itself ends with whitespace - that JavaScript requires a semicolon is incidental to reading this code.</p>

<p>This is why the &#8220;comma-first&#8221; typesetting is so distracting.  It puts the comma - something unimportant to reading the code - right up front, forcing the reader to slog through it to get to the real meat of the declaration.</p>

<p>I could go on about many more idiomatic typesetting in various languages, but I thought it would be a fun exercise to make an argument against this style, based purely on tyopgraphical concerns, and see if it sticks.</p>

<p>Thinking about code typography has made more more bold in my code formatting choices, but there is a practical cost to this: source control diffs.</p>

<p>Unlike a printed book, code changes frequently.  When we use heavier typography, we end up having to re-set the code around a particular change, and this creates non-functional changes to source code, making the overall changeset larger than it needs to be.  I suppose we&#8217;d have to start applying typographic principles to our diffs as well :)</p>

<p>Despite these problems, I still think it&#8217;s worth taking a fresh look at code typography - anything that helps us read and understand code better has to be a good thing.  At the very least, having a clear understanding of why code is set in a certain way can help us better understand the purpose of the code, and the trade-offs we make between reading, modifying, and writing it.</p>

<hr />

<p>Special thanks to <a href="https://twitter.com/mrmrs_">@mrmrs_</a> for the book recommendation and to <a href="https://twitter.com/jxnblk">@jxblk</a> for
reviewing this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting OmniAuth with Google Apps to Work on Heroku]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/04/29/getting-omniauth-with-google-apps-to-work-on-heroku.html"/>
    <updated>2013-04-29T11:01:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/04/29/getting-omniauth-with-google-apps-to-work-on-heroku</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.stitchfix.com">Stitch Fix</a>, we outsource pretty much <em>all</em> of our hosting and technical needs to Heroku or their add-ons.  Given
where we are now as a company, it makes total sense: we don&#8217;t need to hire an admin, we don&#8217;t need to adminster actual boxes, and
we can easily add/remove/change our technical infrastructure.  If you are a small startup and you are messing with Linode slices,
   you are probably wasting time.</p>

<p>One thing Heroku doesn&#8217;t provide out of the box is a login system for &#8220;internal&#8221; users.  The vast majority of the software at
Stitch Fix is targeted at Stitch Fix employees - to operate the warehouse, choose what goes into a fix, etc.  The natural way to
allow them to login is via Google Apps.  We can use everyone&#8217;s existing username/password, and employees can be added during
onboarding and removed when they leave the company, all in one place.</p>

<p>Getting it to work with our Rails apps <em>seemed</em> easy enough with <a href="http://github.com/intridea/omniauth">OmniAuth</a>, but it turned out to be a lot trickier, resulting in
random failures with the oh-so-helpful error &#8220;invalid_credentials&#8221;.  Here&#8217;s how to fix that, and why you can&#8217;t just use the
out-of-box configurations recommend by OmniAuth.</p>

<!-- more -->


<p><em>tl;dr scroll down</em></p>

<p>This is not a dig at OmniAuth - it&#8217;s super awesome.  It&#8217;s just that it bakes in a lot of assumptions that may not hold if you are using Heroku or are follow the <a href="http://www.12factor.net">12-factor</a> app architecture.   You end up needing to know a bit more about how things are working, and you have to stop trusting default configurations.</p>

<p>First, the general setup of OmniAuth recommends this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">:google_apps</span><span class="p">,</span> <span class="n">domain</span><span class="p">:</span> <span class="s1">&#39;your-domain.com&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We use the <a href="https://github.com/sishen/omniauth-google-apps">omniauth-google-apps</a> gem, which is a very thin extension of <a href="https://github.com/intridea/omniauth-openid">omniauth-openid</a> that makes setup a bit simpler, and
allows us to only allow Stitch Fix employees access to our systems.</p>

<p>This setup has issues with SSL certificates, so we need to tell OpenID where the CA file is, and we just use curl&#8217;s, checked-into
our source code because of Wacky Heroku Thing #1 - no guarantees about what&#8217;s on the Dynos.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;openid/fetchers&#39;</span>
</span><span class='line'><span class="no">OpenID</span><span class="o">.</span><span class="n">fetcher</span><span class="o">.</span><span class="n">ca_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span><span class="s1">&#39;config&#39;</span><span class="p">,</span><span class="s1">&#39;curl.pem&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">:google_apps</span><span class="p">,</span> <span class="n">domain</span><span class="p">:</span> <span class="s1">&#39;your-domain.com&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can&#8217;t just assume that <code>curl</code> is even installed, much less make any assumptions about where the <code>pem</code> file is, so we have to
include it.  Another option would be to provide an environment variable based on where we know it is on the Dyno, but this seemed
simpler.</p>

<p>Now, the problem with this setup vis-a-vis Heroku is that there&#8217;s a configuration option being set that is not apparent, because
OmniAuth/OpenID is using what it believes to be a sensible default, but is, in fact, not correct.</p>

<p>OpenID requires the ability to store information server-side so that, after you are redirected back from the auth provider
(Google, in our case), the server can find this information and complete the login.  <em>How</em> this information is stored can be
configured via the <code>:store</code> option to <code>provider</code>.  The default is an in-memory store, so it&#8217;s equivalent to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">provider</span> <span class="ss">:google_apps</span><span class="p">,</span> <span class="n">domain</span><span class="p">:</span> <span class="s1">&#39;your-domain.com&#39;</span><span class="p">,</span> <span class="n">store</span><span class="p">:</span> <span class="no">OpenID</span><span class="o">::</span><span class="no">Store</span><span class="o">::</span><span class="no">Memory</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>For development, this seems reasonable - it doesn&#8217;t require any setup - but for deployment, it&#8217;s Just Wrong, which we can tell by
reading the RubyDoc of the <code>OpenID::Store::Memory</code> class from <code>ruby-openid</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># An in-memory implementation of Store.  This class is mainly used</span>
</span><span class='line'><span class="c1"># for testing, though it may be useful for long-running single</span>
</span><span class='line'><span class="c1"># process apps.  Note that this store is NOT thread-safe.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># You should probably be looking at OpenID::Store::Filesystem</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll get to <code>OpenID::Store::Filesystem</code>, but what&#8217;s wrong with the memory store?</p>

<p>Let&#8217;s assume Unicorn as the server (as
recommended for the Cedar stack for Rails apps).  The recommended configuration allows three unicorn processes per Dyno, which
gives use three processes, each with it&#8217;s own separate memory space.</p>

<p>Because unicorn uses <em>process-based</em> concurrency, which means that, when a new process is started, it gets a <em>copy</em> of the parent&#8217;s
memory, all three unicorns on a single Dyno <em>do not</em> share memory. Meaning if process 1 started the OpenID dance, but, after
redirect, your request was handled by process 2, it doesn&#8217;t have the necessary information stored in memory.  Boom!
invalid_credentails error.</p>

<p>So, what about that filesystem-based one?
OmniAuth&#8217;s docs <em>do</em> mention <code>OpenID::Store::Filesystem</code>, but it&#8217;s still wrong on Heroku.  Why?</p>

<p>Here&#8217;s how we&#8217;d set up the filesystem-based store:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">provider</span> <span class="ss">:google_apps</span><span class="p">,</span>
</span><span class='line'>         <span class="n">domain</span><span class="p">:</span> <span class="s1">&#39;your-domain.com&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">store</span><span class="p">:</span> <span class="no">OpenID</span><span class="o">::</span><span class="no">Store</span><span class="o">::</span><span class="no">Filesystem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span><span class="s1">&#39;tmp&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can&#8217;t even be guaranteed of <code>/tmp</code> existing, so we set up the store inside our Rails app.  This configuration works great in
development, because I&#8217;m running my server on one machine - all three Unicorn processes share the same data store.</p>

<p>If we deployed to Heroku using just one Dyno, this would work.  However, the second we scale up our app to use more Dynos, the
entire thing falls apart.  Why?</p>

<p>Two reasons:</p>

<ul>
<li>filesystem is ephemeral - it could go away at any moment.  Between redirects it&#8217;s possible (however unlikely) that the files go
away.</li>
<li>Dynos don&#8217;t share filesystems.  Even if we <em>could</em> guarantee the filesystem would live forever, you still run the risk that
your OpenID dance will be handled by two different Dynos, and thus: invalid_credentials.</li>
</ul>


<p>This is especially nasty because you might run your app for quite a while on one Dyno, thinking things are working when, instead,
you&#8217;re sitting on a ticking timebomb.</p>

<p>What we need as a centralized place to store this information, accessible to all Dynos and that persists across reboots.  This brings us to the third option included with <code>ruby-openid</code>, which is <code>OpenID::Store::Memcache</code>.</p>

<p>Of course, we can&#8217;t just plop <code>store: OpenID::Store::Memcache.new</code> into our configuration.  We first need to add memcache to our app, and then extract the needed connection parameters from the environment.  We also need to provide a memcache client object.</p>

<p>On Heroku, they recommend Dalli - strongly - so I went with that.  The interface that <code>OpenID::Store::Memcache</code> expects from the
memcache client is supported by Dalli, so we&#8217;re off to the races:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">heroku</span> <span class="n">addons</span><span class="ss">:add</span> <span class="n">memcache</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Add to your Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;dalli&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Add to config/initializers/omniauth.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;openid/fetchers&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;openid/store/filesystem&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;openid/store/memcache&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;dalli&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">OpenID</span><span class="o">.</span><span class="n">fetcher</span><span class="o">.</span><span class="n">ca_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span><span class="s1">&#39;config&#39;</span><span class="p">,</span><span class="s1">&#39;curl.pem&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">staging?</span> <span class="o">||</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span> <span class="o">||</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;OPENID_STORE&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;memcache&#39;</span>
</span><span class='line'>    <span class="c1"># Locally, these env vars will be blank, and it will connect to the local memcached</span>
</span><span class='line'>    <span class="c1"># client running on the standard port</span>
</span><span class='line'>    <span class="n">memcached_client</span> <span class="o">=</span> <span class="no">Dalli</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MEMCACHE_SERVERS&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                         <span class="ss">:username</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MEMCACHE_USERNAME&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                         <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MEMCACHE_PASSWORD&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">provider</span> <span class="ss">:google_apps</span><span class="p">,</span> <span class="n">domain</span><span class="p">:</span> <span class="s1">&#39;your-domain.com&#39;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">store</span><span class="p">:</span> <span class="no">OpenID</span><span class="o">::</span><span class="no">Store</span><span class="o">::</span><span class="no">Memcache</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">memcached_client</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">provider</span> <span class="ss">:google_apps</span><span class="p">,</span> <span class="n">domain</span><span class="p">:</span> <span class="s1">&#39;your-domain.com&#39;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">store</span><span class="p">:</span> <span class="no">OpenID</span><span class="o">::</span><span class="no">Store</span><span class="o">::</span><span class="no">Filesystem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span><span class="s1">&#39;tmp&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whew!  This setup doesn&#8217;t require memcache for development, but allows it as an option by setting the <code>OPENID_STORE</code> environment
variable.  Although the Dalli client claims to use the environment variables automatically, the code doesn&#8217;t indicate this to be
true when there is a username and password, and I&#8217;m kindof prefering some explicit configuration after all this.</p>

<p>Now, no more &#8220;invalid_credentials&#8221; error!</p>

<p>The way Heroku makes us design our apps is a good thing, but it&#8217;s easy to forget it because many &#8220;beginner&#8221; scenarios seem to
work even if we&#8217;ve configured things incorrectly.  Anything this crucial to your application is worth your while understanding at a detail level how it works - at least orient yourself around the default configuration.  And deploy to two Dynos as quickly as you can.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; How to switch to Vim]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/04/24/how-to-switch-to-vim.html"/>
    <updated>2013-04-24T09:38:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/04/24/how-to-switch-to-vim</id>
    <content type="html"><![CDATA[<p>From time to time, I see people in my twitter stream attempting to switch to Vim.  This is a
good thing.  The problem is that they appear to be viewing the switch as swapping out one
tool for another.</p>

<p>This is not what switching to Vim means, nor is it a good reason to switch.</p>

<p>The reason to switch to Vim is to <em>work better</em>.  I realize &#8220;better&#8221; is subjective, but
whatever way <em>you</em> define it is what it means - code faster, edit text more easily, automate
your workflow, whatever.</p>

<p>As such, switching to Vim is to <em>throw out</em> your old editor (or plan to) and replace it with
a <em>different tool</em> that works differently and is, hopefully, better.  Stop asking for &#8220;a
plugin that does XXX like Sublime Text does things&#8221;.  If Sublime Text has a plugin for what
you want, you don&#8217;t need Vim.  Vim might very well have a plugin that does whatever XXX is,
but it&#8217;s more likely that you don&#8217;t need a plugin, or that Vim provides a way to
accomplish your <em>real</em> goal much more efficiently.</p>

<p>Here&#8217;s how to make the move.</p>

<!-- more -->


<p>First, you aren&#8217;t going to learn much Vim from this.  There are tons of great tutorials about
how to actually <em>use</em> Vim.  You will, of course, need those to switch to Vim, but you&#8217;ll also need
a bit of a plan.  This is that plan.</p>

<ol>
<li>Run stock at first.</li>
<li>Ease into it.</li>
<li>Learn to install and remove extensions.</li>
<li>Add configuration and extensions only when needed.</li>
</ol>


<h2>Run stock at first</h2>

<p>Don&#8217;t install Janus.  Don&#8217;t install someone&#8217;s dotfiles.  Don&#8217;t install anything but Vim.  Vim is hard enough to learn without dealing with someone else&#8217;s idea of a good
editing environment.  Remember, your goal is to edit text (and code) better.  You&#8217;d be surprised at just how easy that is with a vanilla install of Vim and a bit of elbow grease.</p>

<p>It&#8217;s also important that, when learning Vim, you learn it from first principles.  You need to know in your heart of hearts that Vim editing is all about combining movements with actions.  It&#8217;s like playing a musical instrument.</p>

<p>To learn to play guitar, you should grab an acoustic and a chordbook.  You should <em>not</em> get a Marshall half-stack, vintage pedalboard, and Gibson Custom Shop Les Paul Slash Special Signature Edition.  In all honesty, you&#8217;re likely to find out a Fender Strat works just fine with a good distortion pedal, so don&#8217;t start off with a bunch of crap in your <code>~/.vim</code> directory.</p>

<h2>Ease into it</h2>

<p>You don&#8217;t want to uninstall Chocolat (or whatever) and jump into your next coding assignment with Vim.  At least not at first.  That will be bad for you and your company.  Instead, tell your operating system that henceforth, all text files, Markdown files, Asciidoc files and any other text-like format shall be edited in Vim.  Then, proceed to use Vim only for editing <em>text</em>.</p>

<p>Although editing text doesn&#8217;t benefit from many of Vim&#8217;s amazing plugins and features, it requires <em>just enough</em> for you to &#8220;level up&#8221; and get better at editing text. Before you know it, you&#8217;ll be deleting words, moving the cursor with search, creating abbrevations and all the other great stuff that makes Vim Vim, but in a safe, easy environment of text editing.  If you don&#8217;t edit a lot of text, shame on you.  You should write more.  It&#8217;s good for you.</p>

<p>Now, don&#8217;t just go into insert mode and cursor around like you&#8217;re in Notepad.  This is where
those tutorials and references come in.  Follow them and use them.  My advice is:</p>

<ul>
<li>When you get a thought down, hit escape to go to command mode<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.  A.B.C. Always Be in Command Mode.  A, Always, B, Be, C, in Command Mode.  You enter command mode mode or you hit the bricks.</li>
<li>When are ready to type, enter insert mode and type.  Then hit escape when you are done.  A.B.C.</li>
<li>Before touching the mouse, the cursor keys, the backspace key, or the delete key, ask yourself what you are <em>really</em> trying to do.  Are you <em>really</em> deleting 10 characters that
are all adjacent to each other or are you deleting a word?  Are you <em>really</em> moving down 12 lines or are you going to the next paragraph?</li>
<li>Stop thinking about characters and lines.  Think in words, sentences, paragraphs, tokens, blocks.  You are learning the Weirding Way, here.  Visualize where you want the cursor to go, and make it go there.  If you repeated a keystroke to do it, <em>try harder</em>.</li>
</ul>


<p>Eventually, you will start to discover things you want to improve about your setup.  Almost always, they can be fixed by mapping new commands or adjusting configuration.  The Vim help is truly amazing.  Read it.  Like a book.</p>

<p>On occasion, you will need more than what you can achieve with just mappings and configuration.  This is when you <em>might</em> benefit from an extension.  You need to know how to easily install (and remove) them.</p>

<h2>Learn to install and remove extensions</h2>

<p>I&#8217;m gonna get prescriptive here. Just do it this way, and when you get your brown belt, you can switch to something else.  Install <a href="https://github.com/tpope/vim-pathogen">pathogen</a> and use that to manage your Vim extensions.  Why?</p>

<p>Your <code>~/.vim</code> directory (as well as the system Vim directory) has a specific structure organized by a file&#8217;s meaning <em>to Vim</em>.  For example, all syntax files go in one place, and all
help files go in one place, etc.  This means that installing extensions using stock Vim results in a smattering of files all over the place related by Vim function and not by semantic function.  All the Ruby-related files are not in a directory called <code>ruby</code>.  It&#8217;s not good, but you can&#8217;t expect a 30+ year old editor to have got everything right the first time.</p>

<p>Pathogen solves this by allowing each extension to have its own Vim-like directory structure completely separate from all others.  This is just like a &#8220;bundle&#8221;-type system in more modern editors.  This means you can easily add and remove extensions with just a few commands.</p>

<p>Here&#8217;s how to set it up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; mkdir -p ~/.vim/autoload ~/.vim/bundle
</span><span class='line'>&gt; curl -Sso ~/.vim/autoload/pathogen.vim \
</span><span class='line'>    https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim</span></code></pre></td></tr></table></div></figure>


<p>Put this at the top of <code>~/.vimrc</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>execute pathogen#infect()
</span><span class='line'>syntax on
</span><span class='line'>filetype plugin indent on</span></code></pre></td></tr></table></div></figure>


<p>This gives you a system in which to manage extensions.  Test it by doing this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cd ~/.vim/bundle
</span><span class='line'>&gt; git clone git://github.com/nanotech/jellybeans.vim.git jellybeans.vim
</span><span class='line'>&gt; vim some_file</span></code></pre></td></tr></table></div></figure>


<p>Now, in Vim, do <code>:colorscheme jellybeans</code> and you should see your colors change (or at least you shouldn&#8217;t get an error).</p>

<p><em>Do not manage plugins by typing <code>git</code> commands</em>.  That was just a test.  We&#8217;re here to improve things and the way you do that is with a <em>command line app</em>.  When you pass the Jedi trials (or cut Darth Maul in half), you can do something fancier, but this at least keeps you from typing a bunch of <code>git</code> commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;optparse&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">opts</span> <span class="o">=</span> <span class="no">OptionParser</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span>
</span><span class='line'>  <span class="n">o</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;--clean&quot;</span><span class="p">,</span><span class="s2">&quot;Delete everything before re-cloning&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:clean</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">opts</span><span class="o">.</span><span class="n">parse!</span>
</span><span class='line'>
</span><span class='line'><span class="n">git_bundles</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="s2">&quot;git://github.com/nanotech/jellybeans.vim.git&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;git://github.com/tpope/Vim-vividchalk.git&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1"># add more here</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">bundles_dir</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s2">&quot;bundle&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">cd</span><span class="p">(</span><span class="n">bundles_dir</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:clean</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Trashing everything (lookout!)&quot;</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;*&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span>
</span><span class='line'>    <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_rf</span> <span class="n">d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">git_bundles</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>  <span class="n">dir</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/\.git$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;  Skipping </span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">, as it already exists&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;  Unpacking </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2"> into </span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="sb">`git clone </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sb"> </span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> <span class="vg">$?</span><span class="o">.</span><span class="n">success?</span>
</span><span class='line'>      <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_rf</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="s2">&quot;.git&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Problem with </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I keep this file in <code>update_bundles</code> in my <code>~/.vim</code> directory (which I keep in version control).  Since this is an <a href="http://www.pragprog.com/titles/dccar">awesome command-line app</a>, you can do <code>./update_bundles -h</code> and get some help.  Start off with <code>./update_bundles --clean</code>.  This will delete your one bundle and re-clone it, along with a second bundle. That&#8217;s the &#8220;vividchalk&#8221; colorscheme, which I&#8217;m not recommending per se, but it&#8217;s just a second thing you can use to check that you&#8217;ve got everything set up properly.  Do that via <code>:colorscheme vividchalk</code>.</p>

<p>To add extensions, place them inside the <code>git_bundles</code> hash and run <code>./update_bundles</code>.  To remove extensions, remove them from that hash and delete their cloned directory in <code>~/.vim/bundle</code>.  That&#8217;s it.</p>

<p>Of course, with great power, comes great responsibility…to not junk up your bundles
directory with a bunch of stupid plugins you really don&#8217;t need to write code better.</p>

<h2>Add extensions only when needed</h2>

<p>I&#8217;m not saying you shouldn&#8217;t experiment and explore, but you will get the most benefit from Vim by <em>not</em> installing plugins that re-create features of the degenerate editor you are trying to get away from.  You&#8217;re leaving it for a reason.  Install plugins to solve editing and workflow problems you can&#8217;t get around with what vim gives you.</p>

<p>For example, a lot of people install NERDTree because they like seeing the world&#8217;s most difficult-to-use tree control from Windows Explorer right there in
ASCII-art form in Vim.  It turns out that controls like this were designed for locating files in a directory structure using a mouse on Windows 95.</p>

<p>If you think you need this plugin, you may not have thought deeply about the problem you are facing.  Your problem is likely <em>not</em> &#8220;I need to navigate my project by tree structure and have it constantly there always even though I spend most of my time reading and writing particular code files&#8221;.  Your problem is &#8220;I need to open a particular file more easily&#8221;.  Vim has many ways to do that that are far better.</p>

<p>The most degenerate way is to do <code>:e .</code> which brings up a file navigator in the current directory.  You can navigate the file system <em>with Vim</em>, which is great, but this is still not very efficient.  A better way is to read about <code>gf</code> or <code>:find</code>, or look into the <code>CommandT</code> extension.  All of these allow you to quickly find a file by name or path just by typing.  Typing is fast as hell.</p>

<p>This is just an example, and it&#8217;s meant to illustrate that you should install extensions to solve <em>problems</em>, not to replicate <em>features of other editors</em>.  Sometimes they will be same, but often they will not be.</p>

<p>To find plugins, search GitHub.  Do not use Google, use GitHub.  If you find a plugin that you cannot install by having <code>update_bundles</code> clone it into your <code>.vim/bundle</code> directory, you might not be searching GitHub.  Or, you have a found a plugin that isn&#8217;t being maintained and you should avoid using it.  Or, you should clone it to GitHub and start maintaining it.</p>

<p>As you get more comfortable, start using Vim for coding.  It will be painful, but at least you&#8217;ll know how to navigate the project, copy &amp; paste, and have some grasp of what&#8217;s going, thanks to the grounding in first principles you got while editing plain text files.</p>

<p>Find the plugin for the programming language you are using.  Read the help to see what it offers and, if it looks useful, install it.  You&#8217;ll likely want it just to get the syntax highlighting and indentation stuff working.</p>

<p>Finally, share what you&#8217;ve learned with other Vim users.  Especially if they know more Vim than you.  Those conversations will go like this:</p>

<ul>
<li><em>You</em>: &#8220;Hey, did you know about <code>#</code>?  It searches <em>backward</em> for the word under the cursor!!&#8221;</li>
<li><em>Vim Master</em>: &#8220;Yes!  I love that command.  Do <strong>you</strong> know about <code>?</code>?  It repeats your last search backward.  <code>n</code> does the same forward!&#8221;</li>
</ul>


<p>And then you learn something.  On occasion, the Vim grand master will learn something from you.  Vim just keeps on giving.  It&#8217;s like that.  Vim users are never short of a few tips to share, and as smug as they are around Emacs users, and as arrogant as they are around <em>IDE</em> users, they will be super-kind to anyone learning Vim.</p>

<p>So, go forth and switch! Run stock, then ease into it, then learn about pathogen, and then start leveling up.
The next time you find yourself in Microsoft Word staring at a row of j&#8217;s, you&#8217;ll know you&#8217;ve made the switch.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>Yes, I realize most call it “normal” mode.  It <strong>should be</strong> the mode you are normally in.  That&#8217;s the point, but I call it command mode, and I really wanted to make a Glengarry Glen Ross reference. <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Painful World of JavaScript Testing]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/04/10/the-painful-world-of-javascript-testing.html"/>
    <updated>2013-04-10T10:40:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/04/10/the-painful-world-of-javascript-testing</id>
    <content type="html"><![CDATA[<p>One of the main reasons I like working test-first is because I&#8217;m lazy.  I don&#8217;t want to fire
up a browser, log in as the right person, navigate to just the right piece of data (which I
had to set up manually in the database), and click around to see if things are working.</p>

<p>Don&#8217;t get me wrong, I <em>do</em> do that, but only when the code is working according to my tests.  Or, when I have to write
JavaScript.</p>

<p>At my <a href="http://www.naildrivin5.com/blog/2013/02/19/stitch-fix-slash.html">current job</a>, I&#8217;m doing a lot more front-end than I had been, and so more
JavaScript.  The app I&#8217;m working on is a Rails app, and so I looked into the current state of
the art with testing JavaScript.</p>

<p>In <em>can</em> be done, and it&#8217;s painful.</p>

<!-- more -->


<p>I have a few constraints or requirements for testing:</p>

<ul>
<li>I want to write CoffeeScript.  Every time I have to type <code>function() { }</code> is a part of my
life I won&#8217;t get back.</li>
<li>I want the tests to run from <code>rake</code> without having to open a browser or navigate to some
magic page that happens to run tests.</li>
<li>I want to test every bit of logic I can, including logic involving JQuery.  Basically, I
want to know from my tests if the JavaScript code has broken.</li>
</ul>


<p>The tools exist to do all of this, however they are amazingly degenerate compared to what was
available in Java 10 years ago.  We&#8217;ll get to that.</p>

<h2>Jasmine</h2>

<p>The current state-of-the art seems to be <a href="http://pivotal.github.com/jasmine">Jasmine</a>.  Our Rails app uses RSpec, and Jasmine is
very much along those lines.  You write your &#8220;spec&#8221; and then call assertions in the form
<code>expect(foo).toBe(bar)</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s1">&#39;my math library&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">describe</span> <span class="s1">&#39;can add&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">it</span> <span class="s2">&quot;should handle 0&quot;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">SuperMath</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">0</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">it</span> <span class="s2">&quot;can handle negatives&quot;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">SuperMath</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wonderful!  There&#8217;s lots of useful matchers and, with CoffeeScript, the code is pretty
readable.  The output is very RSpec-like.</p>

<p>The first step to get this working is <a href="https://github.com/searls/jasmine-rails">jasmine-rails</a>.  Jasmine-rails is mostly a
wrapper around the Jasmine JS code, and a simple engine you can mount to run the tests
in-browser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;jasmine-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will bootstrap a configuration file for you, and this is where the pain starts.  The
configuration is not well documented or well designed, so it&#8217;s hard to understand exactly
where Jasmine is going to look for files.  Further, Jasmine itself provides zero help when
things don&#8217;t work. Basically, it just shows 0 specs and declares success.  Add in the asset
pipeline and if things don&#8217;t &#8220;just work&#8221;, it&#8217;s no fun.</p>

<p>I eventually got something working through trial and error.  I would highly recommend starting
with a spec that doesn&#8217;t require any of your actual JS files to work, e.g.
<code>expect(true).toBe(true)</code> and so forth.  Once that&#8217;s working, make assertions about the
<em>existence</em> of your actual JS code before going ahead with real tests.</p>

<p>Painful setup is annoying, but it&#8217;s a one-time thing.  Once I had this going, I needed to
write some tests.</p>

<p>I have a feature where entering a number into a text field and hitting return causes certain behavior
to happen on the page.  If the number is &#8220;valid&#8221;, a radio button gets checked, and if it&#8217;s not, an error
message gets shown.</p>

<p>Implementing this is pure JQuery, and I immediately felt frozen - how the heck am I gonna test this?
Mock JQuery?  And if I <em>do</em>, I&#8217;d just end up testing the implementation, e.g. &#8220;assert that JQuery
called <code>hide()</code> on an element with selector &#8216;foo&#8217;&#8221; and so on.  Not good.</p>

<p>Enter jasmine-jquery.</p>

<h2>Fixtures with jasmine-jquery</h2>

<p><a href="https://github.com/velesin/jasmine-jquery">Jasmine-jquery</a> includes a bunch of matchers that help with JQuery-specific behavior, things
like <code>expect($("#whatever")).toBeHidden()</code>.  This is useful, but I&#8217;d still need to find some
way to load up the page and execute the JQuery-based code on a DOM.</p>

<p>I could certainly do that in a Capybara test, but those are slow and flaky.  I need a better way to control the markup that my
JQuery executes on during a test.</p>

<p>A bit of code has inputs, which we arrange as part of our test, and we check the outputs of the code to see that it&#8217;s working.
The fewer the inputs, the easier it is to test something.  This is why functional programming is so appealing - functions tend
to have fewer inputs than methods on an object (which have both their arguments and the internal state of the object as inputs).  Well, JQuery-based JavaScript basically has &#8220;every piece of markup on the Internet&#8221; as its input.</p>

<p>Practically speaking, it has as input &#8220;all the markup on the page&#8221;, which is still a lot of inputs.  I needed a way to both specify the inputs, but also to clearly document what parts of any page are the <em>real</em> inputs. Fixtures is a way to do that.  Essentially, fixtures in jasmine-jquery are bits of HTML that will be available to JQuery as the DOM during your test.</p>

<p>At first, I attempted to place the fixtures in external files.  This seems logical, but it
requires the application to serve them up.  Outside of the fact that our application requires
authentication to every page, the headless version (below) just didn&#8217;t work at all when fixtures were in external files.</p>

<p>Carrying on the tradition of Jasmine and JavaScript in general, when things didn&#8217;t work, they
just silently didn&#8217;t work, with no way of diagnosing what was going on.</p>

<p>So, inline fixtures it is.  In other words, big strings of HTML.</p>

<p>First, we set up the spec:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s1">&#39;returns&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">describe</span> <span class="s1">&#39;show&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s1">&#39;doing an item lookup&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we set up our fixture in a <code>beforeEach</code> block using CoffeeScript&#8217;s handy multi-line
string syntax.  This keeps things fairly readable, despite the fact that we&#8217;re building a
giant string of HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">beforeEach</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">fixture = </span><span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">  &lt;div id=&quot;</span><span class="nx">returns</span><span class="o">-</span><span class="nx">fixture</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;div id=&quot;</span><span class="nx">flash</span><span class="o">-</span><span class="nx">alert</span><span class="s2">&quot; class=&quot;</span><span class="nx">alert</span><span class="s2">&quot; style=&quot;</span><span class="nv">display: </span><span class="nx">none</span><span class="p">;</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">      &lt;div class=&quot;</span><span class="nx">msg</span><span class="s2">&quot;&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="s2">    &lt;/div&gt;</span>
</span><span class='line'><span class="s2">    &lt;div id=&quot;</span><span class="nx">flash</span><span class="o">-</span><span class="nx">notice</span><span class="s2">&quot; class=&quot;</span><span class="nx">alert</span><span class="s2">&quot; style=&quot;</span><span class="nv">display: </span><span class="nx">none</span><span class="p">;</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">      &lt;div class=&quot;</span><span class="nx">msg</span><span class="s2">&quot;&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="s2">    &lt;/div&gt;</span>
</span><span class='line'><span class="s2">    &lt;form id=&quot;</span><span class="nx">item</span><span class="o">-</span><span class="nx">id</span><span class="o">-</span><span class="nx">lookup</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;input type=&quot;</span><span class="nx">text</span><span class="s2">&quot; id=&quot;</span><span class="nx">item</span><span class="o">-</span><span class="nx">id</span><span class="o">-</span><span class="nx">field</span><span class="s2">&quot; name=&quot;</span><span class="nx">item_id</span><span class="s2">&quot; autofocus=&quot;</span><span class="nx">autofocus</span><span class="s2">&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    &lt;input id=&quot;</span><span class="nx">item</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="k">in</span><span class="s2">&quot; type=&quot;</span><span class="nx">radio</span><span class="s2">&quot; name=&quot;</span><span class="k">return</span><span class="p">[</span><span class="nx">items</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="nx">status</span><span class="p">]</span><span class="s2">&quot; value=&quot;</span><span class="nx">In</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;input id=&quot;</span><span class="nx">item</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">out</span><span class="s2">&quot; type=&quot;</span><span class="nx">radio</span><span class="s2">&quot; name=&quot;</span><span class="k">return</span><span class="p">[</span><span class="nx">items</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="nx">status</span><span class="p">]</span><span class="s2">&quot; value=&quot;</span><span class="nx">Out</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;input id=&quot;</span><span class="nx">item</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">dmg</span><span class="s2">&quot; type=&quot;</span><span class="nx">radio</span><span class="s2">&quot; name=&quot;</span><span class="k">return</span><span class="p">[</span><span class="nx">items</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="nx">status</span><span class="p">]</span><span class="s2">&quot; value=&quot;</span><span class="nx">Damaged</span> <span class="o">-</span> <span class="nx">Reparable</span><span class="s2">&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    &lt;input id=&quot;</span><span class="nx">item</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="k">in</span><span class="s2">&quot; type=&quot;</span><span class="nx">radio</span><span class="s2">&quot; name=&quot;</span><span class="k">return</span><span class="p">[</span><span class="nx">items</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="nx">status</span><span class="p">]</span><span class="s2">&quot; value=&quot;</span><span class="nx">In</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;input id=&quot;</span><span class="nx">item</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="nx">out</span><span class="s2">&quot; type=&quot;</span><span class="nx">radio</span><span class="s2">&quot; name=&quot;</span><span class="k">return</span><span class="p">[</span><span class="nx">items</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="nx">status</span><span class="p">]</span><span class="s2">&quot; value=&quot;</span><span class="nx">Out</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;input id=&quot;</span><span class="nx">item</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="nx">dmg</span><span class="s2">&quot; type=&quot;</span><span class="nx">radio</span><span class="s2">&quot; name=&quot;</span><span class="k">return</span><span class="p">[</span><span class="nx">items</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="nx">status</span><span class="p">]</span><span class="s2">&quot; value=&quot;</span><span class="nx">Damaged</span> <span class="o">-</span> <span class="nx">Reparable</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;/form&gt;</span>
</span><span class='line'><span class="s2">  &lt;/div&gt;</span>
</span><span class='line'><span class="s2">  &quot;&quot;&quot;</span>
</span><span class='line'>  <span class="nx">jasmine</span><span class="p">.</span><span class="nx">getFixtures</span><span class="p">().</span><span class="nx">set</span><span class="p">(</span><span class="nx">fixture</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">StitchFix</span><span class="p">.</span><span class="nx">controllers</span><span class="p">.</span><span class="nx">returns</span><span class="p">.</span><span class="nx">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>(When editing this article,I noticed that Pygments highlighted the inline HTML.  I wish Vim did that, it makes the fixture
 pretty readable!)</p>

<p>The second-to-last line instructs Jasmine to magically do some magic and make the HTML available to
JQuery.  I don&#8217;t know what part of this is Jasmine and what part is
jasmine-jquery, but it works.  The last line is some setup that gets called by our global JS for the particular page this JS is
for.</p>

<p>This markup is somewhat duplicated from the actual ERB templates, but what can you do?  If
someone changed the ids on me, my tests will pass, but the app breaks.  It&#8217;s all about
compromise, and this seems like a decent compromise.  These are unit tests, and I have to have
some assumptions about the inputs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s1">&#39;should check the proper radio button when the id is submitted&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#item-id-field&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s1">&#39;when there was no previous alert message&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#item-id-lookup&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#item-1-in&quot;</span><span class="p">)).</span><span class="nx">toBeChecked</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#item-id-field&quot;</span><span class="p">)).</span><span class="nx">toHaveValue</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">waitForAnimations</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#flash-notice&quot;</span><span class="p">)).</span><span class="nx">toBeVisible</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#flash-notice .msg&quot;</span><span class="p">)).</span><span class="nx">toHaveText</span><span class="p">(</span><span class="s2">&quot;Item 1 marked as &#39;In&#39;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That last bit was really fun.  We changed the hiding logic to do an animation.  When we did
that, our expectations fired before the animations had completed, making the test fail.  So,
  we have to litter our test with this crud to get consistency.  Here&#8217;s <em>that</em> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">waitForAnimations</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">andThen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;:animated&quot;</span><span class="p">).</span><span class="nx">promise</span><span class="p">().</span><span class="nx">done</span><span class="p">(</span><span class="nx">andThen</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yup, it&#8217;s in JavaScript, because a) I don&#8217;t know how to make global functions in CoffeeScript
that works in this weird context of running tests and b) a class created here to hold the
function wasn&#8217;t visible to my specs.  I&#8217;m sure this is a CoffeeScript thing, but it&#8217;s still
annoying.</p>

<p><em>But</em>, things are working. Now, let&#8217;s get it running headless.</p>

<h2>No browser was used in the execution of this test</h2>

<p>Jasmine-rails includes <a href="http://johnbintz.github.io/jasmine-headless-webkit">jasmine-headless-webkit</a> which, if you install QT properly on your Mac, will run these tests
without a browser, on the command line, via <code>rake</code>, just like you&#8217;re supposed to in the 21st
century.  It even sets up the rake task: <code>rake jasmine:headless</code>.  Not much of a name, but it works.</p>

<p>It&#8217;s slow, to be sure, but not nearly as slow as running it in the browser, <em>plus</em> it works on CI.  The planets must be aligned
inside my astrological sign.</p>

<p>It was a long, annoying trip to get here, but we finally have something sane to run tests in a pretty reasonable
way, and I only had to type <code>function() {}</code> <em>one time</em>, we don&#8217;t have to mock JQuery and it&#8217;s all happening
on the command line, where proper software development occurs.</p>

<p>Of course, all of this was done to code already written.  I want
to use my tests to drive the writing of code, and this is where the situation absolutely
sucks.</p>

<h2>Failure is the only option</h2>

<p>One thing that&#8217;s super-important about writing tests first is watching the code fail in a
specific way.  If I call the method <code>foobar</code>, I want my test failure to be because that method
doesn&#8217;t exist.  This way, when the test <em>does</em> pass, I know that it had to correct affect on
the codebase.</p>

<p>In some cases, this works OK.  Let&#8217;s change our spec above to expect <code>#item-id-field</code>  to have
the value &#8220;foo&#8221;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#item-id-field&quot;</span><span class="p">)).</span><span class="nx">toHaveValue</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test failure message is very nice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Expected</span> <span class="s1">&#39;&lt;input type=&quot;text&quot; id=&quot;item-id-field&quot; name=&quot;item_id&quot; autofocus=&quot;autofocus&quot;&gt;&#39;</span>
</span><span class='line'><span class="nx">to</span> <span class="nx">have</span> <span class="nx">value</span> <span class="s1">&#39;foobar&#39;</span><span class="p">.</span> <span class="p">(</span><span class="nx">line</span> <span class="o">~</span><span class="mi">36</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The failure message is accurate, as is the line number.  So far, so good.</p>

<p>Now, let&#8217;s introduce a typo.  It happens, and, while annoying, is usually an easy problem to fix.
Not in the world of JavaScript unit testing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">(</span><span class="err">/Users/davec/Projects/spectre/spec/javascripts/returns_spec.coffee:33)</span>
</span><span class='line'>   <span class="nv">TypeError: </span><span class="s1">&#39;undefined&#39;</span> <span class="o">is</span> <span class="o">not</span> <span class="nx">a</span> <span class="nx">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>Umm, OK?  I haven&#8217;t shown you where the typo is, and in a potentially large codebase,
you might have a lot of code to look through.  Let&#8217;s use <strong>the only information we were
given</strong> and head to line 33 of our spec:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">it</span> <span class="s1">&#39;when there was no previous alert message&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not only is there no typo here, but this <strong>isn&#8217;t even the line of code that was
executed that resulted in the error!</strong>   Basically, at this point, we have two problems,
one practical, and one more philosophical.</p>

<p>Practically speaking, we now have to just read through our source code looking for the typo.  If we can&#8217;t see one, we have to start commenting out code until we get a different
error message and then slowly comment it back in.  In 2013.  We put a man on the freakin&#8217; moon
in 1969, and JavaScript, the language of the web, has no stack traces.  This is why we can&#8217;t
have nice things.</p>

<p>On a philosophical level, it also means my ability to test-drive my JavaScript code is
severely hampered.  When starting out a new bit of code, I&#8217;m gonna have a lot of typos and unknown functions.  With test failure messages that amount to &#8220;your code <a href="http://www.urbandictionary.com/define.php?term=asplode">a splode</a>&#8221;, it&#8217;s really hard to do that.</p>

<p>Want to see what the typo was?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">notifications</span><span class="p">.</span><span class="nx">close_noow</span><span class="p">(</span><span class="s2">&quot;alert&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">notifications</span><span class="p">.</span><span class="nx">close_now</span><span class="p">(</span><span class="s2">&quot;notice&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I fat-fingered the function <code>close_now</code>.  So, not only did it not point me to <em>any relevant
line of code</em> (and I&#8217;d be happy with the line of code in the generated JavaScript), it <strong>didn&#8217;t
even tell me the name of the missing symbol</strong>.</p>

<p>Yes, yes, I know that what it was trying to do was execute a function call on the value
<code>"close_noow"</code> from the <code>notifications</code> objects, which happened to be undefined.  But, can&#8217;t we do
better?</p>

<p>Interestingly, Google&#8217;s JavaScript runtime, V8, does a bit better, which isn&#8217;t surprising
(thought it still <em>boggles my mind</em> that v8 has no readline support.  You can&#8217;t even up
 arrow?!??!).  But, installing therubyracer and instructing Jasmine to use it (or Node) as the JS runtime
has no affect on the crappiness of this error message.</p>

<p>So, this is the state of things to my ability to find them.  I <em>hope</em> I&#8217;ve missed something,
but I fear I haven&#8217;t.  Just piecing this together via various searches and form posts was tricky, which means
that very few people are actually doing this in earnest.</p>

<p>It&#8217;s no wonder, because it&#8217;s a huge pain in the neck.  I can only assume
that I&#8217;ve created a ticking time-bomb in my application and, six months from now, it&#8217;s going
to go off and CI will just fail constantly with &#8220;undefined is not a function&#8221; or something.</p>

<p>I don&#8217;t have a particular opinion on Node, but I can tell you that if developing Node is like
this, I would <em>never</em> do it.  This is no way to work.</p>
]]></content>
  </entry>
  
</feed>
