<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Naildrivin' &#10106;]]></title>
  <link href="http://www.naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://www.naildrivin5.com/"/>
  <updated>2012-04-03T16:51:52-04:00</updated>
  <id>http://www.naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Protocol for Code Reviews]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/04/02/a-protocol-for-code-reviews.html"/>
    <updated>2012-04-02T20:30:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/04/02/a-protocol-for-code-reviews</id>
    <content type="html"><![CDATA[<blockquote><p>Anyone have a (formal / step-by-step) protocol for code reviews?</p><footer><strong>Jeff Casimir, The Twitters,</strong> <cite><a href='https://twitter.com/j3/status/186961864234770433'>twitter.com/j3/status/&hellip;</a></cite></footer></blockquote>


<p>Yes, I do.  At <a href="http://www.heyitsopower.com">Opower</a>, we were pretty serious about code reviews.  We didn&#8217;t review every commit, but we did review a lot, and, after a while, fell into a pretty decent routine.  This is an adaptation of that that I think is pretty decent.</p>

<!-- more -->


<h2>Prepare</h2>

<p>The code authors should send out the diff, either as a pull request, or whatever the equivalent is in the tool of choice.  This should include:</p>

<ul>
<li>What the purpose of the change is</li>
<li>Links to any supporting tickets, documentation, etc.</li>
<li>A Place To Start</li>
</ul>


<p>With all that, the reviewers should get an email, inviting them to review the code.  This is important, because you need to identify the people whose feedback you want.  Don&#8217;t just email <code>people_who_installed_ruby@theuniverse.com</code>; email people who either <em>should</em> see your change, or whose feedback you want.</p>

<h3>A Place to Start?</h3>

<p>Depending on the complexity of the change, this could be the name of the class/method where one should start reading, or a full-blown design document explaining the approach and structure of the change.  The point is that the reviewers have <em>no clue</em> how your code works, and need somewhere to get going.</p>

<h2>Asynchronous Review</h2>

<p>This is &#8220;review by online tool&#8221;, e.g. Github Pull Requests.  To make this work, you <em>must</em> have a tool that allows per-line commenting and discussion.  The reviewers will start at the Place to Start, review the code, and comment on things.  Reviewers should comment on anything they see fit, and they should follow <a href="http://twitter.com/#!/wilw/statuses/5966220832">Wheaton&#8217;s Rule</a>: Don&#8217;t be a dick.  The review<strong>ee</strong> promises not to take anything personally.  This can be hard to do, especially if you are new to the team, or inexperienced.  I&#8217;d recommend that for first-time employees, skip this and go to the <em>Synchronous Review</em> as it can be less intimidating.</p>

<h3>Responding to comments</h3>

<p>The reviewee should absolutely respond to comments.  I would expect comments to be one of these three responses:</p>

<ul>
<li>You are right, I will change that.</li>
<li>You are wrong, because of <em>some explanation</em>, and perhaps I&#8217;ll drop some comments or better-name my variables before I push this to make it clear.</li>
<li>I&#8217;m confused, can you elaborate?</li>
</ul>


<h3>Uploading changes</h3>

<p>As important as it is that your review tool allow per-line comments, it&#8217;s equally important that your review tool allow new changes to be added to the review <em>without blowing away the comments</em>.  Reviewers should be able to tell that you&#8217;ve made changes based on their feedback and see if it makes sense</p>

<h3>Stylistic Comments</h3>

<p>Early reviews at Opower wasted an inordinate amount of time on stylistic things.  We eventually adopted a house style and our reviews moved on to important things.  You are not a special butterfly and you are not a snowflake who can only express him or herself through your clever variable names and indenting style.  Follow the house style, or at least the style of the code you are in so you can <em>get better feedback on your code</em> instead of arguing about where commas should go.</p>

<h2>Synchronous Review</h2>

<p>If there are too many &#8220;I&#8217;m confused&#8221; comments, or the overall design/approach of the solution seems undesirable, it can greatly help if you hold a meeting with the interested parties to talk out the issues in the review, rather than creating an endless stream of comments in the review tool.</p>

<p>This review should be attended <em>only</em> by those with an interest in the outcome.  It should be timeboxed to hopefully 30 minutes, but not more than an hour, and the end result should be a &#8220;todo&#8221; list for the reviewee to correct the issues.  The ability to project the code on the screen is a plus, and the code authors best know how to navigate their codebase.  Senior developers have a responsibility to school them on this during the review.  It&#8217;s the only way you&#8217;ll learn. The issues would be of the form:</p>

<ul>
<li>Code author didn&#8217;t understand the problem, and a larger rework is indicated</li>
<li>Reviewers didn&#8217;t understand the solution, and, after explaining, the author either reworks the code to be more understandable, or provides documentation to clear things up</li>
</ul>


<h2>Completion</h2>

<p>When the code is done to the satisfaction of those involved, the final commit should contain a link to the review in the review tool. This is crucial for future archaeologists  that might want to know what&#8217;s going on; seeing the discussion can be helpful.</p>

<h2>Doing this with Github</h2>

<p>Github&#8217;s pull requests are less than ideal for this, depending on how you work.  Primarily, a reviewer wants to see the diff between the current system and how the system would look with the new code applied.  Last I checked, this view in Github doesn&#8217;t allow per-line commenting, making it almost useless.</p>

<p>What I&#8217;d recommend is to squash the commit onto a branch specifically for the review (e.g. <code>reviews/TICKETNUM-DESCRIPTION</code>).  When the code author needs to add changes in response to the review, just add those diffs to the branch.  When everything is done, squash all <em>that</em>, and merge it.  One diff, one thing to deal with and understand.</p>

<p>If you really want the sausage-making to be part of mainline history, then merge your changes plus one additional change representing all changes you made based on the review, with the message being a link to the review branch in Github.</p>

<h2>Doing this with Crucible</h2>

<p><a href="http://www.atlassian.com/software/crucible/overview">Crucible</a> was tailor-made for this, and all you need to do is choose changesets and have at it.  You can add diffs as needed, and the commenting system is rich.  Crucible is not as polished and slick as Github, but it works great.</p>

<h2>Conclusion</h2>

<p>This may sound like a lot, but it&#8217;s <em>really</em> lightweight, once you start doing it, and it&#8217;s way better than zillions of emails or
long, horrible meetings.  Just try it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Nine Facets of an Awesome Command-Line App]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/04/01/the-nine-facets-of-an-awesome-command-line-app.html"/>
    <updated>2012-04-01T11:51:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/04/01/the-nine-facets-of-an-awesome-command-line-app</id>
    <content type="html"><![CDATA[<p>When creating the outline for <a href="http://bit.ly/cli-hl-blog-post">my book</a> (now officially published and in print!), I decided to organize it around the
nine facets of an awesome command-line app.  <a href="http://www.awesomecommandlineapps.com">Each chapter</a> focuses on one of these facets.  They state that an awesome
command-line app should:</p>

<ul>
<li>have a clear and concise purpose</li>
<li>be easy to use</li>
<li>be helpful</li>
<li>play well with others</li>
<li>delight casual users</li>
<li>make configuration easy for advanced users</li>
<li>install and distribute painlessly</li>
<li>be well-tested and as bug free as possible</li>
<li>be easy to maintain</li>
</ul>


<p>In this post, I&#8217;ll illustrate each of these facets (along with a test of the tenth chapter on color and formatting), via a code
walkthrough of a simple command-line app I created for work.</p>

<!-- more -->


<p>LivingSocial (where I <a href="http://www.livingsocial.com">work</a>) processes thousands of credit card transactions per day, across a highly distributed, asynchronous system.  When things go wrong, the log files are the first place I look to find answers.  This means that <code>grep</code> is my go-to tool for analysis.  Even though <code>grep</code> can highlight search terms in output, with long and complex log lines, it can be hard to pick out just what I&#8217;m looking for.  I needed a tool to just highlight text, but not actually &#8220;grep out&#8221; non-matching lines.</p>

<h2>To the command-line!</h2>

<p>So, in just a few short hours, <a href="https://github.com/davetron5000/hl">hl</a> was born.  I wrote it using TDD, and, even though it&#8217;s barely 100 lines of code, it hits all the notes of an awesome command-line app (if I do say so myself :).  Let&#8217;s go through all nine of our &#8220;facets of an awesome command-line app&#8221; and see what the fuss is about.</p>

<h2>Have a Clear &amp; Concise Purpose</h2>

<p>The best way to have a clear &amp; concise purpose is to do one thing, and one thing only.  <code>hl</code> highlights search terms in any output to assist with visual scanning of output.  It doesn&#8217;t highlight multiple terms, and it doesn&#8217;t remove non-matching lines.  It just highlights terms.  One thing, and one thing only.</p>

<h2>Be Easy to Use</h2>

<p>This is a <em>big</em> topic, but here&#8217;s an example of using <code>hl</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grep 987876736 my_logs.log | hl credit_card_token</span></code></pre></td></tr></table></div></figure>


<p><code>hl</code> does what it&#8217;s asked, by default, without a lot of fuss, just like any other UNIX command.  It has options, but you never
need to worry about them in most cases.  Of course, if you <em>are</em> curious about those options, that leads to our next facet.</p>

<h2>Be Helpful</h2>

<p><code>hl</code> is based on <a href="https://github.com/davetron5000/methadone">methadone</a>, which is a proxy to <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/optparse/rdoc/OptionParser.html">OptionParser</a>, which is <em>the</em> tool to use for parsing the command-line in Ruby.  It&#8217;s very powerful, and generates a canonical, documented UI for your app:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bin/hl --help
</span><span class='line'>Usage: hl [options] [search_term] [filename]
</span><span class='line'>
</span><span class='line'>Highlight terms in output without grepping out lines
</span><span class='line'>
</span><span class='line'>v1.0.0
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>    -c, --color COLOR                Color to use for highlighting
</span><span class='line'>                                     (red|green|yellow|blue|magenta|cyan|white)
</span><span class='line'>                                     (default: yellow)
</span><span class='line'>    -b, --[no-]bright                Use bright colors
</span><span class='line'>    -n, --[no-]inverse               Inverse highlight
</span><span class='line'>    -u, --[no-]underline             Underline highlight
</span><span class='line'>    -p, --regexp PATTERN             Search term as explicit option
</span><span class='line'>    -i, --[no-]ignore-case           Ignore case in match
</span><span class='line'>        --version                    Show help/version info
</span><span class='line'>
</span><span class='line'>Default values can be placed in the HL_OPTS environment variable</span></code></pre></td></tr></table></div></figure>


<p>Note how much <code>OptionParser</code> gives us:</p>

<ul>
<li>Ability to describe our app, its version, and basic invocation syntax</li>
<li>Nicely formatted list of options and descriptions</li>
<li>Ability to accept &#8220;negatable&#8221; options (we&#8217;ll talk about that in a second)</li>
</ul>


<p>Further, I&#8217;ve gone to the trouble to make sure that <code>--color</code> clearly indicates the acceptable values as well as the default.  Finally, I&#8217;ve made sure that all options are available in short-form (for easy typing on the command line) and long-form (for clarity when scripting and configuring our app).</p>

<p>Here&#8217;s the code that makes this happen (if you aren&#8217;t familiar with methadone, the method <code>on</code> behaves almost exactly like the <code>on</code> method in <code>OptionParser</code>):</p>

<figure class='code'><figcaption><span>bin/hl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;optparse&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;methadone&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;hl&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">App</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Methadone</span><span class="o">::</span><span class="no">Main</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Methadone</span><span class="o">::</span><span class="no">CLILogging</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">main</span> <span class="k">do</span> <span class="o">|</span><span class="n">keyword</span><span class="p">,</span><span class="o">*</span><span class="n">filenames</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># main logic here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">description</span> <span class="s2">&quot;Highlight terms in output without grepping out lines&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">options</span><span class="o">[</span><span class="ss">:color</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;yellow&#39;</span>
</span><span class='line'>  <span class="n">colors</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;yellow&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;magenta&#39;</span><span class="p">,</span> <span class="s1">&#39;cyan&#39;</span><span class="p">,</span> <span class="s1">&#39;white&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">on</span><span class="p">(</span><span class="s2">&quot;-c COLOR&quot;</span><span class="p">,</span>       <span class="s2">&quot;--color&quot;</span><span class="p">,</span><span class="s2">&quot;Color to use for highlighting&quot;</span><span class="p">,</span><span class="n">colors</span><span class="p">,</span><span class="s2">&quot;(</span><span class="si">#{</span><span class="n">colors</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">on</span><span class="p">(</span><span class="s2">&quot;--[no-]bright&quot;</span><span class="p">,</span>     <span class="s2">&quot;-b&quot;</span><span class="p">,</span>  <span class="s2">&quot;Use bright colors&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">on</span><span class="p">(</span><span class="s2">&quot;--[no-]inverse&quot;</span><span class="p">,</span>    <span class="s2">&quot;-n&quot;</span><span class="p">,</span>  <span class="s2">&quot;Inverse highlight&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">on</span><span class="p">(</span><span class="s2">&quot;--[no-]underline&quot;</span><span class="p">,</span>  <span class="s2">&quot;-u&quot;</span><span class="p">,</span>  <span class="s2">&quot;Underline highlight&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">on</span><span class="p">(</span><span class="s2">&quot;--regexp PATTERN&quot;</span><span class="p">,</span>  <span class="s2">&quot;-p&quot;</span><span class="p">,</span>  <span class="s2">&quot;Search term as explicit option&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">on</span><span class="p">(</span><span class="s2">&quot;--[no-]ignore-case&quot;</span><span class="p">,</span><span class="s2">&quot;-i&quot;</span><span class="p">,</span>  <span class="s2">&quot;Ignore case in match&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">arg</span> <span class="ss">:search_term</span><span class="p">,</span> <span class="ss">:optional</span>
</span><span class='line'>  <span class="n">arg</span> <span class="ss">:filename</span><span class="p">,</span> <span class="ss">:optional</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="no">Hl</span><span class="o">::</span><span class="no">VERSION</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">defaults_from_env_var</span> <span class="s1">&#39;HL_OPTS&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">go!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Methods like <code>arg</code>, <code>version</code>, and <code>description</code> are helpers from methadone (see the <a href="http://www.naildrivin5.com/blog/2011/12/19/methadone-the-awesome-cli-library.html">intro</a> for more), but note how <em>little</em> code it takes just to make a great and polished UI.</p>

<p>The second part of a helpful app is to include more detailed documentation.  For a command-line app, this is expected to be in the form of a man page.  If you installed <code>hl</code> with RubyGems, try this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem man hl
</span></code></pre></td></tr></table></div></figure>


<p>You should see a nicely formatted man page (which also happens <a href="https://github.com/davetron5000/hl/blob/master/README.md">to be the <code>README</code></a> for the github project)!  Creating a man page is extremely simple thanks to <a href="https://github.com/rtomayko/ronn">ronn</a>.  <code>ronn</code> converts Markdown to troff, the format used by the man system.  Just add this to your Rakefile:</p>

<figure class='code'><figcaption><span>Rakefile Snippet</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;methadone&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="no">Methadone</span><span class="o">::</span><span class="no">SH</span>
</span><span class='line'><span class="kp">include</span> <span class="no">FileUtils</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:man</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;ronn --markdown --roff man/hl.1.ronn&#39;</span>
</span><span class='line'>  <span class="n">mv</span> <span class="s1">&#39;man/hl.1.markdown&#39;</span><span class="p">,</span><span class="s1">&#39;README.md&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, your gemspec just needs:</p>

<figure class='code'><figcaption><span>Gemspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">add_development_dependency</span><span class="p">(</span><span class="s1">&#39;ronn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">add_dependency</span><span class="p">(</span><span class="s1">&#39;gem-man&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll also need to include the generated file <code>man/hl.1</code> in your <code>files</code> in your gemspec, but if you&#8217;re using the gemspec created by Bundler, this happens automatically as long as the file is in source control.</p>

<p>That&#8217;s <em>it</em>.   Now your app has a great UI <em>and</em> a man page, and all you had to do was drop a few lines of code and write a short Markdown file (which you&#8217;d write anyway, since you <em>are</em> making a README, right?).</p>

<p>In addition to being helpful to humans, awesome command-line apps should be helpful to other commands.</p>

<h2>Play well with others</h2>

<p>An app that &#8220;plays well with others&#8221; on the command line, basically means that it acts as a <em>filter</em>. Text comes in, gets processed, the processed text goes out.  The expectation is that text from any other &#8220;well playing&#8221; program can be input into our program, and that our program&#8217;s output can be piped into another program as input.</p>

<p>Since the purpose of our app is to add ANSI escape codes to the output for assistance with <em>human</em> visual scanning, we can&#8217;t claim that our <em>output</em> plays well with others; it&#8217;s not designed to.  But, we can still play well with the output from <em>other</em> apps.</p>

<p>We saw that <code>hl</code> was designed to take input from a tool like <code>grep</code>.  <code>hl</code> can also highlight terms from any number of files given to it on the command line.  You can do this transparently in Ruby using the awesome <a href="http://ruby-doc.org/core-1.9.3/ARGF.html">ARGF</a>, however Methadone doesn&#8217;t support ARGF (a sad fact I learned while writing this app, and something <a href="https://github.com/davetron5000/methadone/issues/34">I&#8217;ll address</a> in the near future), so here&#8217;s how did it (a few comments added to indicate what&#8217;s going on):</p>

<figure class='code'><figcaption><span>Treating STDIN and a file list as the same source of data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># filenames is a possibly empty list of strings</span>
</span><span class='line'><span class="n">files</span> <span class="o">=</span> <span class="k">if</span> <span class="n">filenames</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>          <span class="o">[</span><span class="no">STDIN</span><span class="o">]</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">filenames</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'><span class="c1"># files is now an Array of open IO objects</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># highlighting code</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="c1"># we close the files since we didn&#39;t open them in &quot;block&quot; form; closing STDIN is OK to do</span>
</span><span class='line'>  <span class="c1"># since we know our app will soon exit</span>
</span><span class='line'>  <span class="n">files</span> <span class="o">&amp;&amp;</span> <span class="n">files</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:close</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, ARGF handles this transparently, but the point is, we want the standard input and a provided list of files to be treated the same by our program, and this is how I did it.</p>

<p>Since our app is similar in concept to grep, I thought it would be nice if users familiar with grep could be instantly familiar
with <code>hl</code>.</p>

<h2>Delight Casual Users</h2>

<p>This is a &#8220;level up&#8221; from &#8220;being easy to use&#8221;.  The idea behind the term &#8220;delight&#8221; is to provide a level of polish and attention to detail that your users will appreciate if they&#8217;re observant, but hopefully not even notice, because your app &#8220;just works&#8221;.</p>

<p>Since <code>hl</code>, like <code>grep</code>, is used for filtering and examining text files,  I chose my command-line options to match <code>grep</code>&#8217;s where i could.  Initially, I had the short-form of <code>--inverse</code> as <code>-i</code>.  When I later added the ability to do a case-insensitive match, I realized that <code>-i</code> is the option to <code>grep</code> for &#8220;case-insensitive&#8221;.  I quickly changed <code>--inverse</code> to have <code>-n</code> as its short-form, and made <code>-i</code> and <code>--ignore-case</code> the options for case-insensitivity.  These are the same values that <code>grep</code> uses, so a user who might subconciously type <code>hl -i</code> expecting a case-insensitive match will get it.</p>

<p>Further, I allowed the user to specify the search term either as a command-line argument, or as the argument to <code>-p</code> or <code>--regexp</code>, which are the option names <code>grep</code> uses.  It&#8217;s a basic principle of design that things that are the same should be <em>exactly</em> the same, so I used <code>grep</code> as my guide when <code>hl</code> implemented similar features.</p>

<p>Of course, power users love to customize things.</p>

<h2>Make Configuration Easy</h2>

<p>In the book, I talk about using YAML as a configuration format for an <code>.rc</code> file.  This can be very useful for complex apps, but another technique that&#8217;s handy is to allow an environment variable to hold default options.  <code>grep</code> does this via <code>GREP_OPTS</code> and if you were paying attenion, you noticed this line in <code>bin/hl</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">defaults_from_env_var</span> <span class="s1">&#39;HL_OPTS&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This tells methadone to look at the environment variable <code>HL_OPTS</code> (as well as the command line) for any options.  These options are placed first in <code>ARGV</code>, essentially like so:</p>

<figure class='code'><figcaption><span>Putting command-line options from the environment into ARGV</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">String</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="vi">@env_var</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span>
</span><span class='line'>  <span class="o">::</span><span class="no">ARGV</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Note the use of <code>String</code> to make sure that <code>nil</code> gets turned into the empty string, saving us an <code>if</code> statement).  Methadone does this before parsing <code>ARGV</code>.  Using <code>unshift</code> means that any options the <em>user</em> specifies will come <em>after</em> those in <code>HL_OPTS</code> and therefore take precendence:</p>

<pre><code>$ export HL_OPTS=--color=cyan
$ grep foo some_log.txt | hl --color=magenta
</code></pre>

<p>This is the same as</p>

<pre><code>$ grep foo some_log.txt | hl --color-cyan --color=magenta
</code></pre>

<p>This is also why I&#8217;ve provided the &#8220;negatable&#8221; forms.  Suppose you generally wanted inverse:</p>

<pre><code>$ export HL_OPTS=--inverse
</code></pre>

<p>If you wanted to run <code>hl</code> <em>without</em> inverse, but there was no negatable option, the only way to turn it off would be to unset the environment variable.  With the negatable forms, it&#8217;s simple:</p>

<pre><code>$ grep foo some_log.txt | hl --no-inverse
</code></pre>

<p>Since the user&#8217;s command-line options take precedence, things work out, but you can still configure your defaults.</p>

<p>Finally, I&#8217;d recommend that you use the long-form options in your configuration.  In other words, if you prefer bright and inverted highlights, do this:</p>

<pre><code>$ export HL_OPTS='--inverse --bright'
</code></pre>

<p>As opposed to</p>

<pre><code>$ export HL_OPTS=-nb
</code></pre>

<p>The second form is more compact, but your configuration is going to be <em>read</em> more than written, and, 6 months from now when you are going through your <code>.bashrc</code>, you&#8217;re going to appreciate seeing things spelled out; you&#8217;ll know instantly what the configuration does and don&#8217;t have to wonder about what <code>-n</code> means.</p>

<h2>Distribute Painlessly</h2>

<p>RubyGems:</p>

<pre><code>$ gem install hl
$ hl --help
</code></pre>

<p>That is all.</p>

<h2>Be well-tested</h2>

<p>I wrote <code>hl</code> entirely using <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> and entirely using <a href="https://github.com/cucumber/aruba">aruba</a>.  Here&#8217;s a sampling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Highlights with case insensitivity</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">a file named &quot;</span><span class="s">test_file</span><span class="nf">&quot; with the word &quot;</span><span class="s">FOO bar foo</span><span class="nf">&quot; in it</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I successfully run `hl -i foo ../../test_file`</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">the entire contents of &quot;</span><span class="s">test_file</span><span class="nf">&quot; should be output</span>
</span><span class='line'><span class="nf">    </span><span class="k">But </span><span class="nf">the word &quot;</span><span class="s">foo</span><span class="nf">&quot; should be highlighted in yellow</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">the word &quot;</span><span class="s">FOO</span><span class="nf">&quot; should be highlighted in yellow</span>
</span></code></pre></td></tr></table></div></figure>


<p>It was very easy to do this, although aruba could use a man page for easier reference.  I had to jump into its source too many times to get reminded of the syntax of the steps it provides.  Aruba also strips out ANSI escape sequences, which made testing <code>hl</code> a bit tricky.  There appears to be an option to <em>prevent</em> this, but I couldn&#8217;t get it to work, so I just used Aruba&#8217;s internal API:</p>

<figure class='code'><figcaption><span>asserting highlighted output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span><span class="sr"> /^the word &quot;([^&quot;]*)&quot; should be highlighted in (.*$)$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">keyword</span><span class="p">,</span><span class="n">color</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># #color is provided by rainbow, which we&#39;ll talk about in a bit</span>
</span><span class='line'>  <span class="n">expected</span> <span class="o">=</span> <span class="n">keyword</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">color</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># assert_partial_output and all_stdout are provided by aruba</span>
</span><span class='line'>  <span class="n">assert_partial_output</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span><span class="n">all_stdout</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I still recommend aruba and cucumber, as it forces you to think about how users will use your app first, not how to implement it.  In fact, my initial implementation was a big hacky mess of stuff inside the <code>main</code> block.  Once the tests were in place, I refactored it to be a lot cleaner.</p>

<h2>Be Easy to Maintain</h2>

<p>As I just mentioned, I was able to use my tests to refactor my code.  As such, the main block of <code>hl</code> is pretty simple:</p>

<figure class='code'><figcaption><span>main block in hl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">main</span> <span class="k">do</span> <span class="o">|</span><span class="n">keyword</span><span class="p">,</span><span class="o">*</span><span class="n">filenames</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:regexp</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">Array</span><span class="p">(</span><span class="n">filenames</span><span class="p">)</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">keyword</span><span class="p">)</span>
</span><span class='line'>    <span class="n">keyword</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:regexp</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">exit_now!</span> <span class="s1">&#39;search term or --regexp/-p required&#39;</span> <span class="k">if</span> <span class="n">keyword</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">keyword</span> <span class="o">=</span> <span class="n">keyword</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>  <span class="n">highlighter</span> <span class="o">=</span> <span class="no">Hl</span><span class="o">::</span><span class="no">Highlighter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">highlighter</span><span class="o">.</span><span class="n">highlight</span><span class="p">(</span><span class="n">filenames</span><span class="p">,</span><span class="n">keyword</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the sort of logic you want in your <code>main</code> block:</p>

<ul>
<li>Handling the keyword-from-argument and keyword-from-command-line-option case</li>
<li>Simple error checking</li>
<li>Duping the keyword (since it comes in frozen)</li>
<li>Calling our <code>Highlighter</code> class to do the real work</li>
</ul>


<p>We defer all non-UI logic to the <code>Highlighter</code> class.  I decided to make each instance of the class able to highlight any files repeatedly based on a configuration, so the constructor takes in the formatting options, and the method <code>highlight</code> takes the list of filenames and the search term.</p>

<p>The actual highlighting is made possible via lots of list comprehension:</p>

<figure class='code'><figcaption><span>Learn you some list comprehensions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">files</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="o">|</span> <span class="n">_</span><span class="o">.</span><span class="n">readlines</span><span class="p">}</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="o">|</span> <span class="n">highlight_matches</span><span class="p">(</span><span class="n">regexp</span><span class="p">,</span><span class="n">_</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you aren&#8217;t comfortable with this use of chained calls, it can be very powerful.  What this does is:</p>

<ul>
<li>Map each file to an array of its contents as lines.  <code>[foo,bar]</code> becomes <code>[ ['first line of foo\n','second line of foo\n'],['first line of bar\n'],['second line of bar\n']]</code></li>
<li>Flatten that array of arrays to just one list of all lines of all files.  Our example array becomes: <code>[ 'first line of foo\n','second line of foo\n','first line of bar\n','second line of bar\n']</code></li>
<li>map those lines to the lines with the search term highlighted.  Supposing we wanted to highlight the word &#8220;line&#8221;, our array becomes: <code>[ 'first \e[33mline\e[0m of foo\n','second \e[33mline\e[0m of foo\n','first \e[33mline\e[0m of bar\n','second \e[33mline\e[0m of bar\n']</code></li>
<li>join them all together into one big string
<code>"first \e[33mline\e[0m of foo\nsecond \e[33mline\e[0m of foo\nfirst \e[33mline\e[0m of bar\nsecond \e[33mline\e[0m of bar\n"</code></li>
</ul>


<p>Granted, this approach will probably have trouble with extremely large input, but <code>hl</code> was designed to work with the output of <code>grep</code>, so hopefully we won&#8217;t have too much (I&#8217;ve already decided I need it <a href="https://github.com/davetron5000/hl/issues/1">to work with <code>tail</code></a> ).</p>

<h2>Breaking the rules</h2>

<p>Color and formatting <em>are not</em> typically associated with awesome command-line apps; too much of it makes an app hard to use with other apps.  But, the whole purpose of <code>hl</code> is to colorize output, so for that, I used <a href="https://github.com/sickill/rainbow">rainbow</a>, which is a pretty
simple enhancement to <code>String</code> that allows coloring and formatting.  We can see it in action in the <code>highlight_string</code> method of <code>Highlighter</code>:</p>

<figure class='code'><figcaption><span>highlight_string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">highlight_string</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="vi">@options</span><span class="o">[</span><span class="s1">&#39;color&#39;</span><span class="o">].</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">inverse</span> <span class="k">if</span> <span class="vi">@options</span><span class="o">[</span><span class="ss">:inverse</span><span class="o">]</span>
</span><span class='line'>  <span class="n">string</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">bright</span> <span class="k">if</span> <span class="vi">@options</span><span class="o">[</span><span class="ss">:bright</span><span class="o">]</span>
</span><span class='line'>  <span class="n">string</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">underline</span> <span class="k">if</span> <span class="vi">@options</span><span class="o">[</span><span class="ss">:underline</span><span class="o">]</span>
</span><span class='line'>  <span class="n">string</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each method called on <code>string</code> is a method provided by Rainbow.  These methods return a new string with the appropriate ANSI escape codes added.</p>

<h2>In Conclusion</h2>

<p>Hopefully, you&#8217;ve seen that it&#8217;s really <em>not that hard</em> to make an awesome command-line app.  I was able to write <code>hl</code> in just a few hours, using TDD and the end result is a highly polished, well-documented, easily installable and maintainable piece of software that will be a part of my command-line arsenal for quite a while.  You can do this, too.  There&#8217;s a lot more detail and in-depth explanations <a href="http://bit.ly/cli-hl-blog-post">in my book</a>, which you should buy right now :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides from my Talk on JRuby and Threads]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/03/23/slides-from-my-talk-on-jruby-and-threads.html"/>
    <updated>2012-03-23T11:49:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/03/23/slides-from-my-talk-on-jruby-and-threads</id>
    <content type="html"><![CDATA[<script src="http://speakerdeck.com/embed/4f6cca6eaa99e4002200aea3.js"></script>


<p><a href="https://github.com/davetron5000/jruby-and-threads-talk">Here&#8217;s a link to download</a> from my talk on JRuby and Threads.</p>

<p>If you just want the &#8220;exercises&#8221;, here they are:</p>

<!-- more -->


<h2>Echo Server</h2>

<ul>
<li>Listen on a port</li>
<li>Respond to each request in a new Thread</li>
<li><strong>Extra Credit</strong>: Record stats on requests in a shared data structure</li>
</ul>


<h2>Connection Pool</h2>

<ul>
<li>Allow N clients to access X shared instances of, say, Redis (where N > X)</li>
<li>Clients &#8220;check out&#8221; a connection and get exclusive access</li>
<li>Clients &#8220;check in&#8221; when done</li>
<li>Instances get re-used</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trailer for my Book]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/03/19/trailer-for-my-book.html"/>
    <updated>2012-03-19T08:14:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/03/19/trailer-for-my-book</id>
    <content type="html"><![CDATA[<p>The trailer for <a href="http://pragprog.com/titles/dccar">my book</a>, check it out:</p>

<iframe width="640" height="480" src="http://www.youtube.com/embed/cNkPSCCODdc" frameborder="0" allowfullscreen></iframe>


<p>It&#8217;s a nonsensical journey through the computer, ending on the command-line.  It&#8217;s got drama, special effects, and a stern
soundtrack :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something fun I'm working on]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/02/23/something-fun-im-working-on.html"/>
    <updated>2012-02-23T20:58:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/02/23/something-fun-im-working-on</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://distilleryimage9.instagram.com/ea3ca4185e8a11e180c9123138016265_7.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quote: Mocking and Dynamic Typing]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/02/22/quote-mocking-and-dynamic-typing.html"/>
    <updated>2012-02-22T09:15:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/02/22/quote-mocking-and-dynamic-typing</id>
    <content type="html"><![CDATA[<blockquote><p>When mocking and dynamic typing travel in the same cart, the riders believe nothing can stand in their way. Their movements become headlong - faster and faster and faster. They put aside all thoughts of obstacles and forget the precipice does not show itself to the man in a blind rush until it&#8217;s to late.</p><footer><strong>Old Bene Gesserit Proverb</strong> <cite>Paraphrased From <i>Dune</i></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Mountain Lion Does Not Concern Me]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/02/19/mountain-lion-does-not-concern-me.html"/>
    <updated>2012-02-19T12:09:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/02/19/mountain-lion-does-not-concern-me</id>
    <content type="html"><![CDATA[<p>Apple has just announced <a href="http://www.apple.com/macosx/mountain-lion/">Mountain Lion</a>, the next version of OS X, due out in the summer.  Although it&#8217;s more of an incremental upgrade than Lion was<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, one of the most interesting features is <a href="http://www.apple.com/macosx/mountain-lion/security.html">Gatekeeper</a>.  Gatekeeper, in brief, prevents unsigned code from running on OS X.  Although it can be disabled, it&#8217;s on by default, and many feel this is the beginning of the end for users having full control of their computers.  I feel the opposite: it&#8217;s <em>not</em> a slippery slope, and it&#8217;s actually a <em>great</em> feature.</p>

<!-- more -->


<p>With the release of the <a href="http://www.apple.com/mac/app-store/">Mac App Store</a>, it was clear that Apple wanted users managing third-party software much as they do on iOS devices: blessed apps vetted by Apple.  <a href="http://www.marco.org">Marco Arment</a> has written <a href="http://www.marco.org/2011/02/04/ode-to-the-app-review-team">in detail</a> about how this approval process isn&#8217;t that bad and that it&#8217;s a net gain for users:</p>

<blockquote><p>First and foremost, the review process has created a level of consumer confidence and risk-taking that has enabled the entire iOS app market to be far bigger and healthier than anyone expected. Average people — the same people who have been yelled at for decades for clicking on the wrong button on the wrong incomprehensible dialog box and messing up their computers — can (and do) confidently buy large quantities of inexpensive apps impulsively, without having to worry that any of them will “break” their iPhones or iPads, rip them off, destroy their data, or require them to embarrassingly visit the corporate IT department, the Geek Squad, or their computer-savvy relatives (us) for help. Part of this is due to the highly sandboxed architecture enforced by the OS, but a big part is the app review process.</p></blockquote>


<p>When Lion was released, there was a general feeling of fear amongst developers that, someday soon, the App Store would be the <em>only</em> way to get apps onto your Mac.  This would, in turn, destroy many useful apps that would just never make it through the review process (and, presumably, make development on a Mac much more difficult or impossible).  With what we know about Mountain Lion, it&#8217;s clear that this dystopian future is not what Apple has in mind.  Gatekeeper is the proof.</p>

<p><a href="http://www.daringfireball.net">John Gruber</a> sums Gatekeeper up nicely in his <a href="http://daringfireball.net/2012/02/mountain_lion">piece on Mountain Lion</a> (emphasis mine):</p>

<blockquote><p>It’s a system whereby developers can sign up for <strong>free-of-charge Apple developer IDs</strong> which they can then use to cryptographically sign their applications. If an app is found to be malware, Apple can revoke that developer’s certificate, rendering the app (along with any others from the same developer) inert on any Mac where it’s been installed. In effect, it offers all the security benefits of the App Store, except for the process of approving apps by Apple.</p></blockquote>


<p>Finally, the feature can be entirely disabled:</p>

<p><img class="left" src="http://images.apple.com/macosx/mountain-lion/images/security_settings.jpg" title="'Mountain Lion Security Preferences'" ></p>

<p>I think Apple would prefer &#8220;Mac App Store only&#8221; as the default.  Honestly, so would I.  I&#8217;d love to send my parents or sister a Mac that they simply <em>can&#8217;t fuck up</em>.  <em>Many</em> grey hairs on my head are attributable to the trouble my family has gotten into with their PCs.  Granted, it&#8217;s harder to get into this trouble with a Mac, but it&#8217;s still possible.  And, as the Mac starts to take over <a href="http://www.asymco.com/2012/01/16/apple-is-the-top-personal-computer-vendor/">more and more of the PC market</a>, it will increasingly become a target for malware.</p>

<p>I think it&#8217;s hard to argue that for &#8220;regular&#8221; users (and those of us doomed to support them), Gatekeeper is a net positive.</p>

<p>What about us developers?  Is this a win for us?  There&#8217;s certainly a few unknowns:</p>

<ul>
<li>How does software installed via &#8220;traditional&#8221; means interact with this system?  If I download and compile the latest version of Ruby, but have Gatekeeper on, will it work?</li>
<li>What about software written in a scripting language?  What if I <code>gem install</code> a Ruby command-line application (something I have a <a href="http://www.awesomecommandlineapps.com">vested interest in being able to do</a>), will it work?</li>
<li>Will the option to &#8220;allow applications downloaded from&hellip;anywhere&#8221; go away in a future version of OS X?</li>
</ul>


<p>It&#8217;s hard to predict the answers to these questions without knowing more about how Gatekeeper works.  I <em>do</em> think that the mere existence of Gatekeeper&#8217;s allowance of signed-but-not-from-the-App-Store-apps demonstrates Apple&#8217;s understanding that developers and &#8220;power users&#8221; are important to the platform.  Think about it: what&#8217;s in it for Apple to disallow unsigned applications completely?  What would Apple have to gain by making it difficult (or impossible) to write non-Mac software on a Mac?</p>

<p>Don&#8217;t forget, many iOS and Mac apps are backed by web services written using tools like Ruby on Rails, PHP, or Java.  If Apple were to make it difficult (or impossible) to write, say, a Rails app on a Mac, it would be much more difficult to write an iOS app; the developer would need a second machine to write the web service.  It just doesn&#8217;t make sense.</p>

<p>So, I think Gatekeeper is a win for average users, a win for geeks, and <em>not a concern</em> for developers.    As such, I&#8217;m in favor of it.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>I think Apple&#8217;s plan of updating OS X every year is a good one - more releases with smaller features is just a better way of doing things.  I also wonder if the price of OS X is going to drop even further, to say $9.99? <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Even More Clean Tests:Magic Values]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/02/16/even-more-clean-tests-magic-values.html"/>
    <updated>2012-02-16T18:50:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/02/16/even-more-clean-tests-magic-values</id>
    <content type="html"><![CDATA[<p>In the <a href="http://www.naildrivin5.com/blog/2012/01/08/make-tests-clean-and-clear-without-duplication.html">last</a> two <a href="http://www.naildrivin5.com/blog/2012/01/16/more-clean-tests-handling-mocks.html">posts</a> about &#8220;clean tests&#8221;, we talked about the structure of a test, how to eliminate duplication, and how to make intent clear when using mocks.  We left off with a question of <a href="http://en.wikipedia.org/wiki/Magic_number_(programming)">magic values</a>: Why do we seem to use them in our tests, when we <em>know</em> they are wrong in production code?  Let&#8217;s explore that and see how to eliminate their use in our tests without making the tests hard to understand.</p>

<!-- more -->


<p>In non-test code, pretty much <em>any</em> literal that isn&#8217;t 0, 1, -1, the empty string, <code>nil</code>/<code>null</code>, or some universal constant like 60 (number of seconds in a minute), is a <em>magic value</em>.  A naked literal just sitting out there with no context makes code hard to understand, and we usually whisk them away inside a constant or injected value.  Suppose we come across this code:</p>

<figure class='code'><figcaption><span>Horrible Magic Values</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">percentage</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">75</span>
</span><span class='line'>  <span class="n">show_graph</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">show_no_data</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want to know what <code>0.75</code> actually <em>means</em>.  If we&#8217;d used a constant, it would be clearer, like so:</p>

<figure class='code'><figcaption><span>No Magic, No Problems</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">percentage</span> <span class="o">&gt;</span> <span class="no">THRESHOLD_FOR_DATA_DISPLAY</span>
</span><span class='line'>  <span class="n">show_graph</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">show_no_data</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we know that we&#8217;re comparing our percentage against a threshold and not some arbitrary value.</p>

<p>Tests, on the other hand, require a lot of literals, because we tend to be setting up very specific conditions, and that&#8217;s much easier with an <em>example</em> of some input.  Here&#8217;s a test for our <code>Saluation</code> class that we&#8217;ve seen before:</p>

<figure class='code'><figcaption><span>Magic Values in a Test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_full_name</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;David&quot;</span><span class="p">,</span><span class="s2">&quot;Copeland&quot;</span><span class="p">,</span><span class="ss">:male</span><span class="p">)</span>
</span><span class='line'>  <span class="n">salutation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="n">greeting</span> <span class="o">=</span> <span class="n">salutation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="s2">&quot;Hello, David!&quot;</span><span class="p">,</span><span class="n">greeting</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have four magic values:</p>

<ul>
<li><code>"David"</code></li>
<li><code>"Copeland"</code></li>
<li><code>:male</code></li>
<li><code>"Hello, David!"</code></li>
</ul>


<p>Do these all need to be in there?  Which ones are actually relevant, and which are true magic values that we should eliminate?</p>

<p>You&#8217;ll recall that in the <a href="http://www.naildrivin5.com/blog/2012/01/08/make-tests-clean-and-clear-without-duplication.html">first post</a> on clean tests, we made this test clearer via <em>method extraction</em>, like so:</p>

<figure class='code'><figcaption><span>Clear test with methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_full_name</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">=</span> <span class="n">person_with_full_name</span><span class="p">(</span><span class="s2">&quot;David&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">salutation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="n">greeting</span> <span class="o">=</span> <span class="n">salutation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="s2">&quot;Hello, David!&quot;</span><span class="p">,</span><span class="n">greeting</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essentially, we&#8217;ve hidden the fact that the last name and gender don&#8217;t matter inside the <code>person_with_full_name</code> method.  Some developers would object to this, preferring to have each test method stand on its own, without chasing down lots of helpers.  This is a fair point, so let&#8217;s get rid of some irrelevant magic strings another way:</p>

<figure class='code'><figcaption><span>Clear test with no helpers or magic values</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_full_name</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;David&quot;</span><span class="p">,</span><span class="n">any_string</span><span class="p">,</span><span class="n">any_gender</span><span class="p">)</span>
</span><span class='line'>  <span class="n">salutation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="n">greeting</span> <span class="o">=</span> <span class="n">salutation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="s2">&quot;Hello, David!&quot;</span><span class="p">,</span><span class="n">greeting</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">any_string</span>
</span><span class='line'>  <span class="no">Faker</span><span class="o">::</span><span class="no">Lorum</span><span class="o">.</span><span class="n">words</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">any_gender</span>
</span><span class='line'>  <span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="ss">:female</span> <span class="p">:</span> <span class="ss">:male</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve still got helper methods (<code>any_string</code> and <code>any_gender</code>), but they&#8217;re tiny <em>and</em> they convey some information: the last name and the gender can be <em>anything</em>; they <em>don&#8217;t matter</em>.  If you aren&#8217;t familiar with <a href="http://faker.rubyforge.org/">faker</a>, it&#8217;s a handy gem for generating nonsense within certain parameters.  This is perfect for creating values that don&#8217;t matter.</p>

<p>Does &#8220;David&#8221; matter?  It matters more than the last name and gender, since it will show up in our greeting, but the first name could just as easily be &#8220;Mark&#8221; or &#8220;Mary&#8221;.  So, let&#8217;s eliminate this magic value as well:</p>

<figure class='code'><figcaption><span>Clear test with no magic values</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_full_name</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">first_name</span> <span class="o">=</span> <span class="n">any_string</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">any_string</span><span class="p">,</span><span class="n">any_gender</span><span class="p">)</span>
</span><span class='line'>  <span class="n">salutation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="n">greeting</span> <span class="o">=</span> <span class="n">salutation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2">!&quot;</span><span class="p">,</span><span class="n">greeting</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">any_string</span>
</span><span class='line'>  <span class="no">Faker</span><span class="o">::</span><span class="no">Lorum</span><span class="o">.</span><span class="n">words</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">any_gender</span>
</span><span class='line'>  <span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="ss">:female</span> <span class="p">:</span> <span class="ss">:male</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we&#8217;re talking!  Read the test, in English: &#8220;first name is any string, a person has that as their first name, with any string as their last and any gender as their gender.  Make a salutation for that person, and get the greetting.  The greeting should equal &#8216;Hello&#8217; plus the first name&#8221;.  We&#8217;ve come <em>very</em> close to encoding a specification of our <code>Salutation</code> class without using a special test framework <em>or</em> magic values, and the <em>entire</em> test is in the test method.</p>

<p>Just to hammer this home, lets port over the test that handles the case when you have no first name:</p>

<figure class='code'><figcaption><span>Could be clearer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_last_name_only_male</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Copeland&quot;</span><span class="p">,</span><span class="ss">:male</span><span class="p">)</span>
</span><span class='line'>  <span class="n">salutation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="n">greeting</span> <span class="o">=</span> <span class="n">salutation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="s2">&quot;Hello, Mr. Copeland!&quot;</span><span class="p">,</span><span class="n">greeting</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>:male</code> is <em>very</em> relevant, but <code>"Copeland"</code> doesn&#8217;t particularly matter:</p>

<figure class='code'><figcaption><span>Clear</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_last_name_only_male</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">last_name</span> <span class="o">=</span> <span class="n">any_string</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span><span class="n">last_name</span><span class="p">,</span><span class="ss">:male</span><span class="p">)</span>
</span><span class='line'>  <span class="n">salutation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="n">greeting</span> <span class="o">=</span> <span class="n">salutation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="s2">&quot;Hello, Mr. </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">!&quot;</span><span class="p">,</span><span class="n">greeting</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With syntax highlighing, the relevant parts of the test literally <em>jump</em> out at you.  <code>:male</code> and <code>nil</code> are the <em>only</em> literals in this test, and they are therefore important.</p>

<p>By removing as many magic values as possible, and replacing them with the <em>most general possible value</em> to satisfy the test, we can make it crystal clear what&#8217;s going on in each test.</p>

<p>Can we carry this concept further?  Consider the variable <code>person</code> in the last test.  Is this variable relevant?  Somewhat.  It is as relevant as <code>salutation</code> or <code>greeting</code>?  No.  <code>salutation</code> is the object under test, and <code>greeting</code> is the value we&#8217;re testing.  Further, <code>last_name</code> is a value that&#8217;s part of the expected result.  To make <em>this</em> distinction clear, we can take advantage of Ruby&#8217;s ability to define fields on the fly:</p>

<figure class='code'><figcaption><span>Highlighting important values by promoting them to fields</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_last_name_only_male</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">any_string</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span><span class="n">last_name</span><span class="p">,</span><span class="ss">:male</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@salutation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="vi">@greeting</span> <span class="o">=</span> <span class="vi">@salutation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="s2">&quot;Hello, Mr. </span><span class="si">#{</span><span class="vi">@last_name</span><span class="si">}</span><span class="s2">!&quot;</span><span class="p">,</span><span class="vi">@greeting</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This might seem superfluous in such a small test, but in a larger, more complex test (especially one dealing with a lot of mocks), this can be really helpful.  You know that so-called &#8220;at&#8221; variables are important, and their values are meaningful across the &#8220;Given/When/Then&#8221; of the test, however local variables or short-lived and can be skimmed over when first understanding the test.</p>

<h2>Setup/Teardown</h2>

<p>Let&#8217;s have a brief word on setup and teardown methods.  I&#8217;ve seen a lot of tests use the <code>setup</code> method to set up various mock expectations, or do other test-specific setup.  A problem arises when you need to add a test that doesn&#8217;t require that setup, or perhaps requires some additional setup.  This causes two problems:</p>

<ul>
<li>You must now piece together what the &#8220;Givens&#8221; of a particular test are</li>
<li>You are setting up conditions that aren&#8217;t relevant to all tests</li>
</ul>


<p>Using nested contexts in tools like <a href="http://rspec.info/">RSpec</a> exacerbates this greatly, and it&#8217;s not uncommon to have setup code littered
throughout the file.</p>

<p>I would suggest you keep all test-specific setup out of the <code>setup</code> method entirely.  Ideally, you won&#8217;t even have one.  Occasionally, you&#8217;ll need to set up something around global variables that can&#8217;t be easily injected into your code.  More commonly, you&#8217;ll have a <code>teardown</code> method to make sure the next test has a clean slate (e.g. clean up temp files, restore configuration to default, etc.).  These are OK.  What you want to avoid is having any &#8220;Givens&#8221; or &#8220;Thens&#8221; inside these methods.</p>

<h2>Conclusion</h2>

<p>This brings us to the end of my whirlwind tour of clean tests.  The overall goal is to prioritize <em>comprehensibility</em> of tests without sacrificing too much ease of creation.  Your tests are going to be read and modified a <em>lot</em> more than written.  In summary:</p>

<ul>
<li>Structure your tests in three parts: Given (setup), When (action), Then (assertions).</li>
<li>Mock expectations <em>are assertions</em>, so put them in the &#8220;Then&#8221; block, and repeat the Given/When/Then if you need to due to your mocking framework.</li>
<li>Don&#8217;t duplicate test code that&#8217;s the same <em>by design</em>, but <em>do</em> duplicate it if it&#8217;s the same by <em>happenstance</em>.</li>
<li>Values important to a test should be variables.</li>
<li>Values irrelevant to a test should be hidden in &#8220;any&#8221; style methods.</li>
<li>If these rules muddy your tests, break them.</li>
</ul>


<h2>Afterword</h2>

<p>I&#8217;ve been working this way for several months, and developed the <a href="https://github.com/davetron5000/clean_test">clean_test</a> gem to help.  I&#8217;ll introduce that in a future blog post, but look at some of the <a href="https://github.com/davetron5000/methadone/blob/master/test/test_sh.rb">tests</a> written using these techniques.  I tend to prefer knowledge be stored digitally, and not in my brain, so these techniques really help.  Try writing your next set of tests like this and see what you think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid the Kingdom of Nouns with Procs]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/01/30/avoid-kingdom-of-nouns-with-procs.html"/>
    <updated>2012-01-30T09:00:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/01/30/avoid-kingdom-of-nouns-with-procs</id>
    <content type="html"><![CDATA[<p>Hopefully you&#8217;ve read Steve Yegge&#8217;s excellent <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">kingdom of nouns</a> essay, in which he bemoans a pattern that exists in a lot of Java-base systems.  The tell-tale sign is a class named <code>ThingDoer</code> with a single method <code>doThing()</code>.  Systems like this don&#8217;t arise simply because Java is the way it is, but when you follow <a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a> principles (particularly the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">single responsibility</a> and <a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency inversion</a> principles), your code ends up with lots of small classes that do one thing only.</p>

<p>In Java, you are basically stuck with this, but in Ruby (or any OO language that supports closures/blocks/functions), we can fight this by using Procs instead of classes.</p>

<!-- more -->


<h2>SOLIDifying some code</h2>

<p>First, let&#8217;s take some code that needs refactoring and see what it looks like with classes.  We&#8217;ll look at a very simple base class for handling events in a system based on <a href="https://github.com/defunkt/resque">Resque</a>.  Our base class allows us to do two things that a generic Resque event can&#8217;t: retry events later, and queue arbitrary events.  Let&#8217;s have a look at the code<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>:</p>

<figure class='code'><figcaption><span>Base class for handle events</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Event</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;subclass must implement&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">queue_event</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enque</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">({</span> <span class="ss">:queued_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="p">}))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">requeue_later</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:attempt_number</span> <span class="o">=&gt;</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_params</span><span class="o">[</span><span class="ss">:attempt_number</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Requeued too many times&quot;</span> <span class="k">if</span> <span class="n">new_params</span><span class="o">[</span><span class="ss">:attempt_number</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">sleep</span><span class="p">(</span><span class="n">new_params</span><span class="o">[</span><span class="ss">:attempt_number</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">queue_event</span><span class="p">(</span><span class="n">class</span><span class="p">,</span><span class="n">new_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We might use this like so:</p>

<figure class='code'><figcaption><span>Simple event class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RenameEvent</span> <span class="o">&lt;</span> <span class="no">Event</span><span class="o">::</span><span class="n">base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:person_id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">requeue_later</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>      <span class="n">person</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our base class is doing too much.  It&#8217;s OK for it to provide the queuing and re-queuing functionality, but it shouldn&#8217;t be implemented there.  Further, there&#8217;s aspects of <em>how</em> the functionality is implemented that we might want to be able to change in our subclasses.  This is the perfect application for dependency inversion.</p>

<p>In our naive approach, we&#8217;ll make one class for each function we have, namely:</p>

<ul>
<li>A class to queue events onto Resque, adding in the <code>queued_at</code> timestamp</li>
<li>A class to orchestrate requeuing events, failing after a certain number of attempts</li>
<li>A class to sleep and perform the actual requeuing</li>
<li>Our base class to provide access to these features</li>
</ul>


<p>Let&#8217;s have a look:</p>

<figure class='code'><figcaption><span>Queuer class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Queuer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">queue</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enque</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">({</span> <span class="ss">:queued_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="p">}))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Requeuer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Requeuer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">requeue_strategy</span><span class="p">,</span><span class="n">max_attempts</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@requeue_strategy</span> <span class="o">=</span> <span class="n">requeue_strategy</span>
</span><span class='line'>    <span class="vi">@max_attempts</span> <span class="o">=</span> <span class="n">max_attempts</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">requeue</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:attempt_number</span> <span class="o">=&gt;</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_params</span><span class="o">[</span><span class="ss">:attempt_number</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Requeued too many times&quot;</span> <span class="k">if</span> <span class="n">new_params</span><span class="o">[</span><span class="ss">:attempt_number</span><span class="o">]</span> <span class="o">&gt;</span> <span class="vi">@max_attempts</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@requeue_strategy</span><span class="o">.</span><span class="n">requeue</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">new_params</span><span class="o">[</span><span class="ss">:attempt_number</span><span class="o">]</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>RequeueStrategy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RequeueStrategy</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">queuer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@queuer</span> <span class="o">=</span> <span class="n">queuer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">requeue</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">attempt_number</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">sleep</span><span class="p">(</span><span class="n">attempt_number</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@queuer</span><span class="o">.</span><span class="n">queue</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whew!  Now, to use all this, our base class becomes:</p>

<figure class='code'><figcaption><span>A now SOLID base class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Event</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">requeuer</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@requeuer</span> <span class="o">=</span> <span class="n">requeuer</span> <span class="o">||</span> <span class="no">Requeuer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">RequeueStrategy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Queuer</span><span class="o">.</span><span class="n">new</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;subclass must implement&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">requeue_later</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@requeuer</span><span class="o">.</span><span class="n">requeue</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">,</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our base class is a <em>lot</em> cleaner, and we can now test it more easily without <a href="http://www.naildrivin5.com/blog/2012/01/16/more-clean-tests-handling-mocks.html">mocks making things difficult</a>.</p>

<p>But, we&#8217;re firmly in the Kingdom of Nouns, e.g. <code>queuer.queue()</code>.  We&#8217;d like to keep our code nicely designed, but get rid of the superfluous naming and structure around the tiny bits of code we have.  Let&#8217;s use Procs.</p>

<h2>Procs instead of classes</h2>

<p>The easiest class to convert to a <code>Proc</code> is going to be <code>Queuer</code>, since it has no real dependencies and is just a wrapper around a very simple line of code:</p>

<figure class='code'><figcaption><span>Base class using a Proc instead of Queuer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Event</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">QueueEvent</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">klass</span><span class="p">,</span><span class="n">params</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enque</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">({</span> <span class="ss">:queued_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="p">}))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">requeuer</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@requeuer</span> <span class="o">=</span> <span class="n">requeuer</span> <span class="o">||</span> <span class="no">Requeuer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">RequeueStrategy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">QueueEvent</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;subclass must implement&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">requeue_later</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@requeuer</span><span class="o">.</span><span class="n">requeue</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">,</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>RequeueStrategy</code> now becomes:</p>

<figure class='code'><figcaption><span>RequeueStrategy using a Proc instead of a class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RequeueStrategy</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">queue_event</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@queue_event</span> <span class="o">=</span> <span class="n">queue_event</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">requeue</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">attempt_number</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">sleep</span><span class="p">(</span><span class="n">attempt_number</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@queue_event</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we&#8217;re using the name <code>queue_event</code> instead of <code>queuer</code>.  A Proc isn&#8217;t, conceptually, a thing, but an action that we&#8217;re passing around, so we name it as such.</p>

<p>Of course, <code>RequeueStrategy</code> itself isn&#8217;t much code; can we convert that?  The tricky part is that <code>RequeueStrategy</code> requires the ability to queue events and thus needs a <code>Queuer</code>.  We pass this in the constructor, which a <code>Proc</code> doesn&#8217;t really have (at least conceptually).  Instead, we&#8217;ll pass the queueing code in as a parameter to our newly re-made <code>SleepThenRequeue</code> <code>Proc</code>, which is now part of our base class.</p>

<figure class='code'><figcaption><span>Base class with RequeueStrategy now a Proc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Event</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">SleepThenRequeue</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">queue_event</span><span class="p">,</span><span class="n">klass</span><span class="p">,</span><span class="n">attempt_num</span><span class="p">,</span><span class="n">options</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">sleep</span><span class="p">(</span><span class="n">attempt_number</span><span class="p">)</span>
</span><span class='line'>    <span class="n">queue_event</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">QueueEvent</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">klass</span><span class="p">,</span><span class="n">params</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enque</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">({</span> <span class="ss">:queued_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="p">}))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">requeuer</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@requeuer</span> <span class="o">=</span> <span class="n">requeuer</span> <span class="o">||</span> <span class="no">Requeuer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">QueueEvent</span><span class="p">,</span><span class="no">SleepThenRequeue</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;subclass must implement&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">requeue_later</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@requeuer</span><span class="o">.</span><span class="n">requeue</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">,</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now need to update <code>Requeuer</code> to hold onto the <code>QueueEvent</code> <code>Proc</code> so that it can pass it to the <code>SleepThenRequeue</code> <code>Proc</code>:</p>

<figure class='code'><figcaption><span>Requeuer updated</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Requeuer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">queue_event</span><span class="p">,</span><span class="n">requeue_event</span><span class="p">,</span><span class="n">max_attempts</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@queue_event</span> <span class="o">=</span> <span class="n">queue_event</span>
</span><span class='line'>    <span class="vi">@requeue_event</span> <span class="o">=</span> <span class="n">requeue_event</span>
</span><span class='line'>    <span class="vi">@max_attempts</span> <span class="o">=</span> <span class="n">max_attempts</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">requeue</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:attempt_number</span> <span class="o">=&gt;</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_params</span><span class="o">[</span><span class="ss">:attempt_number</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Requeued too many times&quot;</span> <span class="k">if</span> <span class="n">new_params</span><span class="o">[</span><span class="ss">:attempt_number</span><span class="o">]</span> <span class="o">&gt;</span> <span class="vi">@max_attempts</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@requeue_event</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="vi">@queue_event</span><span class="p">,</span><span class="n">klass</span><span class="p">,</span><span class="n">new_params</span><span class="o">[</span><span class="ss">:attempt_number</span><span class="o">]</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, our system has all the flexbility, testability, and comprehensibility that we get from applying SOLID principles, but we don&#8217;t have any of the baggage and boilerplate of making actual classes that are mere wrappers for simple functionality.</p>

<h2>Taking Advantage</h2>

<p>Let&#8217;s see how this works be implementing a second requeuing strategy.  Suppose a subclass wants to have retried events go onto a different queue, instead of sleeping and re-queuing.  To enable this, we first make our base class a bit more configurable by introducing the method <code>self.requeue_strategy</code>, which returns a <code>Proc</code>.  The base class&#8217; implementation will simply return <code>SleepThenRequeue</code>.</p>

<figure class='code'><figcaption><span>Base class with multiple requeueing strategies</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Event</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">QueueEvent</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">klass</span><span class="p">,</span><span class="n">params</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enque</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">({</span> <span class="ss">:queued_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="p">}))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">SleepThenRequeue</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">queue_event</span><span class="p">,</span><span class="n">klass</span><span class="p">,</span><span class="n">attempt_num</span><span class="p">,</span><span class="n">options</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">sleep</span><span class="p">(</span><span class="n">attempt_number</span><span class="p">)</span>
</span><span class='line'>    <span class="n">queue_event</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">requeuer</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@requeuer</span> <span class="o">=</span> <span class="n">requeuer</span> <span class="o">||</span> <span class="no">Requeuer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">QueueEvent</span><span class="p">,</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">requeue_strategy</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;subclass must implement&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">requeue_strategy</span>
</span><span class='line'>    <span class="no">SleepThenRequeue</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">requeue_later</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@requeuer</span><span class="o">.</span><span class="n">requeue</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">,</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, our subclass can return something else, but it <em>won&#8217;t</em> have to make an entire class to do so:</p>

<figure class='code'><figcaption><span>Event that uses a different requeue strategy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SomeEvent</span> <span class="o">&lt;</span> <span class="no">Event</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'><span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">requeue_strategy</span>
</span><span class='line'>    <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">queue_event</span><span class="p">,</span><span class="n">klass</span><span class="p">,</span><span class="n">attempt_num</span><span class="p">,</span><span class="n">options</span><span class="o">|</span>
</span><span class='line'>      <span class="n">queue_event</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span><span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:queue</span> <span class="o">=&gt;</span> <span class="s1">&#39;scheduled&#39;</span><span class="p">,</span>
</span><span class='line'>                                           <span class="ss">:for</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="n">attempt_num</span><span class="o">.</span><span class="n">minutes</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we&#8217;re not constrained by Procs; after all a <code>Proc</code> is just a structural type for an object that reponds to <code>call</code>.  If
we needed some really complex requeuing, we could make a class:</p>

<figure class='code'><figcaption><span>Using a class if we need to</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ComplexRequeueingStrategy</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">queue_event</span><span class="p">,</span><span class="n">klass</span><span class="p">,</span><span class="n">attempt_num</span><span class="p">,</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Do whatever</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This results in a much more flexible system that keeps ceremony, boilerplate, and noise to a minimum; the majority of our code is
the &#8220;business logic&#8221; or &#8220;necessary complexity&#8221;.</p>

<h2>Conclusions</h2>

<p>Of course, we can take this too far.  Suppose we made <code>Requeuer</code> into a <code>Proc</code>.  It would start getting cumbersome, since it has so many dependent objects to manage; a class is actually helpful here<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>Just because Ruby is object-oriented doesn&#8217;t mean that every bit of functionality has to live inside a method of a class.  A <code>Proc</code> is tailor-made to hold functionality and pass it around, so don&#8217;t be afraid to use it if the situation warrants.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>We have this awkward <code>self.process</code> because Resque calls a class method; we just create an instance and deal with that, as it&#8217;s easier to test and implement as a normal class <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>In a more functional-oriented approach, this can be solved via <a href="http://en.wikipedia.org/wiki/Currying">currying</a>.  Accomplishing this cleanly in Ruby is an exercise for the reader. <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Clean Tests: Handling Mocks &amp; Block-based asserts]]></title>
    <link href="http://www.naildrivin5.com/blog/2012/01/16/more-clean-tests-handling-mocks.html"/>
    <updated>2012-01-16T11:58:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2012/01/16/more-clean-tests-handling-mocks</id>
    <content type="html"><![CDATA[<p>In a <a href="http://www.naildrivin5.com/blog/2012/01/08/make-tests-clean-and-clear-without-duplication.html">previous post</a>, I talked
about the overall structure of a test and how that was important to understand the test itself.  A brief review:</p>

<ul>
<li><em>Given</em> - Establish the conditions under which the test will run</li>
<li><em>When</em> - Run the code under test</li>
<li><em>Then</em> - assert that the code did what you expect</li>
</ul>


<p>This structure becomes problematic when using either mock objects or block-based asserts.</p>

<!-- more -->


<h2>The Trouble with Mocks</h2>

<p>When using <a href="http://en.wikipedia.org/wiki/Mock_object">mock objects</a> in a test, you typically use a
mocking framework (like <a href="http://mocha.rubyforge.org/">mocha</a>) to modify the behavior of objects the class-under-test collaborates with.
You often test that the class-under-test made certain calls to its collaborators.  Let&#8217;s look at an example.</p>

<p>Suppose we have an existing system and we wish to start recording some statistics, such as the number of times a method is called
or how long a method takes to run.  We&#8217;ve created a class, <code>Statistics</code>, that has some class methods on it to do the recording:</p>

<figure class='code'><figcaption><span>Statistics class outline</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Statistics</span>
</span><span class='line'>  <span class="c1"># Add one to stat_name</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">count</span><span class="p">(</span><span class="n">stat_name</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want to start using this class in our <code>Salutation</code> class to keep track of the number of times we&#8217;re calling <code>#greeting</code>.
In order to add this in, we need to test that <code>Salutation#greeting</code> is calling <code>Statistics.count</code>.  While we could set up a fake
statistics server and examine it during our test, it&#8217;s more straightforward to use mocks.</p>

<figure class='code'><figcaption><span>Testing the use of Statistics</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SalutationTest</span> <span class="o">&lt;&lt;</span> <span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_that_we_log_statistics</span>
</span><span class='line'>    <span class="n">saluation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;David&#39;</span><span class="p">,</span><span class="s1">&#39;Copeland&#39;</span><span class="p">,</span><span class="ss">:male</span><span class="p">))</span>
</span><span class='line'>    <span class="no">Statistics</span><span class="o">.</span><span class="n">expects</span><span class="p">(</span><span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s1">&#39;saluation.greeting.count&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">saluation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What will happen is, if we don&#8217;t call <code>Statistics.count("saluation.greeting.count")</code> in the <code>Salutation</code> class, this test will
fail.  That&#8217;s what a mocking framework like mocha does for us.</p>

<p>Of course, there&#8217;s something odd about our test.  There&#8217;s no call to any sort of <code>assert</code> method.  The Given/When/Then is very
unclear.  For a real-world test that requires a lot more setup, it can be even more difficult to see what&#8217;s actually being
tested.  Essentially, the &#8220;Given/When/Then&#8221; is &#8220;out of order&#8221;:</p>

<figure class='code'><figcaption><span>&#8216;Then&#8217; and &#8216;When&#8217; inverted</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SalutationTest</span> <span class="o">&lt;&lt;</span> <span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_that_we_log_statistics</span>
</span><span class='line'>    <span class="c1"># Given</span>
</span><span class='line'>    <span class="n">saluation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;David&#39;</span><span class="p">,</span><span class="s1">&#39;Copeland&#39;</span><span class="p">,</span><span class="ss">:male</span><span class="p">))</span>
</span><span class='line'>    <span class="c1"># Then</span>
</span><span class='line'>    <span class="no">Statistics</span><span class="o">.</span><span class="n">expects</span><span class="p">(</span><span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s1">&#39;saluation.greeting.count&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># When</span>
</span><span class='line'>    <span class="n">saluation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Making our Intent Clear</h2>

<p>We&#8217;d like to keep our test method in a canonical structure, or at least have some part of it follow the Given/When/Then
structure.  Unfortunately, our &#8220;Then&#8221;, the mock expectations, simply <em>have</em> to occur <em>before</em> the &#8220;When&#8221;.  I think
we can make it clearer, so let&#8217;s add a bit of code to help.</p>

<p>First, we&#8217;ll create a method named <code>when_the_test_runs_then</code> to clearly indicate that our expectations
are part of our &#8220;Then&#8221;, and that they are going to be checked when the test runs, which happens later.  We&#8217;ll also add a no-op
method, <code>assert_mocks_were_called</code> that will allow our test to always have an assert and provide us with a way to be explicit
about what&#8217;s being asserted.  Although this &#8220;assert&#8221; method doesn&#8217;t do anything, it allows use to distinguish between &#8220;this test
passes when the mocks are called as expected&#8221; from &#8220;I forgot to actually test for something&#8221;.</p>

<figure class='code'><figcaption><span>&#8216;Then&#8217; and &#8216;When&#8217; inverted</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SalutationTest</span> <span class="o">&lt;&lt;</span> <span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_that_we_log_statistics</span>
</span><span class='line'>    <span class="n">when_the_test_runs_then</span> <span class="p">{</span>
</span><span class='line'>      <span class="no">Statistics</span><span class="o">.</span><span class="n">expects</span><span class="p">(</span><span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s1">&#39;saluation.greeting.count&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Given</span>
</span><span class='line'>    <span class="n">saluation</span> <span class="o">=</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;David&#39;</span><span class="p">,</span><span class="s1">&#39;Copeland&#39;</span><span class="p">,</span><span class="ss">:male</span><span class="p">))</span>
</span><span class='line'>    <span class="c1"># When</span>
</span><span class='line'>    <span class="n">saluation</span><span class="o">.</span><span class="n">greeting</span>
</span><span class='line'>    <span class="c1"># Then</span>
</span><span class='line'>    <span class="n">assert_mocks_were_called</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">when_the_test_runs_then</span><span class="p">;</span> <span class="k">yield</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assert_mocks_were_called</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve still deviated from our canonical structure, but the test <em>reads</em> better: &#8220;When the test runs then expect this method to be
called; now let&#8217;s run the test&#8221;</p>

<p>Of course, we&#8217;ve just taken our first step out of &#8220;plain old Ruby&#8221; and created framework code.  This is the price you pay for
using mocks; testing with mocks complicate our tests.   By using some lightweight &#8220;control structure&#8221; helper methods, we can at
least make the intent clear.</p>

<h2>Block-Based Asserts Disrupt, too</h2>

<p>There&#8217;s another pattern we see in tests that disrupts the structure in much the same way that the use of mocks does.  That
disruption is block-based asserts, the most common of which is <code>assert_raises</code>.  For example, suppose we&#8217;re testing that our
<code>Saluation</code> class requires a non-<code>nil</code> <code>Person</code> in its constructor.  We could test that like so:</p>

<figure class='code'><figcaption><span>Testing that code raises an Exception</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_that_constructor_requires_a_person</span>
</span><span class='line'>  <span class="n">assert_raises</span> <span class="no">ArgumentError</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test is weird for two reasons: the first is that the &#8220;Given&#8221; is implicit.  The second is that the &#8220;Then&#8221; comes before the
&#8220;When&#8221;:</p>

<figure class='code'><figcaption><span>The Given/When/Then of our block-based assertion test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_that_constructor_requires_a_person</span>
</span><span class='line'>  <span class="c1"># Given - we are going to use a nil Person</span>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_raises</span> <span class="no">ArgumentError</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># When</span>
</span><span class='line'>    <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can clean this up by creating a variable for our <code>nil</code> <code>Person</code> and putting our &#8220;Then&#8221; code inside a block, which we then pass
to <code>assert_raises</code>:</p>

<figure class='code'><figcaption><span>More clear test with block-based assertions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_that_constructor_requires_a_person</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">nil_person</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="no">Salutation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">nil_person</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_raises</span><span class="p">(</span><span class="no">ArgumentError</span><span class="p">,</span><span class="o">&amp;</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve had to jump through a slightly awkward hoop of putting the code-under-test in a lambda, but now things are in a consistent
structure.  This example might seem a bit too simplisitc.  What about another popular block-based assertion, <code>assert_difference</code>?
It&#8217;s commonly used in Rails apps to check that a certain number of records were written to the database.  While I think that this
assertion is generally not needed, it is commonly used.<br/>
Here&#8217;s an example where we suppose that an <code>after_save</code> hook is memoizing a
derived field for us.</p>

<figure class='code'><figcaption><span>Complex test using assert_difference</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">test</span> <span class="s2">&quot;we can save and our after-save hook runs, generating the full_name attribute&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">first_name</span> <span class="o">=</span> <span class="s1">&#39;David&#39;</span>
</span><span class='line'>  <span class="n">last_name</span> <span class="o">=</span> <span class="s1">&#39;Copeland&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_difference</span><span class="p">(</span><span class="s1">&#39;Person.count&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># When</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:first_name</span> <span class="o">=&gt;</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="o">=&gt;</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Then</span>
</span><span class='line'>    <span class="n">assert</span> <span class="s1">&#39;David Copeland&#39;</span><span class="p">,</span><span class="n">person</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Now</em> the structure is very strange.  If we try to apply our <code>lambda</code> solution above, it&#8217;s still a bit odd:</p>

<figure class='code'><figcaption><span>Applying a lambda to our Rails test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">test</span> <span class="s2">&quot;we can save and our after-save hook runs, generating the full_name attribute&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">first_name</span> <span class="o">=</span> <span class="s1">&#39;David&#39;</span>
</span><span class='line'>  <span class="n">last_name</span> <span class="o">=</span> <span class="s1">&#39;Copeland&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:first_name</span> <span class="o">=&gt;</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="o">=&gt;</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Then</span>
</span><span class='line'>    <span class="n">assert</span> <span class="s1">&#39;David Copeland&#39;</span><span class="p">,</span><span class="n">person</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_difference</span><span class="p">(</span><span class="s1">&#39;Person.count&#39;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yikes.  This is arguably worse.  Since only one line of code inside our &#8220;When&#8221; block is really affecting the condition that
<code>assert_difference</code> tests for, we can take advantage of Ruby&#8217;s ability to create instance variables on-demand and pass
the person outside of the <code>assert_difference</code> block:</p>

<figure class='code'><figcaption><span>Canonically-structured Rails test using assert_difference</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">test</span> <span class="s2">&quot;we can save and our after-save hook runs, generating the full_name attribute&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Given</span>
</span><span class='line'>  <span class="n">first_name</span> <span class="o">=</span> <span class="s1">&#39;David&#39;</span>
</span><span class='line'>  <span class="n">last_name</span> <span class="o">=</span> <span class="s1">&#39;Copeland&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># When</span>
</span><span class='line'>  <span class="n">create_person</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span>
</span><span class='line'>    <span class="vi">@person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:first_name</span> <span class="o">=&gt;</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="o">=&gt;</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Then</span>
</span><span class='line'>  <span class="n">assert_difference</span><span class="p">(</span><span class="s1">&#39;Person.count&#39;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">create_person</span><span class="p">)</span>
</span><span class='line'>  <span class="n">assert</span> <span class="s1">&#39;David Copeland&#39;</span><span class="p">,</span><span class="vi">@person</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s much better; we can now clearly see the setup, the code being tested, and all the assertions together.</p>

<p>It may seem slightly unusual, but by working to keep all your tests structured around Given/When/Then, you will find them
readable weeks and months later, and others will be clearly able to see their intent.</p>

<h2>Next</h2>

<p>We still have a fair way to go to get our tests really clean and clear.  For example, do we need to have those <code>#Given</code>, <code>#When</code>,
and <code>#Then</code> comments
everywhere?  I <a href="http://www.naildrivin5.com/blog/2012/01/11/the-war-on-comments.html">think comments are powerful</a>, but having the same group of comments everywhere
feels like repetition we can eliminate.
Another issue is the use of &#8220;magic values&#8221;, or literals, in our test code.  In the test above, we create a male person with the
name &#8220;David Copeland&#8221;.  Is any of this relevant to the test?  If not, why is it there?</p>

<p>We&#8217;ll deal with these issues in the next post.</p>
]]></content>
  </entry>
  
</feed>
