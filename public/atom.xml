<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Naildrivin' &#10106;]]></title>
  <link href="http://www.naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://www.naildrivin5.com/"/>
  <updated>2013-12-20T08:59:40-05:00</updated>
  <id>http://www.naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[&dagger; Presenters: Delegation vs Just Making a Struct]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/12/20/presenters-delegation-vs-just-making-a-struct.html"/>
    <updated>2013-12-20T08:57:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/12/20/presenters-delegation-vs-just-making-a-struct</id>
    <content type="html"><![CDATA[<p>I posted <a href="http://technology.stitchfix.com/blog/2013/12/20/presenters-delegation-vs-structs/">another blog entry</a> at the Stitch Fix tech blog, this one on using simple structs instead of delegation for adapting your
data for web views:</p>

<blockquote><p>This is another way of saying that we get better, simpler code, without almost the same effort, if we just create a basic class instead of using delegation.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; Startup Engineering Team Super Powers]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/12/10/startup-engineering-team-super-powers.html"/>
    <updated>2013-12-10T11:31:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/12/10/startup-engineering-team-super-powers</id>
    <content type="html"><![CDATA[<p>New post by yours truly on the <a href="http://technology.stitchfix.com/blog">Stitch Fix Tech Blog</a> about some handy abilities and skills a start-up tech team needs to succeed: <a href="http://technology.stitchfix.com/blog/2013/12/10/startup-engineering-team-super-powers/">Startup Engineering Team Super Powers</a>:</p>

<blockquote><p>So far, we’ve been able to avoid creating a single monolithic application, and have been consistently delivering and deploying solutions to our users. I believe this is because we’ve developed a set of “super powers” which have been extremely helpful, and I believe these powers will keep our team and technology healthy for years to come.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org Charts and Diff Production]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/12/03/org-charts-and-diff-production.html"/>
    <updated>2013-12-03T08:47:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/12/03/org-charts-and-diff-production</id>
    <content type="html"><![CDATA[<p>Square&#8217;s <a href="https://twitter.com/jackdanger/">@jackdanger</a> wrote a great post on his blog titled &#8221;<a href="http://6brand.com/the-upside-down-org-chart.html">The Upside Down Org Chart</a>.&#8221; It&#8217;s a great read on improving how reasonably-sized companies are structured.  His use of a tree that expands upwards, showing how management supports subordination, is genius.  It visually explains the role of management:</p>

<blockquote><p>For a tech company to describe their structure this way requires some humility from the leadership. It requires accepting that senior positions must be evaluated based on the support given to individuals on the team rather than the support given to the CEO or executives. But it makes the structure one in which nothing is extracted from the laborers – indeed it provides help that an individual could not find working alone.</p></blockquote>


<p>His blog post&#8217;s description of traditional top-down management structures brought back memories of teams I&#8217;ve been on that, despite having favorable org charts, were unpleasant.  The problem was that I was treated as (and acted like) a producer of <a href="http://en.wikipedia.org/wiki/Diff">diffs</a>, rather than a problem-solver.</p>

<!-- more -->


<p>Jack&#8217;s post is, in part, a reaction to the typical strategies people are given for navigating a hierarchical corporate structure.
We&#8217;re often told to &#8220;manage up&#8221; or &#8220;make your boss look good&#8221;.  In the context of a large, dysfunctional, bureaucratic
organization, it can feel almost sickening to use these principles to drive your work.  Jack sums it up well:</p>

<blockquote><p>Nobody wants their work to be compromised by constantly having to &#8220;manage up&#8221; and certainly nobody wants to hand the benefits of their work to somebody else.</p></blockquote>


<p>It&#8217;s easy to cast the boss/direct-report relationship in an adversarial light, especially in a large company where it can be
difficult to understand the priorities of everyone involved.  In this scenario, &#8220;managing up&#8221; is akin to brown-nosing, and
&#8220;making your boss look good&#8221; sounds like giving credit to someone who didn&#8217;t deserve it.</p>

<p>Personally, I don&#8217;t see these techniques as inherently bad.  In a well-run company, the job of the managers is to make sure each
employee is coordinated toward the common goals of whatever it is the company does.  The problem is that, as &#8220;leaf nodes&#8221;,
developers are often treated as widgets that ingest requirements and produce diffs. &#8220;Managing up&#8221; is about producing more diffs
faster, and making sure your boss knows about it.</p>

<p>For me, &#8220;managing up&#8221; is more about making sure you are solving the problems your boss has been tasked with getting your team to
solve.  Hopefully, these are the right problems to be solving.  The only way to find out is to become more than just a diff-producer or ticket-taker, but a true partner with your manager in collectively solving problems together.</p>

<h2>Producing Diffs</h2>

<p>As developers, we love to talk how to produce better diffs (e.g. design patterns, coding techniques, editors, tools, frameworks, etc.).  Diffs are the only thing under our complete control.  Diffs are the most direct product of our labor.  But if we only view our jobs as producing diffs, we doom ourselves to being treated as cogs in a machine, interchangeable parts to plugged and re-plugged.</p>

<p>I&#8217;m not happy just producing diffs.  I love programming, but it&#8217;s not an end unto itself.  A computer program solves some problem
for someone, and I am happier when I know what that problem is (my diffs are better, too :).  I&#8217;d rather my boss know what
problems I&#8217;ve solved, and I&#8217;d rather my boss think about my job as solving problems, not producing diffs.  And, having been a
boss at times, I can tell you that it&#8217;s much easier to understand my team when I know what problems they are solving, not which
tickets have been moved to &#8220;Resolved&#8221;.</p>

<p>The problem is that, in a traditional company, we aren&#8217;t presented with problems to solve, but with diffs to produce.  We&#8217;re expected to trust our managers that the diffs we&#8217;re asked to produce solve problems that need solving and
that all of those people &#8220;higher up the corporate ladder&#8221; are properly coordinating things to make the company successful.   This
can be difficult, if not impossible, to achieve.</p>

<p>And so what happens is that the diffs my manager asks me to produce may not actually solve the problems my manager needs solving.  If all I do is bang out diffs, am I really helping?</p>

<p>If, instead, I align myself with my manager&#8217;s goals, instead of simply doing what I&#8217;m told, together we can produce a better solution to the real problem.
My manager has more context than me about our team and the company. I have more context about the underlying technology, what
is possible, and what it takes to produce various solutions. If I can get a bit of my manager&#8217;s context, and they a bit of mine, a better solution can be produced.</p>

<p>This is what I think of when I think of &#8220;managing up&#8221;: the alignment of goals and a shared understanding.  Hopefully, my
manager&#8217;s problems are the right problems to solve, but, even if they aren&#8217;t, being on the same page is the first step to solving
<em>that</em> problem.</p>

<h2>Understand the Problem</h2>

<p>In <a href="http://theseniorsoftwareengineer.com/">my book</a>, there are three chapters devoted to writing software - one for fixing bugs, one for developing features,
and one for creating new applications.  In each case, the first step is to understand the problem being solved, <em>especially</em> if a
specific solution has already been proposed.</p>

<p>My book goes into some great detail about how to do this, but it all starts with simply asking &#8220;Why?&#8221;.  Find out where the
requirements came from.  Find out what pain someone has that this is supposed to alleviate.  Find out how this saves the company
money.  Find out how it <em>makes</em> the company money.  There should be a route from your ticket system to one of those places, even if it&#8217;s circuitous.</p>

<p>Often, you&#8217;ll find that the proposed solution isn&#8217;t the best one for the underlying problem.  You might also find that the
problem really isn&#8217;t a problem after all.  While it feels great to produce awesome code, it feels even better to produce <em>no
code</em> to solve a problem.</p>

<p>Approaching your work like this may make your boss look good.  But that&#8217;s not the point.  The point is to spend your time wisely
and produce the best solution to the real problem.  That your boss and your team look good is incidental (but it&#8217;s still a good thing).</p>

<p>Another side-effect of aligning your actions to business problems (instead of software requirements) is that you&#8217;ll quickly uncover
dysfunction.  Sometimes the answer to the question &#8220;Why?&#8221; is &#8220;Because&#8221;.  This answer is permission to start working on your resume
:)</p>

<p>In all seriousness, it&#8217;s no fun to simply be a diff-producer, and if the company you are working at, regardless of its org chart,
has trapped you in the role of diff-producer, it&#8217;s not going to be an enjoyable place to work.  You won&#8217;t do your best work,
you won&#8217;t learn, and you won&#8217;t have much of a career.</p>

<p>So, take a break from learning how to produce amazing diffs and learn a bit about why you&#8217;re doing what you&#8217;re doing.  The
answers will make you a better developer.</p>

<hr />

<p><em>If you want to take control of your career, stop being a diff-producer, and start doing your best work, <a href="http://theseniorsoftwareengineer.com/">my book</a> has what you need.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Introduction to GLI]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/12/02/introduction-to-gli.html"/>
    <updated>2013-12-02T09:04:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/12/02/introduction-to-gli</id>
    <content type="html"><![CDATA[<p>Sitepoint recently published <a href="http://www.sitepoint.com/introduction-thor/">Introduction to Thor</a> and, to be honest, I don&#8217;t think Thor is a great tool for writing
command-line apps.  Thor is a great for writing Rails generators (likely the only reasonable tool), but I wrote GLI
specifically because I wanted a tool tailor-made to write awesome command-line apps.</p>

<p>With the re-release of <a href="http://pragprog.com/book/dccar2/build-awesome-command-line-applications-in-ruby-2">my book</a>, which uses GLI to demonstrate how to build amazing command-line apps in Ruby, I thought
I&#8217;d mimic Sitepoint&#8217;s post with a GLI version, and let you decide for yourself.</p>

<!-- more -->


<h2>What is GLI?</h2>

<p>GLI is a Ruby library designed to make writing a &#8220;command-based&#8221; application (which I call a &#8220;command suite&#8221;)
very easy.  It&#8217;s designed to make the simple things simple, but to not hide anything from the developer.</p>

<p>I won&#8217;t go back to getopt, but a fairly common way to create a command suite application is to use <code>OptionParser</code> to get command
line options, and then parse <code>ARGV</code> directly to figure out the &#8220;command&#8221;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">include</span> <span class="s2">&quot;optparse&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;~/.todo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">opts</span> <span class="o">=</span> <span class="no">OptionParser</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># declare a new options</span>
</span><span class='line'>  <span class="n">opts</span><span class="o">.</span><span class="n">on</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;-f FILE&quot;</span><span class="p">,</span><span class="s2">&quot;--file&quot;</span><span class="p">,</span> <span class="c1"># it can be -f or --file and requires an argument</span>
</span><span class='line'>      <span class="s2">&quot;Location of the todo list file (default ~/.todo)&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span> <span class="o">=</span> <span class="n">file</span> <span class="c1"># when the user specifies it, save the argument in options[:file]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">opts</span><span class="o">.</span><span class="n">on</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;-l&quot;</span><span class="p">,</span><span class="s2">&quot;--long&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;List todo elements in long form&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">long</span><span class="o">|</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:long</span><span class="o">]</span> <span class="o">=</span> <span class="n">long</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">opts</span><span class="o">.</span><span class="n">on</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;-a&quot;</span><span class="p">,</span><span class="s2">&quot;--all&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;List all todos, not just ones that haven&#39;t been completed&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">all</span><span class="o">|</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:all</span><span class="o">]</span> <span class="o">=</span> <span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">opts</span><span class="o">.</span><span class="n">parse!</span>  <span class="c1"># parse the options, modifying ARGV</span>
</span><span class='line'>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">command</span> <span class="k">do</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;new&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="c1"># Add a new todo to options[:file]</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;done&#39;</span>
</span><span class='line'>  <span class="c1"># complete a todo and rewrite options[:file]</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;list&#39;</span>
</span><span class='line'>  <span class="c1"># use options[:all] and options[:long] to output</span>
</span><span class='line'>  <span class="c1"># the todo list in options[:file]</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># Print help</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few problems with this:</p>

<ul>
<li>The <code>--all</code> and <code>--long</code> options are only relevant to the <code>list</code> command</li>
<li>There&#8217;s no explicit documentation of the commands - we have to hope that the generic help will tell us what they do</li>
<li>The option handling code is very duplicative and boilerplate</li>
<li>Making this robust is tricky - if the user passes wrong options, we&#8217;ll get a bad message</li>
</ul>


<p>These are problems solvable by a framework more sophisticated than <code>OptionParser</code></p>

<h2>First Steps with GLI</h2>

<p>Typically, a new GLI app is generated for you by the <code>gli</code> command-line app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">gli</span>
</span><span class='line'><span class="no">Fetching</span><span class="p">:</span> <span class="n">gli</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="n">gem</span> <span class="p">(</span><span class="mi">100</span><span class="sx">%)</span>
</span><span class='line'><span class="sx">Successfully installed gli-2.8.1</span>
</span><span class='line'><span class="sx">&gt; gli init todo new done list</span>
</span><span class='line'><span class="sx">&gt; cd todo</span>
</span><span class='line'><span class="sx">&gt; bundle install</span>
</span><span class='line'><span class="sx">&gt; bundle exec bin/todo help</span>
</span><span class='line'><span class="sx">NAME</span>
</span><span class='line'><span class="sx">    todo - Describe your application here</span>
</span><span class='line'>
</span><span class='line'><span class="sx">SYNOPSIS</span>
</span><span class='line'><span class="sx">    todo [global options] command [command options] [arguments...]</span>
</span><span class='line'>
</span><span class='line'><span class="sx">VERSION</span>
</span><span class='line'><span class="sx">    0.0.1</span>
</span><span class='line'>
</span><span class='line'><span class="sx">GLOBAL OPTIONS</span>
</span><span class='line'><span class="sx">    -f, --flagname=The name of the argument - Describe some flag here (default: the default)</span>
</span><span class='line'>    <span class="o">--</span><span class="n">help</span>                                  <span class="o">-</span> <span class="no">Show</span> <span class="n">this</span> <span class="n">message</span>
</span><span class='line'>    <span class="o">-</span><span class="n">s</span><span class="p">,</span> <span class="o">--[</span><span class="n">no</span><span class="o">-]</span><span class="n">switch</span>                       <span class="o">-</span> <span class="no">Describe</span> <span class="n">some</span> <span class="n">switch</span> <span class="n">here</span>
</span><span class='line'>    <span class="o">--</span><span class="n">version</span>                               <span class="o">-</span> <span class="no">Display</span> <span class="n">the</span> <span class="n">program</span> <span class="n">version</span>
</span><span class='line'>
</span><span class='line'><span class="no">COMMANDS</span>
</span><span class='line'>    <span class="n">done</span> <span class="o">-</span> <span class="no">Describe</span> <span class="n">done</span> <span class="n">here</span>
</span><span class='line'>    <span class="n">help</span> <span class="o">-</span> <span class="no">Shows</span> <span class="n">a</span> <span class="n">list</span> <span class="n">of</span> <span class="n">commands</span> <span class="ow">or</span> <span class="n">help</span> <span class="k">for</span> <span class="n">one</span> <span class="n">command</span>
</span><span class='line'>    <span class="n">list</span> <span class="o">-</span> <span class="no">Describe</span> <span class="n">list</span> <span class="n">here</span>
</span><span class='line'>    <span class="kp">new</span>  <span class="o">-</span> <span class="no">Describe</span> <span class="kp">new</span> <span class="n">here</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, so what happened?  We haven&#8217;t written any Ruby code, but we ran some commands, and had to use bundler.</p>

<p>GLI makes a few assumptions about how you want to work:</p>

<ul>
<li>You want a canoncially set-up Ruby project structure</li>
<li>You want to write tests</li>
<li>You want to distribute via RubyGems</li>
</ul>


<p>None of these are requirements for GLI, so you could just as easily <code>gem install gli</code> and get to work.  The reason we are using
Bundler is because <code>bin/todo</code> does <em>not</em> hack the load path to load our files in <code>lib</code>.  At runtime, RubyGems will configure the
load path for our users, so everything in <code>lib</code> will be available.  In development, we don&#8217;t have that, so we use Bundler, which
does the same thing.  You could also do <code>RUBYLIB=lib bin/todo help</code> if you prefer.</p>

<p>Back to our app, you&#8217;ll notice that we have an application that produces a pretty decent help system already, so what does the code look like?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;gli&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;todo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="no">GLI</span><span class="o">::</span><span class="no">App</span>
</span><span class='line'>
</span><span class='line'><span class="n">program_desc</span> <span class="s1">&#39;Describe your application here&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">version</span> <span class="no">Todo</span><span class="o">::</span><span class="no">VERSION</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Describe some switch here&#39;</span>
</span><span class='line'><span class="n">switch</span> <span class="o">[</span><span class="ss">:s</span><span class="p">,</span><span class="ss">:switch</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Describe some flag here&#39;</span>
</span><span class='line'><span class="n">default_value</span> <span class="s1">&#39;the default&#39;</span>
</span><span class='line'><span class="n">arg_name</span> <span class="s1">&#39;The name of the argument&#39;</span>
</span><span class='line'><span class="n">flag</span> <span class="o">[</span><span class="ss">:f</span><span class="p">,</span><span class="ss">:flagname</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Describe new here&#39;</span>
</span><span class='line'><span class="n">arg_name</span> <span class="s1">&#39;Describe arguments to new here&#39;</span>
</span><span class='line'><span class="n">command</span> <span class="ss">:new</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">desc</span> <span class="s1">&#39;Describe a switch to new&#39;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">switch</span> <span class="ss">:s</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">desc</span> <span class="s1">&#39;Describe a flag to new&#39;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">default_value</span> <span class="s1">&#39;default&#39;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">flag</span> <span class="ss">:f</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;new command ran&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Describe done here&#39;</span>
</span><span class='line'><span class="n">arg_name</span> <span class="s1">&#39;Describe arguments to done here&#39;</span>
</span><span class='line'><span class="n">command</span> <span class="ss">:done</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;done command ran&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Describe list here&#39;</span>
</span><span class='line'><span class="n">arg_name</span> <span class="s1">&#39;Describe arguments to list here&#39;</span>
</span><span class='line'><span class="n">command</span> <span class="ss">:list</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;list command ran&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">pre</span> <span class="k">do</span> <span class="o">|</span><span class="n">global</span><span class="p">,</span><span class="n">command</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span> <span class="k">do</span> <span class="o">|</span><span class="n">global</span><span class="p">,</span><span class="n">command</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">on_error</span> <span class="k">do</span> <span class="o">|</span><span class="n">exception</span><span class="o">|</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit</span> <span class="n">run</span><span class="p">(</span><span class="no">ARGV</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we specified <code>new done list</code> on the command line to <code>gli init</code>, it went ahead and created command blocks for us.  Notice
that each command block is configured in the style of rake - we describe the command, document its arguments, and declare that
it exists.  You&#8217;ll notice that each command has a generic <code>puts</code> in it, so we can see how our new app works right now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">bin</span><span class="o">/</span><span class="n">todo</span> <span class="n">list</span>
</span><span class='line'><span class="n">list</span> <span class="n">command</span> <span class="n">ran</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">bin</span><span class="o">/</span><span class="n">todo</span> <span class="n">done</span>
</span><span class='line'><span class="n">done</span> <span class="n">command</span> <span class="n">ran</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also get help for particular commands already:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">bin</span><span class="o">/</span><span class="n">todo</span> <span class="n">help</span> <span class="n">list</span>
</span><span class='line'><span class="no">NAME</span>
</span><span class='line'>    <span class="n">list</span> <span class="o">-</span> <span class="no">Describe</span> <span class="n">list</span> <span class="n">here</span>
</span><span class='line'>
</span><span class='line'><span class="no">SYNOPSIS</span>
</span><span class='line'>    <span class="n">todo</span> <span class="o">[</span><span class="n">global</span> <span class="n">options</span><span class="o">]</span> <span class="n">list</span> <span class="no">Describe</span> <span class="n">arguments</span> <span class="n">to</span> <span class="n">list</span> <span class="n">here</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad for having written absolutely no code!</p>

<h2>Filling it in</h2>

<p>Let&#8217;s replace the boilerplate with what we need for our todo list app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s1">&#39;Location of todo file&#39;</span>
</span><span class='line'><span class="n">default_value</span> <span class="s1">&#39;~/.todo&#39;</span>
</span><span class='line'><span class="n">arg_name</span> <span class="s1">&#39;path_to_file&#39;</span>
</span><span class='line'><span class="n">flag</span> <span class="o">[</span><span class="ss">:f</span><span class="p">,</span><span class="ss">:file</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Create a new todo item&#39;</span>
</span><span class='line'><span class="n">arg_name</span> <span class="s1">&#39;text_of_todo&#39;</span>
</span><span class='line'><span class="n">command</span> <span class="ss">:new</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="n">todo</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Add todo to the file at global_options[:file]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Complete a todo&#39;</span>
</span><span class='line'><span class="n">arg_name</span> <span class="s1">&#39;todo_id&#39;</span>
</span><span class='line'><span class="n">command</span> <span class="ss">:done</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>    <span class="c1"># Locate id in global_options[:file] and mark it completed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;List todo items&#39;</span>
</span><span class='line'><span class="n">command</span> <span class="ss">:list</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">desc</span> <span class="s1">&#39;Use long format&#39;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">switch</span> <span class="o">[</span><span class="ss">:l</span><span class="p">,</span><span class="ss">:long</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">desc</span> <span class="s1">&#39;Show all items, even uncompleted ones&#39;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">switch</span> <span class="o">[</span><span class="ss">:a</span><span class="p">,</span><span class="ss">:all</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># Read todos from global_options[:file]</span>
</span><span class='line'>    <span class="c1"># and then use options[:long] and</span>
</span><span class='line'>    <span class="c1"># options[:all] to figure out what</span>
</span><span class='line'>    <span class="c1"># to display</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, we&#8217;ve just replaced boilerplate text with our app-, command-, and option-specific help text.  We also removed the
example flags and switches and replaced them with the ones we&#8217;ll actually need.</p>

<p>Notice that we specified <code>--file</code> outside of any command block, thus making it a global flag.  This is because all commands need access to the todo file.  Note also that the options <code>--long</code> and <code>--all</code>, which are specified inside the <code>list</code> command block, will only be available for the <code>list</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">bin</span><span class="o">/</span><span class="n">todo</span> <span class="n">help</span>
</span><span class='line'><span class="no">NAME</span>
</span><span class='line'>    <span class="n">todo</span> <span class="o">-</span> <span class="no">Describe</span> <span class="n">your</span> <span class="n">application</span> <span class="n">here</span>
</span><span class='line'>
</span><span class='line'><span class="no">SYNOPSIS</span>
</span><span class='line'>    <span class="n">todo</span> <span class="o">[</span><span class="n">global</span> <span class="n">options</span><span class="o">]</span> <span class="n">command</span> <span class="o">[</span><span class="n">command</span> <span class="n">options</span><span class="o">]</span> <span class="o">[</span><span class="n">arguments</span><span class="o">.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'>
</span><span class='line'><span class="no">VERSION</span>
</span><span class='line'>    <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="no">GLOBAL</span> <span class="no">OPTIONS</span>
</span><span class='line'>    <span class="o">-</span><span class="n">f</span><span class="p">,</span> <span class="o">--</span><span class="n">file</span><span class="o">=</span><span class="n">path_to_file</span> <span class="o">-</span> <span class="no">Location</span> <span class="n">of</span> <span class="n">todo</span> <span class="n">file</span> <span class="p">(</span><span class="n">default</span><span class="p">:</span> <span class="o">~</span><span class="sr">/.todo)</span>
</span><span class='line'><span class="sr">    --help                  - Show this message</span>
</span><span class='line'><span class="sr">    --version               - Display the program version</span>
</span><span class='line'>
</span><span class='line'><span class="sr">COMMANDS</span>
</span><span class='line'><span class="sr">    done - Complete a todo</span>
</span><span class='line'><span class="sr">    help - Shows a list of commands or help for one command</span>
</span><span class='line'><span class="sr">    list - List todo items</span>
</span><span class='line'><span class="sr">    new  - Create a new todo item</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&gt; bundle exec bin/</span><span class="n">todo</span> <span class="n">help</span> <span class="kp">new</span>
</span><span class='line'><span class="no">NAME</span>
</span><span class='line'>    <span class="kp">new</span> <span class="o">-</span> <span class="no">Create</span> <span class="n">a</span> <span class="kp">new</span> <span class="n">todo</span> <span class="n">item</span>
</span><span class='line'>
</span><span class='line'><span class="no">SYNOPSIS</span>
</span><span class='line'>    <span class="n">todo</span> <span class="o">[</span><span class="n">global</span> <span class="n">options</span><span class="o">]</span> <span class="kp">new</span> <span class="n">text_of_todo</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">bin</span><span class="o">/</span><span class="n">todo</span> <span class="n">help</span> <span class="n">list</span>
</span><span class='line'><span class="no">NAME</span>
</span><span class='line'>    <span class="n">list</span> <span class="o">-</span> <span class="no">List</span> <span class="n">todo</span> <span class="n">items</span>
</span><span class='line'>
</span><span class='line'><span class="no">SYNOPSIS</span>
</span><span class='line'>    <span class="n">todo</span> <span class="o">[</span><span class="n">global</span> <span class="n">options</span><span class="o">]</span> <span class="n">list</span> <span class="o">[</span><span class="n">command</span> <span class="n">options</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="no">COMMAND</span> <span class="no">OPTIONS</span>
</span><span class='line'>    <span class="o">-</span><span class="n">a</span><span class="p">,</span> <span class="o">--[</span><span class="n">no</span><span class="o">-]</span><span class="n">all</span>  <span class="o">-</span> <span class="no">Show</span> <span class="n">all</span> <span class="n">items</span><span class="p">,</span> <span class="n">even</span> <span class="n">uncompleted</span> <span class="n">ones</span>
</span><span class='line'>    <span class="o">-</span><span class="n">l</span><span class="p">,</span> <span class="o">--[</span><span class="n">no</span><span class="o">-]</span><span class="n">long</span> <span class="o">-</span> <span class="no">Use</span> <span class="n">long</span> <span class="nb">format</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how we see the documentation relevant to the command, and not in one global space?  Handy.</p>

<p>What I like about this design is that, although it&#8217;s not &#8220;object-oriented&#8221;, it&#8217;s obvious and clear.  A command-line
interface isn&#8217;t OO, it&#8217;s declarative and command-oriented, so it makes sense to me that we describe our UI in the same way.</p>

<p>Also notice the structure of the command line.  In a Thor app, all command-line options must come at the end of the command line.
In a GLI app, the position of the switches determines their interpretation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">bin</span><span class="o">/</span><span class="n">todo</span> <span class="o">-</span><span class="n">f</span> <span class="o">~</span><span class="sr">/.todo.txt -l list</span>
</span><span class='line'><span class="sr">error: Unknown options -l</span>
</span><span class='line'><span class="sr">&gt; bin/</span><span class="n">todo</span> <span class="n">list</span> <span class="o">-</span><span class="n">l</span> <span class="o">-</span><span class="n">f</span> <span class="o">~</span><span class="sr">/.todo.txt</span>
</span><span class='line'><span class="sr">error: Unknown option -f</span>
</span><span class='line'><span class="sr">&gt; bin/</span><span class="n">todo</span> <span class="o">-</span><span class="n">f</span> <span class="o">~</span><span class="sr">/.todo.txt list -l</span>
</span><span class='line'><span class="sr"># lists in long form from ~/</span><span class="o">.</span><span class="n">todo</span><span class="o">.</span><span class="n">txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates namespaces for our options, which allows the creation of a rich user interface, if needed. I borrowed this design
from <code>git</code> (and, in fact, GLI stands for &#8220;Git-Like Interface&#8221;).</p>

<p>Our application code would likely <em>not</em> live inside this file, but instead be delegated to classes located under <code>lib</code>, designed
and unit tested as you would in any application.  The file generated by <code>gli init</code> is already primed to look there.</p>

<h2>Digging Deeper</h2>

<p>This example only scratches the surface.  Let&#8217;s go over a few different handy features for managing our command suite.</p>

<h3>Powerful option parsing</h3>

<p>It&#8217;s usually good practice for switches (options that take no arguments) to have both a positive and &#8220;negative&#8221; version.  For
example, we&#8217;d want to be able to use <code>--no-long</code> or <code>--long</code>, as appropriate.  You can see from our help output that GLI supports this by default.  If the user
specifies <code>--no-all</code> on the command line, <code>options[:all]</code> will be false.</p>

<p>GLI makes this work because it&#8217;s using <code>OptionParser</code> underneath.  This opens up some other powerful features.</p>

<p>Suppose we want to give our new todo items a &#8220;category&#8221; and that we want to require the category to be one of &#8220;chore&#8221;, &#8220;feature&#8221;, or &#8220;bug&#8221;.   The naive approach would be to examine <code>options[:category]</code> inside our <code>action</code> block and raise an error if it&#8217;s not one of the three allowed values, GLI, via <code>OptionParser</code>, provides this for us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">command</span> <span class="ss">:new</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">desc</span> <span class="s2">&quot;The category of the new todo&quot;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">default_value</span> <span class="s1">&#39;chore&#39;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">flag</span> <span class="ss">:category</span><span class="p">,</span> <span class="n">must_match</span><span class="p">:</span> <span class="sx">%w(chore feature bug)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># options[:category] will always be one of chore, feature, or bug</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>must_match</code> takes a wide variety of values, including an <code>Array</code>, <code>Hash</code>, or <code>Regexp</code>.</p>

<p>Flags also accept the option <code>:type</code> that can be used to do a type conversion.  <code>OptionParser</code> has some <a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/optparse/rdoc/OptionParser.html">conversions built-in</a>, but we could do very sophisticated things if we wanted to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">accept</span><span class="p">(</span><span class="no">Todo</span><span class="o">::</span><span class="no">Type</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">string</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Todo</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">capitalize</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">command</span> <span class="ss">:new</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">desc</span> <span class="s2">&quot;The type of the new todo&quot;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">default_value</span> <span class="s1">&#39;chore&#39;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">flag</span> <span class="ss">:type</span><span class="p">,</span> <span class="n">must_match</span><span class="p">:</span> <span class="sx">%w(chore feature bug)</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="no">Todo</span><span class="o">::</span><span class="no">Type</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># options[:type] will always be Todo::Chore, Todo::Feature, or Todo::Bug</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice!</p>

<h3>Default Values</h3>

<p>You&#8217;ve probably noticed <code>default_value</code> being used.  This not only documents in our help text what the default of a flag is, but
it&#8217;s also the default value in <code>global_options</code> or <code>options</code>.  You don&#8217;t have to manage it yourself.</p>

<h3>Aliases</h3>

<p>By default, GLI will identify a command based on the shortest unambiguous string.  In our case, <code>bundle exec bin/todo n</code> would be
recognized as the &#8220;new&#8221; command, because no other command starts with &#8220;n&#8221;.</p>

<p>We can also provide explicit aliases by passing an array to <code>command</code>, much as we did with our flags and switches:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">command</span> <span class="o">[</span><span class="ss">:list</span><span class="p">,</span><span class="ss">:show</span><span class="o">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Global Hooks</h3>

<p>If we were to fill in the three actions with actual code, you&#8217;d see that they all have some need to access the to-do list.  We
might create a class like <code>TodoList</code> and use it like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">command</span> <span class="ss">:list</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="n">todo_list</span> <span class="o">=</span> <span class="no">TodoList</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">global_options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo_list</span><span class="o">.</span><span class="n">tasks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">todo</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">todo</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">command</span> <span class="ss">:done</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="n">todo_list</span> <span class="o">=</span> <span class="no">TodoList</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">global_options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo_list</span><span class="o">.</span><span class="n">complete!</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">shift</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo_list</span><span class="o">.</span><span class="n">save!</span><span class="p">(</span><span class="n">global_options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">command</span> <span class="ss">:new</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="n">todo_list</span> <span class="o">=</span> <span class="no">TodoList</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">global_options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo_list</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo_list</span><span class="o">.</span><span class="n">save!</span><span class="p">(</span><span class="n">global_options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can get repetitive.  Although we have a way to specify that all commands have the flag <code>--file</code>, it would be nice if we
could globally translate that filename into a real object and have it managed outside our commands.</p>

<p>That&#8217;s where <code>pre</code> and <code>post</code> come in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pre</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">command</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="vg">$todo_list</span> <span class="o">=</span> <span class="no">TodoList</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">global_options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">command</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="vg">$todo_list</span><span class="o">.</span><span class="n">save!</span><span class="p">(</span><span class="n">global_options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">command</span> <span class="ss">:list</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="vg">$todo_list</span><span class="o">.</span><span class="n">tasks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">todo</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">todo</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">command</span> <span class="ss">:done</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="vg">$todo_list</span><span class="o">.</span><span class="n">complete!</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">shift</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">command</span> <span class="ss">:new</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="vg">$todo_list</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>pre</code> receives the parsed command and options.  The <code>pre</code> block&#8217;s code will execute before the contents of our <code>action</code> block.
<code>post</code>, too, receives this information and runs <em>after</em> our action block.  Our todo list app commands always have access to the parsed todo list file, and can be sure that any changes they make will
be saved to disk after.</p>

<h3>Subcommands</h3>

<p>GLI allows infinitely nested subcommands.  For example, if we wanted to have our <code>list</code> command work a bit differently, such as
<code>todo list done</code> or <code>todo list inprogress</code>, we can model <code>done</code> and <code>inprogress</code> as subcommands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;List todo items&quot;</span>
</span><span class='line'><span class="n">command</span> <span class="ss">:list</span> <span class="k">do</span> <span class="o">|</span><span class="n">list</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">list</span><span class="o">.</span><span class="n">desc</span> <span class="s2">&quot;Show only completed items&quot;</span>
</span><span class='line'>  <span class="n">list</span><span class="o">.</span><span class="n">command</span> <span class="ss">:done</span> <span class="k">do</span> <span class="o">|</span><span class="n">done</span><span class="o">|</span>
</span><span class='line'>    <span class="n">done</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>      <span class="vg">$todo_list</span><span class="o">.</span><span class="n">completed</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">todo</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="n">todo</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">list</span><span class="o">.</span><span class="n">desc</span> <span class="s2">&quot;Show only in-progress items&quot;</span>
</span><span class='line'>  <span class="n">list</span><span class="o">.</span><span class="n">command</span> <span class="ss">:inprogress</span> <span class="k">do</span> <span class="o">|</span><span class="n">done</span><span class="o">|</span>
</span><span class='line'>    <span class="n">done</span><span class="o">.</span><span class="n">action</span> <span class="k">do</span> <span class="o">|</span><span class="n">global_options</span><span class="p">,</span><span class="n">options</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>      <span class="vg">$todo_list</span><span class="o">.</span><span class="n">in_progress</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">todo</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="n">todo</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Subcommands have their own &#8220;option space&#8221;, so you can create a very sophisticated UI if you need to.</p>

<h2>Conclusion</h2>

<p>I&#8217;ve tried a lot of command-line libraries for Ruby and GLI is the most featureful, compact, and powerful one I&#8217;ve seen—I created
it to be that way.  The thing I like about it is that simple applications have simple source code, but if you need more complex
features, they are there for you.  The &#8220;shape&#8221; of your binfile mimics the shape of your app.  The bootstrapping from <code>gli init</code>
also sets you up to have a properly organized, easily distributable application—all hallmarks of an awesome command-line app.</p>

<p>&#8220;Build Awesome Command-Line Applications in Ruby 2&#8221; is <a href="http://pragprog.com/book/dccar2/build-awesome-command-line-applications-in-ruby-2">on sale now</a> (and is a free upgrade for purchasers of the first version).
It covers the generic aspects of command-line development with Ruby, using GLI to demonstrate how to do it with command suites.
It&#8217;s also a much deeper dive on <code>OptionParser</code>, which is a powerful tool you should learn for writing non-command-based
command-line apps.  The appendix covers Thor, Main, and Methadone as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Square Wallet is Almost Awesome]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/11/18/square-wallet-is-almost-awesome.html"/>
    <updated>2013-11-18T08:43:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/11/18/square-wallet-is-almost-awesome</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve ever been on a vacation where you don&#8217;t have perfectly fast network access, and tried to use popular social-networking
apps, you can probably identify with my tweet:</p>

<blockquote class="twitter-tweet"><p>This I know: the developers of Instagram, Facebook, and Tripit have never been on a vacation where they used the app they develop.</p>&mdash; ❺➠ David Copeland (@davetron5000) <a href="https://twitter.com/davetron5000/statuses/393993045265244160">October 26, 2013</a></blockquote>


<script async src="http://www.naildrivin5.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I use a lot of applications from companies that present themselves as developer-friendly, agile, forward-thinking, and
product-focused.  Despite that, these products have very obvious flaws that, to my thinking, reduce the value to both the company
and its users (unlike, say, Google Ads, which only reduce value to users).</p>

<p>Tearing apart the three apps I mention above will be an undertaking, so I&#8217;d like to start with an app I really, really like, and
use almost every day: Square Wallet.</p>

<!-- more -->


<h2>What it is</h2>

<p>If you haven&#8217;t used Square Wallet, it&#8217;s ostensibly an app to allow you to pay for things with Square instead of using cash or
your credit card.  The happy path case is that you walk into a participating store (which I think is almost exclusively
Starbucks), and the store scans a QR code on your phone, conducting the transaction.</p>

<p>I work frequently out of Starbucks because a) they reliably have iced tea, b) their Internet is usually pretty decent, and c)
it&#8217;s close to home.  So, I used Square Wallet a <em>lot</em>.  And I can tell you, there&#8217;s <em>no way</em> the product team for this app
really, truly uses it (and I&#8217;d bet my life savings no one on the product team uses an iPhone 4).</p>

<h2>How it works.</h2>

<p>The basic flow of the app is as follows:</p>

<ol>
<li>Launch the app</li>
<li>App uses your location to identify Square-supported businesses</li>
<li>Tap on Starbucks</li>
<li>You are shown a QR code</li>
<li>Scan the QR code</li>
</ol>


<p>This seems reasonable enough, but if you have a close eye, you can spot the problem.</p>

<h2>The problem</h2>

<p>First, let&#8217;s talk about steps 1 and 2.  The process of launching the application and doing the location search are <em>slow</em>.</p>

<p>On older iPhones, just launching is interminable:</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_startup.PNG" width="300" title="'If you have an iPhone 4, you are very familiar with this screen'" ></p>

<p>And then, the location lookup takes what seems like <em>forever</em>, especially if you don&#8217;t have really fast Internet.</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_location.PNG" width="300" title="'Don't have blazing-fast Internet?  You will spend a lot of time here'" ></p>

<p>Once that&#8217;s done, I then need to navigate a two-dimensional list of business to find the one I want.</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_selection.PNG" width="300" title="'One of these is not like the other'" ></p>

<p>Starbucks is <em>almost</em> always in the upper-left.  Almost.  Visually navigating a two
dimensional list is markedly more difficult than a one-dimensional list.  This screen may look nice, but it&#8217;s hard to use.</p>

<p>So, the way I end up using this is to &#8220;boot up&#8221; the app when I walk into Starbucks, so that the QR code is ready by the time I
get through the line (I have a brand new iPhone 5S).</p>

<p>What I don&#8217;t understand is that all of this is to get the application to reveal a static image of a QR code that, as far as I can
tell, never changes.  I could just print it out.  This should be the default behavior of the application—I should launch it and
see this QR code.  Or, better, the application should use Passbook, like the official Starbucks app:</p>

<ol>
<li>Take out iPhone when I&#8217;m in Starbucks</li>
<li>Swipe open the lock screen—now displaying a Passport alert—to display a scannable image</li>
<li>Scan and Pay</li>
</ol>


<p>It&#8217;s <em>fast</em>.  It&#8217;s fast for me and fast for the cashier.  The reason I don&#8217;t use it is because it requires Funny Money™.  I have to constantly reload it and manage the balance.  Square solves that problem perfectly by being a proxy to my credit card.  It seems to me that if the idea is to use my location to present me with information to pay the business at that location, Passbook is the exact feature needed to implement that<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>So I have to wonder what the Square Wallet product team actually <em>does</em> with Square Wallet and where are their
priorities about product features?  Maybe they never go to Starbucks and only go to some food truck that, because it&#8217;s in San Francisco, actually accepts Square Wallet directly.  Have they even used the Starbucks app?  If I were on that team, the second I used the Starbucks app, I&#8217;d bring it to the team&#8217;s attention and get to work.  I would take it as a point of pride that my app wasn&#8217;t as easy to use as Starbucks&#8217;.</p>

<p>Perhaps I&#8217;m just not using the app as intended.  Perhaps if I dig deeper, I can discover the true features I&#8217;m supposed to be
using.  Doing so only raises more questions about the product decisions that have gone into this app.</p>

<h2>The Deeper We Go, The More Shallow it Gets</h2>

<p>After the location search, here&#8217;s the screen you&#8217;ll see again for reference:</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_selection.PNG" width="300" title="'One of these is not like the other'" ></p>

<p>When I first saw this, I was really excited that I could pay with Square at all of these locations (Sundevich is one of my
favorite DC sandwich shops).  To be clear, I would&#8217;ve gone out of my way to visit some of these places because the
at-the-counter experience of Square Wallet is so awesome.  These business would get more money out of me, if I could use Square
Wallet.</p>

<p>Turns out that not a single entry in this list, save Starbucks, allows me to pay with Square Wallet.  I can&#8217;t think of any reason why they show up in the list at all.  Clicking one reveals pretty much nothing:</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_move_along.PNG" width="300" title="'Uhhhh....'" ></p>

<p>The only thing here to do is &#8220;Share&#8221;:</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_share.PNG" width="300" title="'OK....'" ></p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_share_email.PNG" width="300" title="'OK....'" ></p>

<p>Who would ever do this?  Why is this even here?  Why did the application automatically search for businesses, download images, and provide me a screen full of links to useless information where I can do pretty much nothing?  All I wanted to do was bring up a static QR code to scan at Starbucks so that I could get iced tea, and Square could get a bit off the top for providing the service.</p>

<h2>A Bit Off the Top</h2>

<p>Unlike Facebook and Instagram, Square has a pretty clear and easy to understand business model: take a percentage of everything
you buy with Square<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.  As the scrappy newcomer having to compete with cash and credit cards, their only real way in is to make
paying for things with Square <em>easier</em> than cash or credit cards.</p>

<p>Given this, almost every feature of Square Wallet stands in defiance of that simple goal.  I cannot fathom the thinking behind
adding a useless share feature at instead of streamlining the flow that <em>directly makes them money</em>.  The Square
Wallet team should be laser-focused on ensuring that the app makes it as easy as possible for me to pay using Square.  That team
should, in large part, be judged by how much revenue comes in from the app.</p>

<p>Instead, the vast majority of the app consists of phoned-in user acquisition features that get in the way of me giving them my
money<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<p>I still use Square Wallet and will continue to, as it is still faster than cash or credit (provided I boot it up when I enter Starbucks). When I use it, I really get excited about the future.  What this app does is pretty awesome and the possibilities for it seem very cool.  I wish it did it in more places and I wish it did better, but I am concerned that this team&#8217;s priorities are really screwed up, and I hope that doesn&#8217;t hurt this app or Square in general.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>I realize there could be security implications with allowing payment without unlocking the phone, but a) few people lock their phones and b) it would be simple enough to limit the buying power of a transaction conducted this way <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>At least I hope this is what they are doing.  If they decide to “monetize eyeballs” i.e. sell ads as their main source of revenue, I will be very sad. <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>You know what acquires new users?  Making an awesome experience for the existing users. <a href='#fnref:3' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Self vs Professional Publishing]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/10/14/self-vs-professional-publishing.html"/>
    <updated>2013-10-14T13:13:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/10/14/self-vs-professional-publishing</id>
    <content type="html"><![CDATA[<p>I get asked occasionally about the self-publishing process and how it compares to the &#8220;professional&#8221; publishing process, since I have done both.  I thought it might be interesting to compare and contrast these two approaches.  The professional approach is regimented, organized, and carries many advantages, while self-publishing allows total freedom, at the cost of doing a lot more work for a lot less money.</p>

<!-- more -->


<p>During the promotion of my first book, I <a href="http://www.naildrivin5.com/blog/2012/04/24/five-months-of-ebook-sales.html">wrote a post</a> about the experience of working with a professional
publisher:</p>

<blockquote><p>I know that working with John [editor of my book] and the Prags [Pragmatic Programmers, the publishers] has made me a better writer, but would I be confident enough to &#8220;go it alone&#8221;? Given my lack of notability, I feel I benefit greatly from having my work published and distributed by the Prags. Further, knowing my writing style and abilities as I do, my work will be much higher quality with a team of professionals in my corner.</p></blockquote>

<p>The post is very &#8220;pro professional&#8221;, and I had a great experience.  I also sold (and continue to sell) a good number of copies.  As of now, I&#8217;ve sold over 6,000 copies of <a href="http://pragprog.com/book/dccar/build-awesome-command-line-applications-in-ruby">Build Awesome Command Line Apps With Ruby</a>.  I&#8217;m happy with those results, especially considering what a niche topic it is.</p>

<p>I conclude with</p>

<blockquote><p>That being said, I&#8217;d still love to try self-publishing at some point…</p></blockquote>

<p>With <a href="http://theseniorsoftwareengineer.com/">my current book</a>, I got my chance.  I proposed it to the Pragmatic Programmers, however they didn&#8217;t feel it
was a good fit for them.  The topic of the book is broad—what every programmer needs to know besides coding—and they have at
least three titles that could overlap with the subject matter.</p>

<p>I wanted the book to be written, so I soldiered on alone, deciding to self-publish.   I have not sold <em>nearly</em> as many copies
as I had with my first book at this point, but I&#8217;m still happy with the results, and certainly not done promoting the new
book.</p>

<p>Having gone through both a professional publishing and a self-publishing process, I thought it might be interesting to shed
some light on how these two processes work.  These are only two data
points, so your mileage may vary.</p>

<h2>Working with Professionals</h2>

<p>My original post contains a good deal of information about what it&#8217;s like to work with a team of publishing professionals.  Obviously, it&#8217;s only one datapoint, but my experience jibes with most other tech authors I&#8217;ve talked to.  The basic process is:</p>

<ol>
<li>Proposal accepted</li>
<li>Development editor assigned</li>
<li>Write a chapter</li>
<li>Editor reviews</li>
<li>Revise chapter based on feedback</li>
<li>Repeat from step 4 until chapter is good</li>
<li>Repeat from step 3 until about 25% done</li>
<li>Managing editor review</li>
<li>Revise as needed, then back to step 3 until half done</li>
<li>Publisher review</li>
<li>Revise as needed, then back to step 3 until mostly done</li>
<li>Tech reviews (these might happen earlier)</li>
<li>Copy-editing, indexing, and typesetting</li>
<li>Release!</li>
</ol>


<p>Let&#8217;s delve a bit deeper into some of these, because they are relevant to the self-publishing process.</p>

<p><span class='pullquote-right' data-pullquote='The development editor is the only person you can be sure will read your book in great detail '>
The day-to-day writing and revising is done by me, the author, with the help of a <em>development editor</em>.  The development
editor isn&#8217;t concerned with commas, spelling, or grammar. Instead, they&#8217;re charged with ensuring that the quality of the writing is high.  They will focus on flow, consistency and general &#8220;interestingness&#8221;.  The development editor is the only person you can be sure will read your book in great detail, which is a handy person to have around.
</span></p>

<p>So, if the development editor isn&#8217;t worried about commas and grammar, who does?  The answer is the copy-editor.  God bless
these people, because it sounds like an awful job.  They comb through the manuscript fixing all of the typos the author has
made.  This is done at the end because a) typos and missing commas aren&#8217;t important to the creative process and b) the text is
likely to change during development, so there&#8217;s no sense in copy-editing more than once.</p>

<p>Similarly, indexing and typesetting are saved until the end as well.  Indexing is what it sounds like—making the index.
Typesetting is a bit more involved.</p>

<p>In the old school, the author might produce the book in Word or some other electronic format designed for editing and commentary (or perhaps even
a typed/written manuscript in the <em>real</em> old school).  Once the work is done, the text
is transferred to a system like Quark or FrameMaker to be set for printing.  Many publishers still work this way.  The Pragmatic Programmers, however, pioneered a better way.  They have a toolchain whereby you write your book in text that can be converted into a beautifully typeset PDF (as well as various e-reader formats).  They even have a build server set up to build your book whenever you commit changes.</p>

<p>Despite the automation, there is still some manual tweaking that must happen before the book can be printed, and so there is a final
stage of manually adjusting the typography to ensure words are hyphenated in the correct place, there are no words on pages by
themselves, etc.</p>

<p>The real power of this system is that they can typeset the book for more than just print.  While the PDF looks like the
printed book, readers also get an ePUB  and a MOBI for reading on a wide variety of e-readers.  I don&#8217;t know how much manual
tweaking they do to this part, but given my experience with these formats (below), they&#8217;ve created some powerful tools that
produce really great e-reader formats.</p>

<p><span class='pullquote-left' data-pullquote='It&#8217;s all focused on producing the best book you can, in terms of both content and presentation. '>
If this sounds like a lot of process, it <em>is</em>!  It&#8217;s all focused on producing the best book you can, in terms of both content and presentation.  Since the publisher is fronting the money to pay the staff and produce the book before any copies are sold, they rightly want regular check-ins that progress is being made and that the quality is sufficient.  In other words, this process makes a lot of sense to me.
</span></p>

<p>Let&#8217;s talk about what&#8217;s good and what&#8217;s bad with this process.</p>

<h3>The Good</h3>

<p>Getting eyes on your book as you write is awesome.  There&#8217;s no doubt in my mind that my book was markedly better for having worked with this team of professionals.  Getting feedback from the publisher was also something that can&#8217;t be underestimated.  Their feedback was borderline brutal, but it came from the right place and was what I needed to hear to do my best work.</p>

<p>In terms of presentation, the end product looks beautiful on paper, and looks great on all the various electronic reading formats that permeate today&#8217;s technical landscape.  I never once had to worry about formatting, fonts, the Kindle DX, or anything.</p>

<p>They also have the setup to get your book into stores, listed on Amazon, etc.  As we&#8217;ll see later, this is no small feat and while most of my sales were from the Pragmatic Programmers website, I still sold over 1400 copies from &#8220;somewhere else&#8221;.</p>

<p><span class='pullquote-right' data-pullquote='Having a book published by a real publisher is a form of promotion that can be hard to match. '>
Finally, the publisher is a known entity that people look to for technical books.  The same book listed on their website vs only on an author&#8217;s website is going to sell far more, simply because it becomes known to many more people.  Having a book published by a real publisher is a form of promotion that can be hard to match.  And it&#8217;s the detailed process I&#8217;ve just described that creates that reputation for quality.
</span></p>

<h3>The Bad</h3>

<p>Firstly, all of this costs money, so my royalty per copy is roughly 50% of what the publisher collects from buyers.  Although we are in the &#8220;The Bad&#8221; section, let me be clear that <em>a 50% royalty is far above average</em>.  No other publisher that I know of is paying this high a rate.  To be honest, 50% seems way too generous, given what&#8217;s provided for me and the support I get.  But, as great as their royalty rate is, it&#8217;s still a cost—the wonderful staff and tools don&#8217;t come free, and this is the price.</p>

<p><span class='pullquote-left' data-pullquote='In effect, I need permission to work on the book. '>
Secondly, all the check-ins and reviews are forms of gate-keeping.  Editor approvals, copy-editing, indexing, and typesetting are gate-keeping activities, meaning that my ability to work on, promote, and sell the book is <em>dependent on others</em>.  In effect, I need permission to work on the book. I learned very quickly that working on Chapter 4 while Chapter 3 was still being reviewed and revised was a Very Bad Idea™.  Changes in one affect the other, and so while my work is being reviewed, there isn&#8217;t a whole lot I can do while I&#8217;m waiting.  Remember, the vast majority of the time spent creating a book is in revising and editing, not &#8220;getting it down&#8221;.
</span></p>

<p>Intellectually, I know that these gatekeepers are there for a reason, and that we are all on the same team, and that this process is designed to produce great results.  And it <em>does</em> do that, however it can still be frustrating. Particularly because I do this in my free time, which has to be carefully managed and budgeted.  If I have time to write, but feel unable to do so, it feels like a waste.  It also made the entire process <em>feel</em> slow.  Even if it really needed to take that long, the feeling of slowness can be de-motivating.</p>

<p>A more serious downside to the gate-keeping is that these gatekeepers must share your vision, or be convinced of it.  I agreed wholeheartedly with the vast majority of feedback I got from the editors and publisher, however there were times were I felt their advice was just wrong.  Not &#8220;wrong&#8221; as in &#8220;how to sell books&#8221; or &#8220;how English works&#8221;, but &#8220;that is not what I want to say&#8221;.  And so you have to convince someone to let you say what you want, or you have to compromise.  It
never once got adversarial, but it <em>was</em> frustrating to have to convince someone that my vision was correct.  I can only imagine how painful this is for
books that aren&#8217;t as objective as technology books.</p>

<p>The final downside is that not anyone can engage with a publisher.  They only take on so many books at once, and so you have to propose a book and convince them to help you develop it.  It is this process that ensures the publisher&#8217;s reputation for quality books, and provides the &#8220;instant promotion&#8221; you get by publishing with them.</p>

<p>As I mentioned, the proposal for my current book was turned down, so I decided to do all of this myself.</p>

<h2>Going it Alone</h2>

<p>Given the process I outlined when working with a publisher, you might be thinking that self-publishing is completely freeing
and reduces the process to:</p>

<ol>
<li>Write Book</li>
<li>Put on Website</li>
</ol>


<p>Nope.  Turns out it&#8217;s <em>more</em> work.</p>

<p><span class='pullquote-right' data-pullquote='I had to play the role of development editor, managing editor, publisher, copy-editor and typesetter all on my own. '>
Although the gate-keeping aspects of the professional process are frustrating at times, the process itself is a good one.  Even though I wouldn&#8217;t have a team helping me, I still wanted to produce a book of comparable quality.  That means I had to play the role of development editor, managing editor, publisher, copy-editor and typesetter all on my own.
</span></p>

<p>At this point, I had a first draft done, so I decided on this process:</p>

<ol>
<li>Cobble a toolchain together to validate I could generate the needed formats.</li>
<li>Revise and edit a chapter.</li>
<li>Sleep on edits and revise again.</li>
<li>Repeat step 3 as necessary.</li>
<li>Repeat step 2 until done with all chapters.</li>
<li>Re-read book, looking for flow and consistency.  Revise as needed.</li>
<li>Sleep on edits and repeat step 6 as needed.</li>
<li>Get a tech review from trusted friends and colleagues.</li>
<li>Revise, then go to step 6 as needed.</li>
<li>Set up needed accounts for distribution and payment processing.</li>
<li>Design cover for printed book.</li>
<li>Design website for book.</li>
<li>Copy-edit</li>
<li>Finish off toolchain.</li>
<li>Done!</li>
</ol>


<p>The role of development editor was played by me after a night&#8217;s sleep, along with removing the words &#8220;this&#8221;, &#8220;very&#8221;, and &#8220;thing&#8221; from my dictionary (so
they would show up as mis-spelled and I could eliminate them for better words).  The role of copy-editor was played by a Ruby script.  I had it look for
common mistakes that I personally make and don&#8217;t catch while reading.  It turns out, I use a <em>lot</em> of commas.  We&#8217;ll get to the typesetting in a moment.</p>

<p>The hope was that by replicating the process in a disciplined fashion, I could produce something of quality without needing
the other individuals to be involved (and, therefore, paid).  For the creative aspects of the book, this is hard to gage.  I feel like the writing in my
book is pretty good, but there&#8217;s no way to know how much better it could be, or what affect that would have on sales.</p>

<p>Other than actually getting the book written, I needed to handle typesetting it, distributing it, and getting paid for it.</p>

<h3>Distribution and Payment Processing</h3>

<p>I created a spreadsheet of about six different ways I could distribute the eBook and collect payments.  I actually did this before I got too far into the writing, because <a href="http://leanpub.com">LeanPub</a> was one of my options, and they provide a tool-chain along with distribution and payments.  Not surprisingly, they were by far the most expensive, costing 10% of the sale price plus 50 cents per copy sold<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.  Still, <em>way</em> cheaper than professional publishing, but for going on your own (and being willing to deal with the toolchain yourself—no small task as we&#8217;ll see), any other way is going to be cheaper.</p>

<p><span class='pullquote-left' data-pullquote='Setting up accounts with Send Owl and Stripe was incredibly simple, and the integration worked flawlessly. '>
I looked at Square Space, Shopify, Fetch App, Digital Delivery (now called Send Owl), and DPD.  They were all comparable in price, charging small monthly fees for distribution, with the payment processor (in most cases, Stripe), charging around 3% of the sale.  I went with Send Owl as they had the cheapest monthly rate, a good variety of coupon and discounting options, and the nicest looking default UI for the buying experience.  Setting up accounts with Send Owl and Stripe was incredibly simple, and the integration worked flawlessly.
</span></p>

<p>If only the toolchain would&#8217;ve been that easy.</p>

<h3>Toolchain</h3>

<p>The toolchain takes the source material—your writing—and produces electronic formats for distribution.  The three most common
are PDF, ePub, and MOBI.  There are various tools that can help and they are all pretty terrible, especially when you care as
much about the typography of the end-result as I do.  I wanted the PDF version to look professionally typeset.  The output of
a word processor is <em>not</em> what I wanted, and the PDFs generated by asciidoc and pandoc look horrendous to me.</p>

<p>That meant LaTeX.  The Pragmatic Programmers toolchain appeared to me to be based on LaTeX, and I had experience with it
during grad school, so I knew I could use it to get the desired output.  LaTeX is not for the faint-of-heart and while its
output is nothing short of beautiful, it is not a tool designed around ease of use.</p>

<p>LaTeX also doesn&#8217;t have a good way to produce e-reader formats from LaTeX source, and it is not enjoyable to write or edit in LaTeX&#8217;s arcane markup language.  I wrote the rough draft in Markdown, however Markdown doesn&#8217;t support cross references, which I knew I would need, so I went with Asciidoc.</p>

<p>I then set up a basic toolchain like so:</p>

<ol>
<li>Asciidoc fed into pandoc</li>
<li>pandoc generated LaTeX and ePub</li>
<li>LaTeX generated PDF</li>
<li>Calibre generated the MOBI from the ePub</li>
</ol>


<p>I spent quite a bit of time customizing the PDF output, but I think it was worth it.  I used the <a href="http://www.ctan.org/pkg/memoir">memoir</a> LaTeX package, which
makes it significantly easier to set margins, font sizes, headers, and footers, so that I could create a look that was unique,
and that would also fit the page size I planned to use for the print version.  It came out great, although was incredibly
painful and time-consuming to get right.  The world of TeX and LaTeX is not well-traveled, and so documentation is hard to
come by.</p>

<p><span class='pullquote-right' data-pullquote='Other than Memoir and LaTeX, I ended up being incredibly disappointed with every other element of the toolchain '>
Other than Memoir and LaTeX, I ended up being incredibly disappointed with every other element of the toolchain.  pandoc
stripped out all the cross-references and any other feature that its internal representation didn&#8217;t support (I added them
back via some <em>very</em> hacky Ruby scripts).  pandoc&#8217;s epub was bare-bones and underwhelming, despite the power of the format (at least on iPad).
Calibre&#8217;s Kindle output was downright awful.
</span></p>

<p>MOBI is fairly terrible and inflexible, and Calibre generated a pretty awful-looking book.  If you look at any bullet-list in
my book on a real Kindle, you&#8217;ll see what I mean.  It looks terrible.  And I didn&#8217;t realize it until I was completely done and
had no energy left to figure it out.</p>

<p>If I do this again, I will write my own ePub and MOBI generator, possibly by using Docbook or HTML as the source and
generating LaTeX, ePub, and MOBI from that, using all the power those formats offer.  LeanPub&#8217;s toolchain looks <em>decent</em>, but
the typography of the PDFs is not very good, in my opinion. It&#8217;s better than a word processor export, but still not amazing.</p>

<p>When I was mostly done with the book, I discovered <a href="http://tablo.io">Tablo</a>, which is a cloud-based toolchain aimed at getting your book into Amazon and the iBookstore.  I do not like writing in degenerate web-based editors without version control, and they provide no PDF option that I can see, so I would not use this service.   They are a better option than exporting from a word processor, though.</p>

<p><span class='pullquote-left' data-pullquote='Do not underestimate the amount of effort required to produce a nicely typeset book. '>
To make a longer story short, this is a rathole.  Do not underestimate the amount of effort required to produce a nicely typeset book.  But please,
   do not produce a poorly typeset book.  They are a chore to read.
</span></p>

<h3>The Print Version</h3>

<p>I knew I wanted to do a print run, so once I had the PDF output how I liked it, I ordered a copy from <a href="http://lulu.com">LuLu</a>, the only print-on-demand service provider I
could find. One copy is $7, and
it arrived in a few days.  It looks and feels like a real book.  The cover and paper are quite nice, and because of the typesetting, it looks great.  The
color on the cover is a bit more variable than I would like, but for the price and convenience of not having to order in bulk, this works really well.</p>

<p>Integrating them into my store was not so easy.</p>

<h3>The Buying Experience</h3>

<p>Send Owl is very straightforward: you upload whatever you are selling, set a price, and they give you a URL.  You configure payment methods and you are off to the races.</p>

<p>They also have the concept of a &#8220;package&#8221; where you can sell multiple items at once for a total reduced cost.  Once I had the print stuff ready to go, I wanted to create a package that gets you the ebook and the print book for a collective discount.  This is where I ran into trouble.  Send Owl doesn&#8217;t do fulfillment.  To get LuLu to fulfill, readers would need to buy from them direct, but LuLu provides no discount code mechanism, so I couldn&#8217;t offer the book, fulfilled from LuLu, at a reduced price to eBook buyers.</p>

<p>I also couldn&#8217;t do it the other way around, because LuLu will not provide you with the email addresses of buyers (or any way to contact them), so there was no way to get buyers of the physical book a discount code on the ebook!</p>

<p>So, I ordered 20 copies at cost and decided to fulfill them myself.  Of course, Send Owl has no way to calculate shipping, so I had to set a price that
included shipping, but still appeared to be a good deal.  To date, I&#8217;ve made $135 on the package deal, and spent $35 on shipping.  Not good.</p>

<p><span class='pullquote-right' data-pullquote='The extra step of requiring a decision hurt conversion'>
Interestingly, once I started offering the package, it required buyers to make a choice: do they get the ebook or the package?
It turns out that many of them decide to get neither.  The extra step of requiring a decision hurt conversion, so I killed the package.
Now, readers who buy the ebook get an email to buy direct form LuLu, at a reduced price.  That link is good for anyone, so
anyone with the link can get the book for that price, making it not really that &#8220;reduced&#8221;.  And now I have 17 books sitting in my
closet.
</span></p>

<p>That covers direct sales, but what about other channels?</p>

<h3>Other Sales Channels</h3>

<p>Early on, I looked at Kindle Direct Publishing (KDP).  This seemed like a pretty easy way to get listed on Amazon, and at least be a place where reviews could be written and found.  Unfortunately, Amazon reserves the right to change the price of your book, for any reason, for any length of time, without warning.  I even confirmed this with their customer support, because I thought it was too ludicrous to be true.  This means that Amazon could decide to sell my book for 99 cents, and the only thing I could do about it was remove it from the store.  Those were not terms I was comfortable with.</p>

<p>The Apple iBookStore is quite the opposite.  You set the price, Apple gets 30%, and that&#8217;s all she wrote.  Your book as to be approved, but it also has to have an ISBN, which can cost up to $200.  I may still try this, but I&#8217;d need to sell 13 copies to people who would otherwise never know about the book to make it break even.  And given how un-remarkable it looks on iPad (it looks fine, just not amazing), I&#8217;m not sure I&#8217;d want to list it there.</p>

<p>Getting the print version into Amazon and other stores is something LuLu can do, but it looks a bit onerous. You need an ISBN (and can&#8217;t use the same one for print and iBookStore—each format has to have its own), and your book must meet a laundry list of requirements before having to be approved.</p>

<p>These may turn into viable options, but for now, I&#8217;m holding off.</p>

<p>Now that I had a way for people to buy, I needed to get the word out.  I didn&#8217;t have the publishers website and marketing
channels, so I was on my own.</p>

<h3>Marketing and Promotion</h3>

<p>On launch day, I posted a link on my blog, posted twice on Twitter (once in the morning, once in the afternoon), and submitted links to both Hacker News and Reddit.</p>

<p><span class='pullquote-left' data-pullquote='I sold about 100 copies on day 1, which was a good feeling'>
Hacker News generated some discussion about how awful my website was (it was awful, since redesigned by a very kind friend), but didn&#8217;t generate many conversions (nor did Reddit).  Almost all traffic and purchases were from my blog or Twitter.  I sold about 100 copies on day 1, which was a good feeling.  After that, I&#8217;ve been getting a handful of sales every week in steady fashion.
</span></p>

<p>I posted coupon codes on Facebook and LinkedIn for $10 off.  This resulted in exactly one sale.</p>

<p>Initially I didn&#8217;t accept PayPal, as I didn&#8217;t want to deal with them.  After some feedback that I might be losing sales, I
turned it on, and most of my sales are now via PayPal.  I&#8217;ve had no problems thusfar.</p>

<p>I&#8217;ve written posts on my blog related to the book, with links, however these never generated a noticeable bump in sales.  I did a sale on &#8220;National Programmer&#8217;s Day&#8221;, which DID result in a bump (and was clearly worth it, since many of those sales would never have been made).  This is one thing that&#8217;s nice about going it on your own—you can change course like this any time, and do sales, or change the price pretty much on a whim.</p>

<p>What all this said to me was that I had &#8220;tapped out&#8221; my social network.  I&#8217;m proud of the sales I&#8217;ve made essentially based on my Twitter followers and blog audience, but I need to do something more to reach a new audience.  This is where I&#8217;m a bit stumped.</p>

<p>I plan to speak at more conferences, although I have my doubts that this is ultimately worth it, considering the cost of travel.  I&#8217;ve considered purchasing advertising, however the channels I would find most effective are places that I myself hate seeing ads, so I&#8217;m not sure how I feel about that.</p>

<h2>Which is better?</h2>

<p>As you can see, this is not so straightforward.  Going it on my own, I have a lot of freedom, can switch directions, and have complete control over all aspects of the book.  The downside, other than <em>having</em> to control those things, is that my personal reach is orders of magnitude lower than the reach of an established publisher.</p>

<p>The downside of a publisher is that I must first choose a topic they wish to publish a book on, and then deal with the process and gate-keeping that goes along with it.  But, that process produces a higher quality result.  How <em>much</em> higher is unknown.</p>

<p><span class='pullquote-right' data-pullquote='it doesn&#8217;t seem feasible to make a living entirely on writing tech books'>
It&#8217;s worth mentioning that it doesn&#8217;t seem feasible to make a living entirely on writing tech books.  While I&#8217;ve made some
good money on both efforts, neither would pay the rent or sustain even a modest lifestyle.  To do so, I would have to produce
very popular books on a frequent schedule.  There are very few tech books one would consider &#8220;seminal&#8221;, and their authors tend to
either have day jobs or a more diversified offering of services beyond writing.
</span></p>

<p>All that to say that writing books for me is a side project; something I do in my free time. Because of that, the
self-publishing route <em>felt</em> better.  It felt more agile, and much simpler.</p>

<p>That being said, I&#8217;m still getting royalties on my first book, which is going on two years old.  Will I be able to say the same about my current book two years from now?</p>

<h2>Too Long, DID Read</h2>

<p>This is a long post, but I hope you enjoyed it.  For making it all the way down here, I&#8217;m giving you $5 off my book.  <a href="http://transactions.sendowl.com/products/24086/D8D2ED13/add_to_cart">Click here</a> and enter the code <code>TLDR5</code> in the space labeled &#8220;Promo Code&#8221; before you buy.  Thanks for reading!</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>LeanPub is somewhat interesting.  They aren&#8217;t a traditional publisher, but it&#8217;s possible that their name carries some weight with readers.  I was looking at them as a toolchain vendor, although they might be interesting to consider as an additional sales channel. <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; An Introvert Goes to Dinner]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/09/27/an-introvert-goes-to-dinner.html"/>
    <updated>2013-09-27T08:52:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/09/27/an-introvert-goes-to-dinner</id>
    <content type="html"><![CDATA[<p>I&#8217;m trying out <a href="http://www.medium.com">Medium</a> as a place to do non-technical writing, mostly to keep this blog&#8217;s topic focused
on technology.  I won&#8217;t cross-post everything here, but this is my first one, <a href="https://medium.com/architecting-a-life/3c66705aac17">An Introvert Goes to Dinner</a>.  Excerpt:</p>

<blockquote><p>I actually enjoy solo trips like this. It&#8217;s a chance to be as alone as possible: I&#8217;m in a city were I don&#8217;t know anyone, typically with a lot of free time outside of whatever reason brings me to said city. I know I won&#8217;t have to talk to anyone.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; My Book is On Sale]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/09/13/my-book-is-on-sale.html"/>
    <updated>2013-09-13T11:08:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/09/13/my-book-is-on-sale</id>
    <content type="html"><![CDATA[<p>My book, <a href="http://theseniorsoftwareengineer.com">The Senior Software Engineer</a>, is on sale today for only <strong>$10!</strong>.  Happy Programmer&#8217;s Day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromebook Keyboard Slightly Innovative]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/09/06/chromebook-keyboard-slightly-innovative.html"/>
    <updated>2013-09-06T17:43:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/09/06/chromebook-keyboard-slightly-innovative</id>
    <content type="html"><![CDATA[<p>Brief follow up to my <a href="http://www.naildrivin5.com/blog/2013/08/29/a-real-keyboard-for-programmers.html">A real keyboard for programmers</a> post, I got a
<a href="http://www.google.com/intl/en/chrome/devices/">Chromebook</a> yesterday and the keyboard, while sporting the same layout as most other computers, actually
is better designed for what the Chromebook does.</p>

<p>Namely, it has no function keys, instead using them for browser navigation, window management, and hardware controls.  Most amazingly, though, it has no
Caps Lock, instead making it a Search key, which makes sense.  It&#8217;s a big key in a very prominent spot and Search is what Google wants you to do.</p>

<p><img src="http://www.naildrivin5.com/images/chromebook_keyboard.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A real keyboard for programmers?]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/08/29/a-real-keyboard-for-programmers.html"/>
    <updated>2013-08-29T07:58:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/08/29/a-real-keyboard-for-programmers</id>
    <content type="html"><![CDATA[<p>Jeff Atwood (AKA codinghorror), <a href="http://www.codinghorror.com/blog/2013/08/the-code-keyboard.html">introduced a new computer keyboard</a>, produced by WASD, called <a href="http://codekeyboards.com/">the CODE keyboard</a>:</p>

<blockquote><p>I told him that the state of keyboards was unacceptable to me as a geek, and I proposed a partnership wherein I was willing to work with him to do whatever it takes to produce a truly great mechanical keyboard.</p></blockquote>

<p>Jeff is heralding this as a &#8220;truly great mechanical keyboard&#8221;.  I was very eager to see what such a beast looked like.  Here it
is:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/5/57/ModelM.jpg" title="" ></p>

<p>Oh wait, sorry, that&#8217;s the original 101-key version of the IBM PC Keyboard, introduced in 1985.  How&#8217;d that get there?  It&#8217;s been
almost thirty years, so the CODE keyboard must be awesome, right?</p>

<!-- more -->


<p><img src="http://codekeyboards.com/img/code-34-right.jpg"></p>

<p>Hmmm.  How can a truly great keyboard still have a &#8220;Scroll Lock&#8221; key?  And what is that &#8220;Print Screen&#8221; key doing there?!  It even comes with a PS/2 adapter!</p>

<p>Aesthetically, this keyboard doesn&#8217;t do anything for me.  Between the haphazard typography and silly Windows &#8220;context menu&#8221; icon,
  I find it pretty ugly.  And no Bluetooth.</p>

<p>Let&#8217;s look deeper at the design, though.  What does it tell us?  This design has been around for thirty years, and here&#8217;s what it
has to say:</p>

<ul>
<li>Hitting &#8220;space&#8221; is the most important thing you could ever do.</li>
<li>Caps Lock and Enter are pretty important and of equal importance - they are the second easiest keys to hit outside of the home
keys.</li>
<li>Letters are more important than numbers, as numbers are farther away from the home position.</li>
<li>Control, Alt, &#8220;Meta&#8221;/Windows, and Shift are all more important than numbers (they are an equal distance away, but have much larger keys).</li>
<li>Alt is the most important modifier - it&#8217;s right where your thumbs are, making it easy to hold down while typing other things.</li>
<li>Tab and Backslash are of equal importance, and are more important than most keys.</li>
<li>Print Screen, Scroll Lock, Pause, Home, End, Page Up, Page Down, Insert, Delete and the arrow keys are all of equal importance,
but lesser than the alphanumerics and modifiers as they are set off to the right.</li>
<li>Analphabetics like &#8220;!&#8221;, &#8220;%&#8221;, and &#8220;{&#8221; are least important, because they require the shift key to enter. &#8220;+&#8221; and &#8220;~&#8221; are probably
the least relevant of these, because they are the most difficult to type: you must use Shift and your pinky, and you have to stretch for them.</li>
</ul>


<p>How much of this is actually true of writing prose?  Of writing code? I would argue that very little of it is correct.  At least
on a Mac, the location of &#8220;Alt&#8221; (called &#8220;Command&#8221;) makes sense - it&#8217;s the modifier for keyboard shortcuts.  On Windows, it&#8217;s
&#8220;Control&#8221;, and requires pinky contortions (which might be why a lot of developers map Caps Lock to Control).  Caps Lock has no
place on any keyboard.</p>

<p>There haven&#8217;t been a ton of innovations in the world of text entry over the years (at least not for writing prose or code - it&#8217;s
all been focused on text message).  There&#8217;s a smattering of &#8220;ergonomic&#8221; keyboards
some of which provide more &#8220;thumb keys&#8221;, but in general, this is the same keyboard that&#8217;s existed for the majority of our lives.  Even
alternate layouts like Dvorak keep most things they same - they just shuffle around the letters.</p>

<p>My personal favorite is the Apple keyboard, as it&#8217;s the same for external and laptop.  It bears many similarities to the classic
101 key layout, but has evolved a bit:</p>

<p><img src="http://images.apple.com/keyboard/images/hero_2.jpg"></p>

<p>Here:</p>

<ul>
<li>Stupid keys like Page Up, Scroll Lock, and Insert are gone.  They have no place in modern computing.</li>
<li>Backslash is shrunk to its rightful size.</li>
<li>Function keys are half-height to denote their unimportance, but are closer to the home position for ease of use (they also default to their alternate meanings - I&#8217;m much more likely to adjust volume than type F12).</li>
<li>The arrow keys are still close at hand, but use half-height keys to signify their lack of importance.</li>
</ul>


<p>This keyboard is classic Apple design in that it eliminates anachronistic features and is nice to look at.</p>

<p>But, it&#8217;s still basically the same keyboard as the CODE, which is the same keyboard that shipped with the first IBM PC.</p>

<h2>A better writing keyboard</h2>

<p>The current layout actually isn&#8217;t bad for writing prose (which isn&#8217;t surprising since it is an evolution of early mechanical keyboards). The letters are where you need them, with commas and periods close at hand.</p>

<p>The symbols next most-frequently needed are the exclamation mark, dash, and parenthesis.
They are all ill-placed in this layout, being far away from the home keys, while more convenient locations are taken up by the rarely-needed caret, ampersand, and asterisk.  I&#8217;d bump the parenthesis over one, putting the asterisk on the &#8220;0&#8221;, swap the exclamation mark with the ampersand, and finally, exchange the carat for the dash.</p>

<p>I&#8217;d also put the &#8220;Shift&#8221; key where &#8220;Alt&#8221; is (or perhaps divide up the space bar to allow shifting), because Shift is the
most-needed modifier when writing. I could also see a case for having the right &#8220;Alt&#8221; be a different modifier to allow accented and other adorned characters.</p>

<p>Where things get interesting is when you consider writing source code.</p>

<h2>A better coding keyboard</h2>

<p>Famously, vi was developed on a computer using an ADM3A terminal, which had this keyboard:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/KB_Terminal_ADM3A.svg/1000px-KB_Terminal_ADM3A.svg.png"></p>

<p>Notice where the arrow keys are?  Also notice what symbol is on the &#8220;Home&#8221; key?  Finally, do you see how convenient
the &#8220;@&#8221; key is to your right pinky (that&#8217;s the &#8220;execute macro&#8221; command in vi)? I find this fascinating.</p>

<h2>The Chicken and The Egg</h2>

<p>Here&#8217;s the keyboard of a Datapoint 3300, a terminal introduced in 1969 and could have easily been used in the development of the
&#8220;B&#8221; programming language, a precursor to C:</p>

<p><img src="http://www.naildrivin5.com/images/datapoint_3300_keyboard.png"></p>

<p>I&#8217;m not sure how one would enter curly-braces, but look at the positioning of keys for important symbols in C.  The parenthesis
are a bit more convienient, and the square brackets couldn&#8217;t be more at-hand, located as modified versions of M and K.  Note also
that &#8220;plus&#8221; is in a much nicer place—right under your pinky—while the asterisk is in a decent place for right-handers.</p>

<p>The 3300&#8217;s successor, the Datapoint 2200, has a bit of an odder layout, with the brackets and braces in a fairly strange position.</p>

<p><img src="http://www.naildrivin5.com/images/datapoint_2200_keyboard.png"></p>

<p>It&#8217;s hard to say if a keyboard influences language design or follows it.  Here&#8217;s the layout of the IBM 3279 terminal, in use in
the late 70&#8217;s, and you can be sure a <em>lot</em> of C code was written on this thing, just look at where the braces are!</p>

<p><img class="left" src="http://www.naildrivin5.com/images/keyboard_closeup.png" width="500"></p>

<p>It&#8217;s actually perfect for a curly-brace language.  The opening brace is a short right-pinky move away, with the closing
brace merely requiring a shift - a very easy move for right-handers.</p>

<p>Further, notice how easy it is to get to the other important symbols. The ampersand and asterisk—symbols crucial for dealing
with pointers—couldn&#8217;t be easier to access without displacing letters or numbers.</p>

<p>And here&#8217;s the keyboard of an early LISP machine:</p>

<p><img src="http://www.naildrivin5.com/images/lisp_machine_keyboard.png"></p>

<p>Notice how easy and juicy those parenthesis keys are (they are next to the &#8220;P&#8221; but also in their traditional location - the best of both worlds)?  And given the importance of the single quote, notice how convenient it is?  Of course, single quote has been in that place on a lot of old keyboards - perhaps it influenced the design of LISP?  It&#8217;s hard to say.</p>

<p>What about modern languages?</p>

<h2>A keyboard for modern languages</h2>

<p>A front-end developer is probably tired of hitting &#8220;Shift&#8221; to create HTML tags and JavaScript functions, and has probably hit the &#8220;plus&#8221; key way too often in search of the more useful dash (often used in CSS class names).</p>

<p>For me, typing a plus sign is fraught with typos, as is reaching for the exclamation point with my left hand.  In Ruby, a language that makes heavy use of the colon, I&#8217;m hitting &#8220;Shift&#8221; a lot, but the backslash key—much more rarely needed—couldn&#8217;t be more easy to get to.  Further, Ruby uses <code>snake_case</code> (which requires the shift key to access the underscore), and relies on hashes (created by curly braces) much more frequently than most languages<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>So, do I need a Ruby keyboard?  Would I even have enough <em>fingers</em> to use a Scala keyboard?</p>

<p>What would a programming language look like designed for our current thirty-year-old keyboard design?</p>

<h2>A language for modern keyboards</h2>

<ul>
<li>Perhaps carat is a better negation operator than the exclamation mark.</li>
<li>Perhaps argument lists and collection literals would all use square brackets.</li>
<li>Perhaps identifiers could have dashes in them.</li>
<li>Perhaps symbols created with Command/Option modifiers would be useful - many of them would be easier to type than the &#8220;@&#8221; sign.</li>
</ul>


<p>Could we even break some of our typing habits to use such a strange language?</p>

<p>I don&#8217;t have the answers, but I <em>do</em> know that a thirty-year-old keyboard design with mechanical switches and a Scroll Lock key isn&#8217;t what I&#8217;d call revolutionary.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>Of course, remapping tools could make this easier, and it might be worth looking into, but there&#8217;s something uncomfortable to me about having keys not do what they are labeled to do.  <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
</feed>
