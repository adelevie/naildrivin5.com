<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Naildrivin' &#10106;]]></title>
  <link href="http://www.naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://www.naildrivin5.com/"/>
  <updated>2013-04-08T14:19:37-04:00</updated>
  <id>http://www.naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[&dagger; Technological Conservatism]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/04/08/technological-conservatism.html"/>
    <updated>2013-04-08T14:09:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/04/08/technological-conservatism</id>
    <content type="html"><![CDATA[<p>John Siracusa has, in his laser-focused, analytical style, perfectly captured something about technology that I always knew, but never <em>knew</em> I knew.   His latest post, <a href="http://hypercritical.co/2013/04/07/technological-conservatism">Technological Conservatism</a> is a must read:</p>

<blockquote><p>Beneath what seems like a reasonable feature request lurks the heart of technological conservatism: <strong>what was and is always shall be.</strong></p></blockquote>

<p>(emphasis his).</p>

<p>I love everything about this, and it&#8217;s a helluva lot better than [Steve Yegge&#8217;s stinker][yegge].</p>

<p>Siracusa&#8217;s article inspires me in two ways:</p>

<ul>
<li>Stop holding &#8220;what I know&#8221; so dearly.  &#8220;Lead or bleed&#8221;, as <a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">Chad Fowler says</a></li>
<li>Stop accepting unjustified idioms &amp; conventions as being &#8220;more correct&#8221;.  &#8220;That&#8217;s just the way it&#8217;s done&#8221; is often the best
explanation for doing things a particular way, but it&#8217;s not actually a legitimate reason for anything.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What RSS Means to Me]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/03/18/what-rss-means-to-me.html"/>
    <updated>2013-03-18T08:00:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/03/18/what-rss-means-to-me</id>
    <content type="html"><![CDATA[<p>With the recent announcement that Google is shutting down Reader, there&#8217;s been a lot of talk about RSS: Is it just a geek-only thing?  Isn&#8217;t
Twitter good enough?  Why don&#8217;t you read &#8220;real&#8221; journalists instead of blogs?</p>

<p>RSS is a huge part of my online life - every time I fire up Reeder and see stories, I get very happy.  The way I use RSS (which I believe is the best way to use it) can&#8217;t be replaced by anything else that I&#8217;m aware of.</p>

<p>So, why do I think RSS is so great?</p>

<!-- more -->


<p>First, I don&#8217;t use RSS readers to &#8220;discover&#8221; anything - new blogs, what people are reading, etc.  That&#8217;s what Twitter is for.  When Google
added that feature to Reader, it became <em>really</em> annoying to clear all that crap out.</p>

<p>Instead, I view my RSS feeds as a curated, frequently updated, bookshelf just for me.
I have a list of carefully selected websites whose posts I want to read <em>all</em>
of, on a daily (or more) basis.  These websites conform to the type of reading
I like - fewer, higher quality posts, as opposed to link-bait/page-view whores
like Mashable or Engadget.</p>

<p>I&#8217;m not saying sites like Cinematical or Joystiq are worthless - there are some
great posts on there, but Twitter is sufficient to alert me to them, and I&#8217;m
rarely sad if I miss the few good posts out of the massive cruft on those
sites (I mean, do I <em>really</em> care about how many megapixels are on Sony&#8217;s
latest point-and-shoot, and do I <em>really</em> need a picture of the catering
tray at the Arrested Development shoots?).</p>

<p>It&#8217;s a shame how these sites are run, because they <em>do</em> employ connected journalists who get real scoops and write great stories. But, their business models require a massive number of posts per day and so I just can&#8217;t trim the wheat from the chaff, so I don&#8217;t visit.  Not sure if I&#8217;m alone in this.</p>

<p>So, what <em>do</em> I read?  Here&#8217;s what&#8217;s in my RSS feeds.  These are the sites I
read daily and, because this is the 21st century, I don&#8217;t want to navigate to
them one by one - I want software delivering them to me, and that&#8217;s what RSS,
and a great client, do.</p>

<h2>Comics</h2>

<ul>
<li>Dilbert - duh</li>
<li>Eye on Springfield - Screencaps from the Simpsons.  Always brings a smile.</li>
<li>Joy of Tech - Nerdy, Apple-related humor</li>
<li>xkcd - double duh</li>
<li>Thrillbent/Insufferable - Mark Waid is a genius.</li>
</ul>


<h2>Tech</h2>

<ul>
<li>Coding Horror - classic programming blog (that, honestly, is not as good as it was).</li>
<li>Daily WTF - duh.</li>
<li>Daring Fireball - quality writing and analysis by John Gruber about Apple and related stuff.  And plenty of snark.</li>
<li>Marco.org - by the creator of Instapaper and The Magazine, it&#8217;s like Daring Fireball Lite but with a bit more variety.</li>
<li>Michael Church&#8217;s blog (though I&#8217;ve skipped his recent <em>nine</em> treatises on workplace incompetence - he needs an editor).</li>
<li>Signal vs. Noise - 37 Signals blog isn&#8217;t as great as it used to be, but still some interesting stuff.</li>
<li>Github&#8217;s blog - Gotta keep up with one of the most amazing programmer tools ever made.</li>
<li>Giles Bowkett&#8217;s blog - insightful posts about Rails and other stuff.</li>
</ul>


<h2>Funtimes</h2>

<ul>
<li>Scott&#8217;s Blog of Doom - Pro Wrestling recaps and snark.  Yes, I like Pro Wrestling and yes, I have a sense of humor about it.</li>
<li>Wil Wheaton&#8217;s Blog - I came for his hilarious recaps of TNG episodes, I stay for his great writing, obsessive honesty and
general awesomeness.</li>
<li>Meeting Boy - daily quips from someone always stuck in a meeting.</li>
<li>Clients from Hell - daily reminder of why I don&#8217;t want to do consulting ever again.</li>
<li>Arrested Westeros - Arrested Development quotes atop Game of Thrones screencaps.  Gold.</li>
<li>Liquorious - drink recipes.  Yes, I make my own bitters and thus like reading cocktail recipes :)</li>
<li>Fashion It So - incredibly detailed fashion analysis of the costumes on Star Trek: The Next Generation.  I <em>do</em> work at a <a href="http://www.stitchfix.com">fashion startup</a>, you know!</li>
</ul>


<p>What all of these have in common is that they don&#8217;t generate a lot of posts (Daring Fireball is probably the most prolific, and it&#8217;s usually just a few short link posts, with occasional long-form pieces).  The posts on these sites are almost always very high quality - I want to read them and would regret missing them.</p>

<p>I can&#8217;t think of another technology besides RSS (and a great Reader client) that could more easily let me keep up with all of these websites.</p>

<h2>What makes a good reader?</h2>

<p>I&#8217;m currently using <a href="http://reederapp.com">Reeder</a>, which is available on iOS and Mac and it&#8217;s more or less perfect for my needs.  It has a minimal, yet pleasing
design, full keyboard navigation (j/k or GTFO), integration with various services (namely Instapaper) and, because it uses Google Reader as a backend,
keeps me synced everywhere.  It also works great offline, assuming you&#8217;ve downloaded your feeds when you were last online.</p>

<p>I&#8217;m hopeful that Reeder will come up with a new backend and just continue working.  Otherwise, I&#8217;ll be looking for new options.</p>

<p>But RSS is (I hope) <strong>far</strong> from dead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Your DSL Really a Type System?]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/02/28/is-your-dsl-really-a-type-system.html"/>
    <updated>2013-02-28T08:21:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/02/28/is-your-dsl-really-a-type-system</id>
    <content type="html"><![CDATA[<p>The UserVoice developer blog posted <a href="https://developer.uservoice.com/blog/2013/02/27/introducing-mutations-putting-soa-on-rails-for-security-and-maintainability/">an interesting article</a> yesterday talking about
how they solve &#8220;The Rails Problem&#8221; of complex Rails apps having obese models that stymie code re-use.  The naive approach is just <a href="http://www.naildrivin5.com/blog/2013/01/02/dci-vs-just-making-classes.html">to make classes</a>.</p>

<p>UserVoice&#8217;s approach is different: they made a DSL for describing service calls.  The thing is, it&#8217;s sort
of a type system - and a verbose one at that.</p>

<!-- more -->


<p>UserVoice&#8217;s approach is called <a href="https://github.com/cypriss/mutations">&#8220;mutations&#8221;</a> and it&#8217;s more than just
method calls.  You can specify quite a bit about our service calls, all to make the underlying logic very simple.  For example,
they have a &#8220;user signup&#8221; service and, in the most naive, but safe, way, it would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSignupService</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">signup</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">email</span><span class="p">,</span><span class="n">birthdate</span><span class="p">,</span><span class="n">newsletter_subscribe</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;name is required&quot;</span>    <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;email is required&quot;</span>   <span class="k">if</span> <span class="n">email</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;email must be valid&quot;</span> <span class="k">unless</span> <span class="n">email</span> <span class="o">=~</span> <span class="no">EMAIL_REGEX</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">,</span> <span class="n">email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span> <span class="n">birthdate</span><span class="ss">:birthdate</span><span class="p">)</span>
</span><span class='line'>    <span class="no">NewsletterSubscriptions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">if</span> <span class="n">newsletter_subscribe</span>
</span><span class='line'>    <span class="no">UserMailer</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="ss">:deliver_welcome</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">UserSignupService</span><span class="o">.</span><span class="n">signup</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">email</span><span class="p">,</span><span class="n">birthdate</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a very paranoid, but rock solid implementation.  If you screw up calling it, you&#8217;ll know why.  In Mutations, this code
would look like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSignup</span> <span class="o">&lt;</span> <span class="no">Mutations</span><span class="o">::</span><span class="no">Command</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># These inputs are required</span>
</span><span class='line'>  <span class="n">required</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">string</span> <span class="ss">:email</span><span class="p">,</span> <span class="n">matches</span><span class="p">:</span> <span class="no">EMAIL_REGEX</span>
</span><span class='line'>    <span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># These inputs are optional</span>
</span><span class='line'>  <span class="n">optional</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">boolean</span> <span class="ss">:newsletter_subscribe</span>
</span><span class='line'>    <span class="n">date</span> <span class="ss">:birthdate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># The execute method is called only if the inputs validate. It does your business action.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
</span><span class='line'>    <span class="no">NewsletterSubscriptions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">if</span> <span class="n">newsletter_subscribe</span>
</span><span class='line'>    <span class="no">UserMailer</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="ss">:deliver_welcome</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="n">outcome</span> <span class="o">=</span> <span class="no">UserSignup</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">outcome</span><span class="o">.</span><span class="n">success?</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is fairly interesting, as the &#8220;business logic&#8221; (the code in <code>execute</code>) is clean - it&#8217;s just the bare logic.  The sanity
checking and other paranoia is handled by the framework.  Likely that tests of this are simpler as well - you don&#8217;t need to
test the validations.  While this is great, I can&#8217;t help thinking that <a href="http://c2.com/cgi/wiki?GreenspunsTenthRuleOfProgramming">&#8220;every implementation
of parameter validation in Ruby contains an ad-hoc, informally-specified, bug-ridden, slow implementation of a real type system&#8221;</a>.</p>

<p>To demonstrate, here&#8217;s what this class would look like in Scala:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">UserSignup</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">signup</span><span class="o">(</span><span class="n">name</span>                <span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>             <span class="n">email</span>               <span class="k">:</span> <span class="kt">Email</span><span class="o">,</span>
</span><span class='line'>             <span class="n">birthDate</span>           <span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Date</span><span class="o">],</span>
</span><span class='line'>             <span class="n">newsletterSubscribe</span> <span class="k">:</span> <span class="kt">Boolean</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span> <span class="k">:</span> <span class="kt">User</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">user</span> <span class="k">=</span> <span class="nc">User</span><span class="o">.</span><span class="n">create_!</span><span class="o">(</span><span class="n">name</span><span class="o">,</span><span class="n">email</span><span class="o">,</span><span class="n">birthDate</span><span class="o">,</span><span class="n">newsletterSubscribe</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">newsletterSubscribe</span><span class="o">)</span>
</span><span class='line'>      <span class="nc">NewsletterSubscriptions</span><span class="o">.</span><span class="n">create</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">UserMailer</span><span class="o">.</span><span class="n">async</span><span class="o">(</span><span class="-Symbol">&#39;deliver_welcome</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>    <span class="n">user</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">user</span><span class="k">:</span><span class="kt">User</span> <span class="o">=</span> <span class="nc">UserSignup</span><span class="o">.</span><span class="n">signup</span><span class="o">(</span><span class="n">name</span><span class="o">,</span><span class="n">email</span><span class="o">,</span><span class="nc">Some</span><span class="o">(</span><span class="n">birthDate</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it.  No special DSL, no custom framework, nothing. Just the programming language.  Why?</p>

<p>First, we assume that <code>null</code> (Scala&#8217;s analog of <code>nil</code>) is always a bug.  Good Scala programs are designed this way, and it&#8217;s
not that bad to <a href="http://www.naildrivin5.com/blog/2012/07/25/a-world-without-nil.html">program without null</a>, so a declaration like <code>name:String</code> in Scala means &#8220;name is a required
parameter&#8221;.</p>

<p>Second, optional parameters use the <code>Option</code> type to indicate their optionality.</p>

<p>Next, for validating our email, we use the type system.  Instead of using a <code>String</code> for storing email addresses (the
hallmark of every <a href="http://www.globalnerdy.com/2010/05/09/new-programming-jargon/">stringly typed</a> application), we require an instance of <code>Email</code>.  We might imagine it looks like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Email</span><span class="o">(</span><span class="k">var</span> <span class="n">emailAddress</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="nc">EMAIL_REGEX</span><span class="o">.</span><span class="n">matches</span><span class="o">(</span><span class="n">emailAddress</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nc">InvalidInputError</span><span class="o">(</span><span class="s">&quot;Email address isn&#39;t valid&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">goodemail</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Email</span><span class="o">(</span><span class="s">&quot;dave@foo.com&quot;</span><span class="o">)</span> <span class="c1">// all good</span>
</span><span class='line'><span class="k">var</span> <span class="n">badEmail</span>  <span class="k">=</span> <span class="k">new</span> <span class="nc">Email</span><span class="o">(</span><span class="s">&quot;dave.foo.com&quot;</span><span class="o">)</span> <span class="c1">// exception thrown</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, our <code>UserSignup</code> code can be <strong>absolutely sure</strong> that it gets a valid email.  Validating that email happens elsewhere, as
it should.</p>

<p>Finally, our callsite uses the same method that our class defines.  Under mutations, you define a method called <code>execute</code>, but
you call a method called <code>run</code>.  Both just take a hash, making the callsite somewhat opaque as to what&#8217;s being passed in and
requiring you to know how the framework works in order to piece together what&#8217;s being called. In Scala, you just call the
method that you defined.</p>

<p>There&#8217;s no magic here, no framework, nothing other than idiomatic Scala code.  I like the way it encourages us to create a rich
set of types as opposed to strings and hashtables everywhere.  Types allow us to encode our understanding of the system,
domain, and logic - that&#8217;s what they are for.  Statically checking that those types are used properly is a sanity check that
we&#8217;ve correctly encoded our understanding.</p>

<p>Also note how not-that-verbose the Scala code is, compared to the Ruby code.  The Java equivalent could not make that claim.</p>

<p>Anyway, I think Mutations looks like a cool library, and I plan on checking it out for writing Rails apps.  I did think it was worth pointing out that the problem of separating argument validation from method logic is largely a solved problem - by statically typed languages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stitch Fix!]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/02/19/stitch-fix-slash.html"/>
    <updated>2013-02-19T08:18:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/02/19/stitch-fix-slash</id>
    <content type="html"><![CDATA[<p>Today is my first official day<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> a <a href="http://www.stitchfix.com">Stitch Fix</a>, where I&#8217;ll be joining the small but awesome engineering team!  What I love about Stitch Fix is that it&#8217;s such a simple business: buy clothes for one price, sell them at a higher price.  It&#8217;s the very essence of what a business does.  &#8220;All&#8221; we have to do is find more people to buy things from us, figure out what they want to buy, and sell to them as efficiently as possible.</p>

<!-- more -->


<p>I got an overview of their operations, and it&#8217;s amazing how well the business seems to work with almost no real automation (which is where the engineering team comes in).  This sort of thing - writing software to make other people&#8217;s jobs vastly simpler - is what I love about programming.  It reminds me of a particular user of the software I was writing for the <a href="http://en.wikipedia.org/wiki/United_States_Marshals_Service">US Marshals Service</a></p>

<p>I&#8217;d been there well over a year, and our requirements came from the government&#8217;s technical project manager.  He was an old timer,
knew the business, and gathered new requirements and features from the users (who were a wide variety of cops, administrators,
and other IT people).  But now, we were getting to meet some real users in a real district office.  We talked to a lot of
different people about how they used the software and, more importantly, what they did at their jobs.</p>

<p>Learning about Stitch Fix&#8217;s operations made me think of one person in particular from this trip.  Her team handled transporting
prisoners from jail to court - when a prisoner&#8217;s court date arrived, the Marshals had to make sure he was in a bus that morning
headed to the courthouse from jail.  Part of this woman&#8217;s job was to assemble that list on paper and hand it to the deputies in
charge of prisoner transport.</p>

<p>Unfortunately, there was no specific feature in the software to generate and print this list.  What she did instead was to call
up the list on screen via a custom query.  This was a VT100 app, so only about 20 prisoners were viewable on the screen at a
time.  She would then <em>print the screen</em>, and scroll to the next page, repeating this printing until she got the entire list.
The result was a stack of papers with 80x24 screenshots printed on them.</p>

<p><em>And then</em> she would <em>cut out the list</em> from each piece of paper before finally <em>taping the lists together</em> and copying it to
hand off to the deputy.  It took her well over an hour each day.  And she wasn&#8217;t the only one doing this - it was the simplest
way to assemble this list.</p>

<p>My colleagues and I were <em>begging</em> to fix this.  It would&#8217;ve taken one of us <em>maybe</em> a day to fully implement, fully test, and
deploy a report that would simply print out the list.  But, it wasn&#8217;t a priority on the project plan, so it never got done. This
was <em>years</em> ago, so I hope this poor woman has retired or that <em>someone</em> has fixed this.</p>

<p>At Stitch Fix, I&#8217;m looking forward to actually <em>solving</em> these sorts of problems.  These really are the reason software is so great - minimal effort &#8220;typing shit into the computer&#8221; can save <em>days</em> for someone else.  Sometimes I think my job is to eliminate the need for tape and scissors.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>I actually started yesterday, but it was a holiday, so almost no one was in the office (though I <em>did</em> get productive things done :) <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I mean by 'calling out' bad code]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/01/30/what-i-mean-by-calling-out-bad-code.html"/>
    <updated>2013-01-30T16:44:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/01/30/what-i-mean-by-calling-out-bad-code</id>
    <content type="html"><![CDATA[<p>In my <a href="http://www.naildrivin5.com/blog/2013/01/24/if-you-call-out-bad-code.html">earlier post</a> on how the <a href="https://github.com/harthur/replace">replace</a> command-line app isn&#8217;t &#8220;bad code&#8221;, I said:</p>

<blockquote><p>Now, I&#8217;m all for bad projects and bad code being called out.  Our industry produces some shitty code, and a general lack of
craftsmanship can kill business, or even people.  So bad code needs to be pointed out.</p></blockquote>

<p>The words I&#8217;m using here are a bit loaded, and actually distract from my real meaning.  I don&#8217;t want to change the post, but
thought it was worth explaining what I meant and why it&#8217;s important.</p>

<!-- more -->


<p>Uncle Bob actually weighed in on this debate <a href="http://blog.8thlight.com/uncle-bob/2013/01/30/The-Craftsman-And-The-Laborer.html">in a recent post</a>, and puts it much better:</p>

<blockquote><p>(BTW, There is nothing wrong with politely pointing out what you believe to be deficiencies in someone else&#8217;s code. You don&#8217;t want to be rude or condescending when you do this; but you do want to do it. How else can we learn unless someone points out where we&#8217;ve gone wrong? So please don&#8217;t let this event stop you from valid review and critique.)</p></blockquote>

<p>This is much more precisely what I mean, although this, too, carries the air of &#8220;I, the craftsman, am <em>correct</em>, and you, the
mere code monkey, have <em>much to learn</em>&#8221;.  What I&#8217;m really talking about is code review.</p>

<p>Code review (or code inspection) is one of the few software development techniques whose effectiveness at defect removal has been
remotely proven scientifically.  Anecdotally, it always improves the code under review, and frequently improves the way the code
author and reviewers understand the problem.  There is really no downside to code review.</p>

<p>Although a seasoned veteran developer is going to more quickly and easily identify issues with code under review than a developer
with little or no experience, it <em>doesn&#8217;t</em> mean that the reviewer/reviewee relationship has to go this way - I&#8217;ve had
developers more junior than me identify real issues with code I&#8217;ve written.  No one writes perfectly clean or correct code the
first time andk although tests help, tests only test that the code matches <em>your understanding</em> of the problem.  It doesn&#8217;t take a
20-year senior developer to point out bad naming, poor API design, confusing structure, or a missed item from the requirements.</p>

<p>As to the phrases &#8220;called out&#8221; and &#8220;our industry produces some shitty code&#8221;, I mean this more as a call to arms to experienced
developers.  <em>Make</em> the time to review code - apply your experience to the work done by those who haven&#8217;t walked in your shoes.
Everyone will be better for it.  I wrote a post last year on <a href="http://www.naildrivin5.com/blog/2012/04/02/a-protocol-for-code-reviews.html">how to do a code review</a> that should provide you a
good place to start.</p>

<p>As for unsolicited reviews of open-source software, I don&#8217;t know that trolling Github for &#8220;bad&#8221; code is the best idea, but if you
put your code out there, expect (and embrace) commentary.  Hopefully, it will be in the form of a pull request, but if not, you
can still learn something and improve your code just via conversation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; What I learned working at LivingSocial]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/01/27/what-i-learned-working-at-livingsocial.html"/>
    <updated>2013-01-27T16:43:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/01/27/what-i-learned-working-at-livingsocial</id>
    <content type="html"><![CDATA[<p>Friday was my last day at LivingSocial.  I&#8217;m moving on to a small team at a small startup that I hope will eventually be big.  My tenure at LivingSocial was short - it would&#8217;ve certainly been longer had this opportunity not come along - but I learned a lot in the 14 months I worked there.</p>

<p>Sure, I learned stuff about Rails, Ruby, service-oriented architectures, asynchronous processing, and credit card payments.  But
that&#8217;s not what I&#8217;m talking about.  Those skills are great experience and will look just fine on my resume, but I learned two
things that made me a better developer:</p>

<ul>
<li>Deliver results, not promises</li>
<li>Assume <em>everyone</em> knows what they&#8217;re doing</li>
</ul>


<!-- more -->


<h2>Deliver Results, not promises</h2>

<p>At a previous job, we had a well-tuned agile process.  We worked in sprints, with a backlog, stories, and regular releases.  After a while, however, it felt like the team was just producing story points.  Products in development were allowed to be &#8220;in progress&#8221; for weeks or months.  It got to the point where progress itself was a deliverable.</p>

<p>The problem is that promises, plans, and progress reports aren&#8217;t valuable in and of themselves.  Promises don&#8217;t solve business
problems.  Customers don&#8217;t purchase progress reports, and developers can&#8217;t ship code based on un-executed plans.  For whatever
reason, LivingSocial gets this, and gets it deeply.  When Mark Zuckerburg <a href="http://www.ft.com/cms/s/2/a2109a54-4d88-11e1-b96c-00144feabdc0.html#axzz2JHe6EgfY">told Facebook&#8217;s shareholders</a> that &#8220;code wins arguments&#8221;,
I believe this is what he meant.</p>

<p><span class='pullquote-right' data-pullquote='You&#8217;re going to ship smaller features and you&#8217;re going to ship them more quickly. '>
This cultural value leads to what I believe is the true essence of the &#8220;agile&#8221; movement.  Consider for a moment if <em>all</em> you are
as a developer is what you&#8217;ve shipped<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.  This is going to fundamentally change how you work. You&#8217;re going to ship smaller features and you&#8217;re going to ship them more quickly.  You&#8217;re going to deliver value to the business as quickly and frequently as possible.
</span></p>

<p>Because of this, big projects - which is a project that might take more than a couple months - are unusual at LivingSocial and cause a fair amount of trepidation.  In general, I believe this is a good thing.  Big projects have a way of not shipping.  Big projects have a way of getting bigger and more expensive.</p>

<p>I&#8217;m not saying that big projects are bad or that LivingSocial is incapable of taking on big projects, but we always ask ourselves
if there&#8217;s a way to do a lot less a lot more quickly, and if we can start showing results sooner.  This has not been a common attitude in anywhere else I&#8217;ve worked.</p>

<p>If your organization is truly &#8220;results-oriented&#8221;, then it means that promises, planning, and status reports are treated as
fundamentally different things than shipped product.  This isn&#8217;t to say that planning and progress are bad - LivingSocial
certainly uses a wide variety of project management tools and techniques - but they are only valuable to the extent that they
enable the delivery of results.</p>

<p>This attitude quickly affected everything I did, even down to the way I&#8217;d write email. I stopped immediately responding with &#8220;I&#8217;ll look into it&#8221;, or &#8220;I&#8217;m not sure&#8221;, or &#8220;That should be correct&#8221;.  I started to respect the inboxes of others and responded only when I had a real result (or the name of the person who could get such a result if I could not).  I stopped delivering promises and started delivering results.</p>

<p>Which brings us to the second thing I learned.</p>

<h2>Assume <em>everyone</em> knows what they&#8217;re doing</h2>

<p>Programmers have well-earned reputations as prima-donnas.  While certainly not <em>every</em> programmer develops this arrogance and lack of respect for those who &#8220;can&#8217;t code&#8221;, it&#8217;s unfortunately common.</p>

<p>As a young developer, I was rude and disrespectful to anyone who didn&#8217;t code.  I was allowed to get away with it because I did my job<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup> well and my skills were in high demand.  In my eyes, everyone was guilty until proven innocent.  I even began to apply this to other developers after seeing what government contractors are allowed to get away with.</p>

<p>During my job <em>prior</em> to LivingSocial, I matured a lot in this area.  I was fortunate to work with a great team of developers and with a largely effective, helpful, and talented team of sales and product people.  As the company grew, however, my old attitude crept back - there were just too many people to know intimately, and I started to treat everyone new as incompetent until proven otherwise.</p>

<p>When I started at LivingSocial, this attitude persisted.  The company is huge and, as one of only two developers working on a key
piece of infrastructure, I had to interact with a wide variety of people.  I knew enough to be nice and to be polite, but this
was initially a mask of my lingering bad attitude.</p>

<p>After a while, I started to notice that the stereotypical programmer attitude was not <em>nearly</em> as strong at LivingSocial as anywhere else I had worked.  The relationships between the developers and every other part of the company - customer service, IT, product, accounting - were far healthier than I&#8217;d ever experienced.</p>

<p><span class='pullquote-right' data-pullquote='everyone&#8217;s default assumption was that every member of the team was skilled, useful, and dependable '>
The result was a high functioning team that made decisions rationally, not politically.  Developers were not rude nor disrespectful to their &#8220;non-techie&#8221; counterparts, and, surprise surprise, were treated with respect themselves.  I don&#8217;t know how this evolved, but it seemed that everyone&#8217;s default assumption was that every member of the team was skilled, useful, and dependable - innocent until proven guilty.
</span></p>

<p>As I realized this, and began to adjust my attitude, it became easier and easier to work with other people.  Where in the past I would&#8217;ve dreaded having a meeting with the &#8220;idiot business guy&#8221;, I now went into these situations with an open mind, and a positive attitude - what business problem can I help solve?  Turns out that people who don&#8217;t code are pretty smart and know stuff I don&#8217;t. The end result was that, in any discussion, the best idea would almost always win (and it wasn&#8217;t necessarily the developer&#8217;s :)</p>

<p>I have no idea how to cultivate or maintain this cultural value, but when a team of developers starts with the assumption that
everyone&#8217;s working toward the same goal, and that everyone knows what they&#8217;re doing, the team functions well (and it&#8217;s a lot more
pleasant to work on such a team).</p>

<h2>Bonus third thing</h2>

<p>In July, I wrote about the <a href="http://www.naildrivin5.com/blog/2012/07/30/hungry-academy-graduates.html">Hungry Academy graduates</a>, who were all starting their new lives as LivingSocial developers:</p>

<blockquote><p>The first half of this grand experiment is over and it was a rousing success. The second half - how well they succeed in the actual work environment - begins now. I’m optimistic.</p></blockquote>

<p>It&#8217;s been about six months since I posted that and, in that time, I&#8217;ve had the pleasure of working with many of the graduates.  I don&#8217;t know the ultimate cost of turning these 24 men and women into developers, but they are the most consistently skilled group of junior developers I&#8217;ve worked with.  Hiring someone with little or no experience is always a crapshoot, and you hope that even 50% of your new hires will be this good. LivingSocial was able to produce <em>twenty four</em> of them in five months.</p>

<p>And they aren&#8217;t just code monkeys.  Yes, they can make the computer do things, but their <em>attitudes</em> are amazing.  They don&#8217;t seem saddled with
any of the baggage that myself and my peers seemed to have at that point in our careers.  It gives me hope that the &#8220;prima-donna
developer&#8221; can someday be a thing of the past.  Getting to experience their growth as developers is something I won&#8217;t soon forget, and likely something that very few professional programmers will get to experience.</p>

<h2>Moving on</h2>

<p>So that&#8217;s it.  I&#8217;m moving on to work with some ex co-workers on a small team (more on that later), building a small, successful business into a larger, more successful one.  My paycheck is going to depend on delivering results, and my ability to deliver those results is going to depend on good working relationships with all sorts of people working to make this business succeed.  I honestly don&#8217;t know if this would be possible without my 14+ months at LivingSocial.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>To be clear, this is certainly not <em>all</em> you are as a developer at LivingSocial.  This is more of a value than a mandate <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Turns out that a developer&#8217;s job is more than just typing shit into a computer. <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If you call out bad code, make sure it's bad first]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/01/24/if-you-call-out-bad-code.html"/>
    <updated>2013-01-24T11:57:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/01/24/if-you-call-out-bad-code</id>
    <content type="html"><![CDATA[<p>So, <a href="https://github.com/harthur/replace">someone shared some code</a> on Github and some classic <a href="http://harthur.wordpress.com/2013/01/24/771/">developer snark</a> rolled in.  And then
there were <a href="http://blog.steveklabnik.com/posts/2013-01-23-node">some</a> <a href="http://programmingtour.blogspot.com/2013/01/im-sorry.html">apologies</a> about it.  I saw those snarky tweets when they came through, clicked to the Github
project, didn&#8217;t understand what the issue was, and went back to work.</p>

<p>Now, I&#8217;m all for bad projects and bad code being called out.  Our industry produces some shitty code, and a general lack of
craftsmanship can kill business, or even people.  So bad code needs to be pointed out.  The question is, is this bad code?  I
think we can all agree that if it <em>is</em> bad code, we should try to point it out in a more constructive way (and I know it&#8217;s easier
said than done), but let&#8217;s forget the tone and focus on the message.  Is <code>replace</code> a silly project, or implemented in a stupid
way?</p>

<p>No, it&#8217;s not.</p>

<!-- more -->


<p>I think we can evaluate a project based on three criteria:</p>

<ul>
<li>should it exist at all?</li>
<li>does it use the right technology?</li>
<li>are the lines of code well written?</li>
</ul>


<h2>Should it exist at all?</h2>

<p><code>replace</code> is a command line app, which is something <a href="http://www.pragprog.com/titles/dccar">near to my heart</a>.  Writing a command-line app to automate
something tedious is what good developers do (even if you can wrangle <code>sed</code>, <code>awk</code>, <code>mv</code> etc. to do it without scripting
it).  The use case of <code>replace</code> is one I&#8217;ve needed many times, and, when I did, I hacked together some pile of shit shell script
to do it one-off and then promptly deleted it because then no one would know my shame in having made such bad code.</p>

<p>So, I&#8217;d say that it&#8217;s completely reasonable that this exists and wouldn&#8217;t be surprised if many people found it useful. I believe
this is why I initially didn&#8217;t understand the negative reaction.  I saw &#8220;some command line that makes search/replace across files
way easier than dealing with <code>sed</code> and friends&#8221; and figured that was useful and good.</p>

<h2>Does it use the right technology?</h2>

<p>This question is around identifying things like using Java to manage UNIX processes, or using Ruby for complex mathematical
processing - is this really the best use of the chosen technology.  In this case, the command line app is written in JavaScript and requires Node to be installed in order to execute.</p>

<p>In Avdi Grimm&#8217;s <a href="http://devblog.avdi.org/2013/01/24/im-sorry-too/">take on this</a> he writes:</p>

<blockquote><p>But I do share the opinion of a number of my colleagues that using a reactor-based framework in a language lacking native fibers, coroutines, continuations, or threads leads to messy code.</p></blockquote>

<p>I totally agree with Avdi on this, but I don&#8217;t think it&#8217;s <em>that</em> relevant to the choice of technology here.  It turns out that if
you want to write a command-line app in JavaScript, Node is the best way to make that happen, as it gives you a nice &#8220;shebang&#8221;
style way of doing things, along with some I/O functions that don&#8217;t exist in regular JavaScript. The code for <code>replace</code> <em>does</em>
have async as an option, but it&#8217;s not like this thing pops up a web server and gets lost in callback hell.  And, even if it did,
I wouldn&#8217;t say it&#8217;s de-facto wrong to use Node for a command-line app, given that it&#8217;s written in JavaScript.</p>

<p>Which leads us to ask: &#8220;should command-line apps be written in JavaScript at all?&#8221;  Of course, it depends.  JavaScript isn&#8217;t the
<em>best</em> language to write CLI apps, but it&#8217;s not a bad choice.  It&#8217;s dynamically typed, has powerful code organization techniques, and supports collection, regex, &amp; object literals.  If you write a lot of JavaScript for your primary project, writing command-line tools in JavaScript makes a lot of sense.</p>

<p>So, I think JavaScript is a fine choice of technology, and, because of this, Node is the most reasonable &#8220;JavaScript runtime&#8221; to
use.</p>

<h2>Is the code itself well written?</h2>

<p>For a command-line app, I would say it&#8217;s pretty good.  There&#8217;s a proper option parser in place, with useful and complete help
text, and all configureability is done via command-line options - as it should be.  The main thing this project is lacking is
automated tests, but it does include some sample files that can be used to exercise the app&#8217;s functionality via manual testing on
the command-line (that&#8217;s certainly better than <em>many</em> of the command-line scripts I&#8217;ve written over the years).</p>

<p>The main code itself, all contained in <code>replace.js</code>, is fairly straightforward.  The main routine is a bit complex, but it&#8217;s
not hard to follow and method extraction has clearly been used to keep the main routine readable.  I&#8217;m sure it could be done more
cleanly, but it&#8217;s pretty good as it is.</p>

<p>So, I&#8217;d say this code is pretty well written.</p>

<h2>Conclusions</h2>

<p>Maybe you don&#8217;t like Node, or JavaScript, or command-line scripts that wrap or re-implement certain UNIX pipelines.  That&#8217;s fine,
and I won&#8217;t argue those points.  But that doesn&#8217;t mean that such things are inherently bad.  One of the hardest things to learn
as a developer is to stop making emotional arguments (or publicizing emotional responses) and start making <em>technical</em> arguments.</p>

<p>I won&#8217;t claim to be great at this, but it&#8217;s something I spend time on trying to improve, even if it&#8217;s at the cost of learning
some new language or framework.  It&#8217;s an ongoing process, and this blog post is part of that process.</p>

<p>I&#8217;ll leave you with some <em>actually</em> bad code from a bad project - one of mine: a Java project to parse a YAML-like format and
turn it into XML.  At the time, I&#8217;d never heard of YAML, and the entire thing uses regexes for parsing, along with a giant mess
of a &#8220;doit&#8221; method that&#8217;s screaming for a refactor.  Feast your eyes on <a href="https://github.com/davetron5000/fauxml/blob/master/src/java/com/naildrivin5/fauxml/Parser.java#L118">this</a>.  It should never have been made, nor
should it have been done in Java, and the code is quite a mess.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bad Programming in Java is Dangerous]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/01/20/bad-programming-in-java-is-dangerous.html"/>
    <updated>2013-01-20T10:04:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/01/20/bad-programming-in-java-is-dangerous</id>
    <content type="html"><![CDATA[<p>Saw a blog post this morning titled <a href="http://cafe.elharo.com/programming/java-programming/why-functional-programming-in-java-is-dangerous/">Why Functional Programming in Java is Dangerous</a>.  Author Elliotte Rusty Harold sets up
the world&#8217;s worst straw man I&#8217;ve seen.  He talks about <a href="http://pragprog.com/magazines/2013-01/functional-programming-basics">Uncle Bob&#8217;s post</a> on the advantages of functional programming.
Elliotte&#8217;s thesis is that Java and JVM just can&#8217;t handle this sort of thing, and then sets out to prove this with some terrible code that, unsurprisingly, is terrible.  He takes this bit of Clojure</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">25</span> <span class="p">(</span><span class="nf">squares-of</span> <span class="p">(</span><span class="nf">integers</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And &#8220;re-implements&#8221; it in Java.  He does this by implementing <code>integers</code> to just allocate an array of all the integers.</p>

<p>Yeah.</p>

<!-- more -->


<p>That&#8217;s bad enough, but really, that line of Clojure isn&#8217;t functional <em>per se</em>, it&#8217;s just that aspects of a functional programming
language (namely first-class functions and lazy evaluation) make it really easy to implement that code in an efficient way.</p>

<p>Elliotte is just flat wrong that you can&#8217;t do this in Java.  I will now present the Java version of the Clojure version.</p>

<h2>As always, laziness is the key to success</h2>

<p>The key to making it work is to use a lazy list which, in Java, is called <code>Iterator</code>.  If you have never used Java before,
<code>Iterator</code> is basically this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">();</span> <span class="c1">// true if there are more elements</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">T</span> <span class="nf">next</span><span class="o">();</span>          <span class="c1">// get the next element</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">();</span>     <span class="c1">// remove the element you just got (optional)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, let&#8217;s make a list of all the integers.  The top of the collection food chain in Java is <code>Iterable</code>, which has one method
that just returns an <code>Iterator</code>.  We&#8217;ll make an <code>Iterator</code> of all the integers and wrap it up in an anonymous <code>Iterable</code> for use by anyone:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">IntegersIterator</span> <span class="kd">implements</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">nextInt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nextInt</span> <span class="o">&lt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">nextInt</span><span class="o">++;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nextInt</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">IntegersIterator</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is almost all there is to it.  To make the <code>squares-of</code> function, we need to maintain the &#8220;laziness&#8221; of our implementation.
To do this, we&#8217;ll create a squaring <code>Iterator</code> that proxies<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> through to another <code>Iterator</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SquaringIterator</span> <span class="kd">implements</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">original</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">SquaringIterator</span><span class="o">(</span><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">iter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">original</span> <span class="o">=</span> <span class="n">iter</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">original</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">original</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">original</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">squaresOf</span><span class="o">(</span><span class="kd">final</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">SquaringIterator</span><span class="o">(</span><span class="n">seq</span><span class="o">.</span><span class="na">iterator</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We <em>are</em> starting to see some of Java&#8217;s warts here.  Because we&#8217;re creating an anonymous inner class, that class cannot access
parameters or local variables unless we declare them <code>final</code> - we&#8217;ve declared the parameter to <code>squaresOf</code> as such.  This is because Java doesn&#8217;t support real closures.  We could&#8217;ve
made a class that implements <code>Iterable&lt;Integer&gt;</code> just for our <code>squaresOf</code> function, but that feels like overkill for this
increasingly contrived example.</p>

<p>OK, now that we have a way to get <em>all</em> the integers <em>and</em> square them without <em>actually instantiating</em> all the integers, we can
just take the first 25 off:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">take</span><span class="o">(</span><span class="mi">25</span><span class="o">,</span><span class="n">squaresOf</span><span class="o">(</span><span class="n">integers</span><span class="o">())));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">take</span><span class="o">(</span><span class="kt">int</span> <span class="n">numToTake</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">seq</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">numToTake</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">results</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">results</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this code sure enough works quickly and without incident (full listing <a href="https://gist.github.com/4579317">here</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&gt;</span> <span class="n">java</span> <span class="o">-</span><span class="n">cp</span> <span class="o">.</span> <span class="n">Functional</span>
</span><span class='line'><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">25</span><span class="o">,</span> <span class="mi">36</span><span class="o">,</span> <span class="mi">49</span><span class="o">,</span> <span class="mi">64</span><span class="o">,</span> <span class="mi">81</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">121</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">169</span><span class="o">,</span> <span class="mi">196</span><span class="o">,</span> <span class="mi">225</span><span class="o">,</span> <span class="mi">256</span><span class="o">,</span> <span class="mi">289</span><span class="o">,</span> <span class="mi">324</span><span class="o">,</span> <span class="err">\</span>
</span><span class='line'><span class="mi">361</span><span class="o">,</span> <span class="mi">400</span><span class="o">,</span> <span class="mi">441</span><span class="o">,</span> <span class="mi">484</span><span class="o">,</span> <span class="mi">529</span><span class="o">,</span> <span class="mi">576</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, it&#8217;s certainly possible to create lazy data structures in Java. There are a few things bad about this, however:</p>

<ul>
<li>It&#8217;s very special purpose - if we needed a <code>doublesOf</code> or <code>squareRootsOf</code>, we&#8217;d create a lot of duplicate code</li>
<li>It&#8217;s not very OO - we&#8217;d expect our code to be something like <code>squaresOf(integers).take(25)</code>.</li>
</ul>


<p>Let&#8217;s fix it!</p>

<h2>Functions to the rescue</h2>

<p><em>Now</em> we&#8217;re going to need a <code>Function</code> interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">interface</span> <span class="nc">Function1</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span><span class="n">R</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">R</span> <span class="nf">apply</span><span class="o">(</span><span class="n">A</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Think of <code>A</code> is &#8220;argument&#8221; and <code>R</code> as &#8220;return value&#8221;.</p>

<p>With this, we can genericize our <code>SquaringIterator</code> into a <code>TransformingIterator</code> that takes a function for transformation and
the <code>Iterator</code> to transform:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TransformingIterator</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span><span class="n">R</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="n">original</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Function1</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">function</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">TransformingIterator</span><span class="o">(</span><span class="n">Function1</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">function</span><span class="o">,</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="n">iter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">original</span> <span class="o">=</span> <span class="n">iter</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">function</span> <span class="o">=</span> <span class="n">function</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">original</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">R</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="n">value</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">original</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">function</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">original</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Now</em>, we can make our <code>squaresOf</code> method like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">squaresOf</span><span class="o">(</span><span class="kd">final</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Function1</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">square</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Function1</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">TransformingIterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">square</span><span class="o">,</span> <span class="n">seq</span><span class="o">.</span><span class="na">iterator</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>TransformingIterator</code>, we could make a <code>doublesOf</code> method like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">doublesOf</span><span class="o">(</span><span class="kd">final</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Function1</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">square</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Function1</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">TransformingIterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">square</span><span class="o">,</span> <span class="n">seq</span><span class="o">.</span><span class="na">iterator</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, creating a function in Java is messy, but it&#8217;s not impossible, and doesn&#8217;t affect the runtime performance of our
application.  This ability to extract structure and code vs. logic is the true power of functional programming.</p>

<h2>Making it more OO</h2>

<p>Now, what about that pesky <code>take</code> method?  We can handle that pretty easily by creating an implementation of <code>Iterable</code> that adds
the necessary methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">abstract</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">RichIterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">RichIterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">fromIterable</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">ProxyRichIterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">seq</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">RichIterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">take</span><span class="o">(</span><span class="kt">int</span> <span class="n">numToTake</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">numToTake</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">results</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">fromIterable</span><span class="o">(</span><span class="n">results</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">toList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">T</span> <span class="nl">t:</span> <span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ProxyRichIterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">RichIterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">seq</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ProxyRichIterable</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">seq</span> <span class="o">=</span> <span class="n">seq</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">seq</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we create a means of converting any <code>Iterable</code> (i.e. any Java collection) into our <code>RichIterable</code>, and also provide a
way to turn it back into a vanilla list.  We replace all use of <code>Iterable</code> in our code with <code>RichIterable</code> and our <code>main</code> method looks more &#8220;OO&#8221;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">squaresOf</span><span class="o">(</span><span class="n">integers</span><span class="o">()).</span><span class="na">take</span><span class="o">(</span><span class="mi">25</span><span class="o">).</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, it still runs great (updated source <a href="https://gist.github.com/4579399">here</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&gt;</span> <span class="n">java</span> <span class="o">-</span><span class="n">cp</span> <span class="o">.</span> <span class="n">Functional</span>
</span><span class='line'><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">25</span><span class="o">,</span> <span class="mi">36</span><span class="o">,</span> <span class="mi">49</span><span class="o">,</span> <span class="mi">64</span><span class="o">,</span> <span class="mi">81</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">121</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">169</span><span class="o">,</span> <span class="mi">196</span><span class="o">,</span> <span class="mi">225</span><span class="o">,</span> <span class="mi">256</span><span class="o">,</span> <span class="mi">289</span><span class="o">,</span> <span class="mi">324</span><span class="o">,</span> <span class="err">\</span>
</span><span class='line'><span class="mi">361</span><span class="o">,</span> <span class="mi">400</span><span class="o">,</span> <span class="mi">441</span><span class="o">,</span> <span class="mi">484</span><span class="o">,</span> <span class="mi">529</span><span class="o">,</span> <span class="mi">576</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what did we learn?  We learned that you can&#8217;t just write shitty code in Java and then say Java and the JVM can&#8217;t handle
functional programming.  Java can <em>absolutely</em> handle functional programming, even though Java&#8217;s syntax makes it a bit painful.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>See how I used the name of a design pattern instead of painfully explaining to you what a proxy is?  Handy, isn&#8217;t it? <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Dependency Injection Really Is]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/01/07/what-dependency-injection-really-is.html"/>
    <updated>2013-01-07T08:55:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/01/07/what-dependency-injection-really-is</id>
    <content type="html"><![CDATA[<p>Both <a href="http://david.heinemeierhansson.com/2012/dependency-injection-is-not-a-virtue.html">DHH</a> and <a href="http://www.tbray.org/ongoing/When/201x/2013/01/06/Unit-testing-and-dependency-injection">Tim Bray</a> make great points about &#8220;dependency injection&#8221; and its issues regarding Ruby and
testing.  My colleague <a href="http://weblog.therealadam.com/2013/01/03/design-for-test-vs-design-for-api/">Adam Keys</a> makes a similar point, though doesn&#8217;t call his anti-pattern &#8220;dependency injection&#8221;.</p>

<p>The scare quotes are because neither DHH nor Tim are accurately representing the purpose of dependency injection.  Dependency
Injection is not about a framework, XML, factories, or testing.  It&#8217;s about simplifying code.  Let&#8217;s see how.</p>

<!-- more -->


<p>I&#8217;m going to ignore Rails for the moment, and just talk about designing classes in Ruby<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.  Let&#8217;s take the example
domain from <a href="http://www.naildrivin5.com/blog/2013/01/02/dci-vs-just-making-classes.html">my previous post</a>, and expand it a bit.  We start with a class that implements purchasing logic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PurchaseProcess</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">purchase_product</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">product</span><span class="p">)</span>
</span><span class='line'>    <span class="n">customer</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">product</span><span class="o">.</span><span class="n">price</span><span class="p">)</span> <span class="k">if</span> <span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">customer</span><span class="o">.</span><span class="n">invoices</span> <span class="o">&lt;&lt;</span> <span class="no">Invoice</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">product</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve simplified things a bit, but basically we charge the customer, create an invoice, and add it to their invoices.  This class
gets used as part of the regular purchase flow of our website.  Suppose that we want to run a promotion such that, whenever
someone signs up for our mailing list, they get a free keychain.  They&#8217;ll get this keychain the same as if they bought it, but
it&#8217;s a special product with a price of zero, so they get it for free.</p>

<p>Let&#8217;s make a class for this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">KeychainPromotion</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_up_for_mailing_list</span><span class="p">(</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="no">MailingList</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">keychain</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;promo-keychain&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="no">PurchaseProcess</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">purchase_product</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">keychain</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is straightforward, simple code.  We add the customer to the mailing list, find the promotional keychain, and &#8220;purchase&#8221; it.</p>

<p>What are the dependencies of this class?</p>

<ul>
<li>The <code>MailingList</code> object</li>
<li>The <code>Product</code> object</li>
<li>The <code>PurchaseProcess</code> object</li>
<li>An instance of the <code>PurchaseProcess</code> class</li>
</ul>


<p>Of those four dependencies, only three are directly related to the business process of our promotion. The <code>PurchaseProcess</code>
object is only needed to create an instance of that class so we can call <code>purchase_product</code> on it.  Let&#8217;s inject this dependency
and see what happens.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">KeychainPromotion</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">purchase_process</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@purchase_process</span> <span class="o">=</span> <span class="n">purchase_process</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_up_for_mailing_list</span><span class="p">(</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="no">MailingList</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">keychain</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;promo-keychain&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@purchase_process</span><span class="o">.</span><span class="n">purchase_product</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">keychain</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our class is a bit longer, but it has fewer dependencies.  It also does fewer, things, making it more cohesive.  It&#8217;s <em>only</em> about this promotion, and no longer about creating instances of a shared class.  If the way in which <code>PurchaseProcess</code> instances get created needs to change, we will not have to change this class, meaning its <em>fan out</em> is lower.  It is <em>simpler</em>, by any objective definition.</p>

<p>Other than simplicity, what are some advantages of this approach?</p>

<ul>
<li>We can use an alternate purchase process if we want.  Swapping purchase processes is certainly <a href="http://en.wikipedia.org/wiki/YAGNI">YAGNI</a>, but it&#8217;s not hurting anything and it&#8217;s a nice benefit.</li>
<li>Flexibility in testing.  Since we no longer depend on the <code>PurchaseProcess</code> object, we have more options regarding how we test <code>KeychainPromotion</code>.  Before, our only option was to mock/stub <code>new</code>, but now we can just pass in anything that responds to <code>purchase_product</code>.  Our test will be simpler because of this.</li>
</ul>


<p>Note that these are <em>side</em> benefits, not ends unto themselves.  Code that&#8217;s easier to test isn&#8217;t better because of that fact -
it&#8217;s the other way around.  Code that&#8217;s well designed is easier to test.  We have some <a href="http://www.naildrivin5.com/blog/2012/06/27/what-is-better-code.html">objective measures</a> of the
quality of code, and many of them lead to simpler testing.</p>

<p>This is the mistake that both DHH and Tim make in their posts - they assume that the reason for using dependency injection is to
make your code &#8220;easier&#8221; to test.  In DHH&#8217;s (and Adam&#8217;s) case, they rightly call out method-level injection as bad.  I would agree,
and, outside of the <a href="http://stackoverflow.com/questions/1722726/is-the-scala-2-8-collections-library-a-case-of-the-longest-suicide-note-in-hist">mind-bending Scala collections framework</a>, you don&#8217;t see it much.  Tim asserts that DI is nothing but needless indirection, but that&#8217;s not it at all.</p>

<p>Suppose we want to inject more dependencies into our <code>KeychainPromotion</code> class.  Let&#8217;s replace the &#8220;hard-coded&#8221; dependency on
the <code>Product</code> object with an injected finder and see what happens.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">KeychainPromotion</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">purchase_process</span><span class="p">,</span><span class="n">product_finder</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@purchase_process</span> <span class="o">=</span> <span class="n">purchase_process</span>
</span><span class='line'>    <span class="vi">@product_finder</span>   <span class="o">=</span> <span class="n">product_finder</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_up_for_mailing_list</span><span class="p">(</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="no">MailingList</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">keychain</span> <span class="o">=</span> <span class="vi">@product_finder</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;promo-keychain&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@purchase_process</span><span class="o">.</span><span class="n">purchase_product</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">keychain</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is this better?  We haven&#8217;t reduced the <em>number</em> of dependencies on this class, even though we increased the complexity of the
constructor.  The <code>sign_up_for_mailing_list</code> method is also more complex because it now depends on a new ivar, <code>@product_finder</code>,
  which has a higher scope than a direct use of <code>Product</code>.  While it&#8217;s true that <code>KeychainPromotion</code> is more flexible and we have more flexibility in testing it, we&#8217;ve made the code itself more complex.</p>

<p>I would argue that injecting this particular dependency is not an improvement, and that this code is worse than before.</p>

<p>Is that the fault of the <em>concept</em> of Dependency Injection? Of course not.  Dependency Injection, like any other pattern, technique, or tool, is only useful when it&#8217;s used properly.  It&#8217;s true that dynamic languages like Ruby provide many other tools that solve problems that Dependency Injection <em>can also solve</em>, and they often do it better.  But it doesn&#8217;t mean that the entire
concept is worthless.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>Rails <strong>is</strong> a container, and it manages our code for us, the same as Spring or Guice.  As such, coding &#8220;The Rails Way&#8221; has significant advantages that can outweigh those that we might see by using Dependency Injection <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; DCI vs Just Making Classes]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/01/02/dci-vs-just-making-classes.html"/>
    <updated>2013-01-02T15:11:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/01/02/dci-vs-just-making-classes</id>
    <content type="html"><![CDATA[<p>There&#8217;s been lots of talk about <a href="http://en.wikipedia.org/wiki/Data,_Context,_and_Interaction">DCI</a> in the Ruby community lately.  As I mentioned, I am only partway through Jim
Gay&#8217;s <a href="http://clean-ruby.com">unfinished book on the subject</a>, but I ran across a blog post that had a more substantial example in it.</p>

<p>Titled <a href="http://rebo.ruhoh.com/why-dci-contexts/">Why DCI Contexts?</a>, someone named <a href="http://rebo.ruhoh.com/about/">rebo</a>, shows a starting point of &#8220;normal&#8221; code, then &#8220;DCIzes&#8221; it, then walks through adding new features to the system.  It&#8217;s a bit long, but his explanation is great, and it shows a <em>lot</em> more than just calling <code>.extend</code> on an object - he clearly demonstrates how roles and contexts are used to implement specific use cases.</p>

<p>Despite the deftness of his explalnation, I find the result code entirely too complex, thanks to confusing abstractions, a
needless DSL and leaky abstractions.  It would all have been a lot simpler if he Just Used Classes&reg;</p>

<p>Let&#8217;s see why.</p>

<!-- more -->


<p>In rebo&#8217;s post, he has a basic domain of a <code>User</code>, a <code>Product</code>, an <code>Invoice</code>, and <code>Accounts</code> (which groups invoices).  The classes he creates for them are reasonable structs - they just hold data and have no real methods.  He then shows the implementation of a basic use case - when someone buys something an invoice is created and added to their accounts.  Here&#8217;s the code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PurchasingProcess</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">AliasDCI</span><span class="o">::</span><span class="no">Context</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">product</span><span class="p">,</span> <span class="n">accounts</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assign_named_roles</span><span class="p">(</span><span class="ss">:customer</span>            <span class="o">=&gt;</span> <span class="n">user</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">:selected_product</span>    <span class="o">=&gt;</span> <span class="n">product</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">:accounts_department</span> <span class="o">=&gt;</span> <span class="n">accounts</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span>
</span><span class='line'>    <span class="n">in_context</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">customer</span><span class="o">.</span><span class="n">buy_product</span>
</span><span class='line'>      <span class="n">accounts_department</span><span class="o">.</span><span class="n">generate_invoice</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">role</span> <span class="ss">:customer</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">buy_product</span>
</span><span class='line'>      <span class="n">purchases</span> <span class="o">&lt;&lt;</span> <span class="n">selected_product</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">role</span> <span class="ss">:selected_product</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">invoice_desc</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">description</span><span class="si">}</span><span class="s2"> @ </span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2"> ea.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">role</span> <span class="ss">:accounts_department</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">generate_invoice</span>
</span><span class='line'>      <span class="n">invoice</span> <span class="o">=</span>  <span class="no">Invoice</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">customer</span><span class="o">.</span><span class="n">address</span><span class="p">,</span> <span class="n">selected_product</span><span class="o">.</span><span class="n">invoice_desc</span><span class="p">,</span> <span class="n">total</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">invoices</span> <span class="o">&lt;&lt;</span> <span class="n">invoice</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>My first thought looking at this was &#8220;WTF?&#8221;  This is <em>entirely</em> too complex for the task at hand.  It looks like it would be hard
to write, hard to test, and hard to read (not to mention <a href="http://tonyarcieri.com/dci-in-ruby-is-completely-broken">hard to execute</a>).</p>

<p>Why?</p>

<p>Let&#8217;s start with the definition of <code>call</code>, and let&#8217;s assume that we understand that <code>in_context</code> runs the code inside our &#8220;DCI
Container&#8221; that enables the DSL.  This is a big assumption, but I&#8217;ll make it.  The first call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">customer</span><span class="o">.</span><span class="n">buy_product</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is <code>customer</code>?  Where is it defined?  I see no method with that name.  I&#8217;ll need to understand that the hash given to
<code>assign_named_roles</code> renames the object given to the constructor.  OK, what about <code>buy_product</code>, the method that&#8217;s being called?</p>

<p>It&#8217;s not a method on <code>User</code>, so I&#8217;ll need to hunt down inside my class to find a definition, making sure to note if it is, or
is not, defined inside a <code>role :customer</code> block - presumably I could do <code>role :foobar</code> and define a method <code>buy_product</code> and that
would <em>not</em> be what I&#8217;m looking for.</p>

<p>Looking at that method, I see that it&#8217;s mutating an array called <code>purchases</code>, giving it the value of <code>selected_product</code>.
<code>purchases</code> is <em>not</em> a role, nor was it passed to <code>assign_named_roles</code>, so where is <em>it</em> coming from?</p>

<p>Turns out, it&#8217;s an attribute of <code>User</code> and that the method definition we are reading is being executed inside the binding of the <code>User</code> instance passed to the constructor.  Finally, we see that that <code>selected_product</code> <em>is</em> a role, an instance of <code>Product</code>.</p>

<p>One line down, one to go.  Whew!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">accounts_department</span><span class="o">.</span><span class="n">generate_invoice</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, we confirm that <code>accounts_department</code> is not a method defined locally, but is an instance of <code>Accounts</code> set up in the constructor. The method <code>generate_invoice</code> is a method defined at the bottom of our class presumably added to the <code>Accounts</code> instance by the DSL.  As before, <code>invoices</code> is an attribute of <code>Accounts</code>, and our method is executing inside that binding, which we just have to remember to piece together.</p>

<p>And this is for a <em>two line method</em> in a <em>very simplified domain</em>.  Exactly <strong>how</strong> is this supposed to make my job of reading
and writing code easier?!  And how the heck do we test all this?  <em>More</em> DSLs?</p>

<p>rebo states his case for this complexity and insanity by showing some &#8220;fat model&#8221; code as well as some unscoped &#8220;glue code&#8221; that
implements this use case.  This code is, indeed bad, too.  It puts logic on the models that really don&#8217;t belong there.  Can we do better?  Yes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PurchasingProcess</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">purchase_product</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">product</span><span class="p">,</span><span class="n">accounts</span><span class="p">)</span>
</span><span class='line'>    <span class="n">customer</span><span class="o">.</span><span class="n">purchases</span> <span class="o">&lt;&lt;</span> <span class="n">product</span>
</span><span class='line'>    <span class="n">invoice_desc</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">invoice</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">invoice</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2"> @ </span><span class="si">#{</span><span class="n">invoice</span><span class="o">.</span><span class="n">price</span><span class="si">}</span><span class="s2"> ea.&quot;</span>
</span><span class='line'>    <span class="n">accounts</span><span class="o">.</span><span class="n">invoices</span> <span class="o">&lt;&lt;</span> <span class="no">Invoice</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">customer</span><span class="o">.</span><span class="n">address</span><span class="p">,</span><span class="n">invoice_desc</span><span class="p">,</span> <span class="n">invoice</span><span class="o">.</span><span class="n">total</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yup. Instead of bringing in a complex framework, confusing monkeypatching, and dynamic methods created in non-obvious bindings, I
just <em>made a class</em> that implements the <em>business logic</em>, and write the requisite three lines of code.</p>

<p>I didn&#8217;t have to change the core business objects, nor should I have - the format of <code>invoice_desc</code> is, so far, particular to
this use case, and needn&#8217;t be part of the <code>Invoice</code> class.  To understand this, we don&#8217;t need to leap too far: the <code>customer</code> is a
customer that we know contains <code>purchases</code>.  We add the passed <code>Purchase</code> instance, <code>purchases</code>, to that, then construct a
description of the invoice before adding a new invoice to the <code>accounts</code> instance we were given.</p>

<p>The method that implements our business logic is all based on parameters or local variables - there is no global or class-level
state to worry about, and each object is named for the type of class it is - no need to mentally translate when reading the code.
Assuming you understand what the core domain objects are, you can read and comprehend this entire business process on a VT100
terminal (if you had to).</p>

<p>If this business process needs to get more complex, we can use method extraction as a first step to fight complexity, and could
just <em>make more classes</em> if it gets worse. If it turns out that <em>another</em> business process needs to share some of this logic <em>by
design</em>, we can just apply <a href="http://www.naildrivin5.com/blog/2012/12/19/re-use-in-oo-inheritance.html">other methods of re-use</a> to deal with it then.</p>

<p>So, what is so wrong with this that we need some complex container to manage what should be just a few lines of code?  I do not
know.  I&#8217;m willing to concede this as a straw man argument, to a certain degree, but I&#8217;m still waiting to see how DCI is an
improvement over basic structured programming.</p>
]]></content>
  </entry>
  
</feed>
