<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Naildrivin' &#10106;]]></title>
  <link href="http://www.naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://www.naildrivin5.com/"/>
  <updated>2013-11-18T09:33:53-05:00</updated>
  <id>http://www.naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Square Wallet is Almost Awesome]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/11/18/square-wallet-is-almost-awesome.html"/>
    <updated>2013-11-18T08:43:00-05:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/11/18/square-wallet-is-almost-awesome</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve ever been on a vacation where you don&#8217;t have perfectly fast network access, and tried to use popular social-networking
apps, you can probably identify with my tweet:</p>

<blockquote class="twitter-tweet"><p>This I know: the developers of Instagram, Facebook, and Tripit have never been on a vacation where they used the app they develop.</p>&mdash; ❺➠ David Copeland (@davetron5000) <a href="https://twitter.com/davetron5000/statuses/393993045265244160">October 26, 2013</a></blockquote>


<script async src="http://www.naildrivin5.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I use a lot of applications from companies that present themselves as developer-friendly, agile, forward-thinking, and
product-focused.  Despite that, these products have very obvious flaws that, to my thinking, reduce the value to both the company
and its users (unlike, say, Google Ads, which only reduce value to users).</p>

<p>Tearing apart the three apps I mention above will be an undertaking, so I&#8217;d like to start with an app I really, really like, and
use almost every day: Square Wallet.</p>

<!-- more -->


<h2>What it is</h2>

<p>If you haven&#8217;t used Square Wallet, it&#8217;s ostensibly an app to allow you to pay for things with Square instead of using cash or
your credit card.  The happy path case is that you walk into a participating store (which I think is almost exclusively
Starbucks), and the store scans a QR code on your phone, conducting the transaction.</p>

<p>I work frequently out of Starbucks because a) they reliably have iced tea, b) their Internet is usually pretty decent, and c)
it&#8217;s close to home.  So, I used Square Wallet a <em>lot</em>.  And I can tell you, there&#8217;s <em>no way</em> the product team for this app
really, truly uses it (and I&#8217;d bet my life savings no one on the product team uses an iPhone 4).</p>

<h2>How it works.</h2>

<p>The basic flow of the app is as follows:</p>

<ol>
<li>Launch the app</li>
<li>App uses your location to identify Square-supported businesses</li>
<li>Tap on Starbucks</li>
<li>You are shown a QR code</li>
<li>Scan the QR code</li>
</ol>


<p>This seems reasonable enough, but if you have a close eye, you can spot the problem.</p>

<h2>The problem</h2>

<p>First, let&#8217;s talk about steps 1 and 2.  The process of launching the application and doing the location search are <em>slow</em>.</p>

<p>On older iPhones, just launching is interminable:</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_startup.PNG" width="300" title="'If you have an iPhone 4, you are very familiar with this screen'" ></p>

<p>And then, the location lookup takes what seems like <em>forever</em>, especially if you don&#8217;t have really fast Internet.</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_location.PNG" width="300" title="'Don't have blazing-fast Internet?  You will spend a lot of time here'" ></p>

<p>Once that&#8217;s done, I then need to navigate a two-dimensional list of business to find the one I want.</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_selection.PNG" width="300" title="'One of these is not like the other'" ></p>

<p>Starbucks is <em>almost</em> always in the upper-left.  Almost.  Visually navigating a two
dimensional list is markedly more difficult than a one-dimensional list.  This screen may look nice, but it&#8217;s hard to use.</p>

<p>So, the way I end up using this is to &#8220;boot up&#8221; the app when I walk into Starbucks, so that the QR code is ready by the time I
get through the line (I have a brand new iPhone 5S).</p>

<p>What I don&#8217;t understand is that all of this is to get the application to reveal a static image of a QR code that, as far as I can
tell, never changes.  I could just print it out.  This should be the default behavior of the application—I should launch it and
see this QR code.  Or, better, the application should use Passbook, like the official Starbucks app:</p>

<ol>
<li>Take out iPhone when I&#8217;m in Starbucks</li>
<li>Swipe open the lock screen—now displaying a Passport alert—to display a scannable image</li>
<li>Scan and Pay</li>
</ol>


<p>It&#8217;s <em>fast</em>.  It&#8217;s fast for me and fast for the cashier.  The reason I don&#8217;t use it is because it requires Funny Money™.  I have to constantly reload it and manage the balance.  Square solves that problem perfectly by being a proxy to my credit card.  It seems to me that if the idea is to use my location to present me with information to pay the business at that location, Passbook is the exact feature needed to implement that<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>So I have to wonder what the Square Wallet product team actually <em>does</em> with Square Wallet and where are their
priorities about product features?  Maybe they never go to Starbucks and only go to some food truck that, because it&#8217;s in San Francisco, actually accepts Square Wallet directly.  Have they even used the Starbucks app?  If I were on that team, the second I used the Starbucks app, I&#8217;d bring it to the team&#8217;s attention and get to work.  I would take it as a point of pride that my app wasn&#8217;t as easy to use as Starbucks&#8217;.</p>

<p>Perhaps I&#8217;m just not using the app as intended.  Perhaps if I dig deeper, I can discover the true features I&#8217;m supposed to be
using.  Doing so only raises more questions about the product decisions that have gone into this app.</p>

<h2>The Deeper We Go, The More Shallow it Gets</h2>

<p>After the location search, here&#8217;s the screen you&#8217;ll see again for reference:</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_selection.PNG" width="300" title="'One of these is not like the other'" ></p>

<p>When I first saw this, I was really excited that I could pay with Square at all of these locations (Sundevich is one of my
favorite DC sandwich shops).  To be clear, I would&#8217;ve gone out of my way to visit some of these places because the
at-the-counter experience of Square Wallet is so awesome.  These business would get more money out of me, if I could use Square
Wallet.</p>

<p>Turns out that not a single entry in this list, save Starbucks, allows me to pay with Square Wallet.  I can&#8217;t think of any reason why they show up in the list at all.  Clicking one reveals pretty much nothing:</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_move_along.PNG" width="300" title="'Uhhhh....'" ></p>

<p>The only thing here to do is &#8220;Share&#8221;:</p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_share.PNG" width="300" title="'OK....'" ></p>

<p><img src="http://www.naildrivin5.com/images/square_wallet_share_email.PNG" width="300" title="'OK....'" ></p>

<p>Who would ever do this?  Why is this even here?  Why did the application automatically search for businesses, download images, and provide me a screen full of links to useless information where I can do pretty much nothing?  All I wanted to do was bring up a static QR code to scan at Starbucks so that I could get iced tea, and Square could get a bit off the top for providing the service.</p>

<h2>A Bit Off the Top</h2>

<p>Unlike Facebook and Instagram, Square has a pretty clear and easy to understand business model: take a percentage of everything
you buy with Square<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.  As the scrappy newcomer having to compete with cash and credit cards, their only real way in is to make
paying for things with Square <em>easier</em> than cash or credit cards.</p>

<p>Given this, almost every feature of Square Wallet stands in defiance of that simple goal.  I cannot fathom the thinking behind
adding a useless share feature at instead of streamlining the flow that <em>directly makes them money</em>.  The Square
Wallet team should be laser-focused on ensuring that the app makes it as easy as possible for me to pay using Square.  That team
should, in large part, be judged by how much revenue comes in from the app.</p>

<p>Instead, the vast majority of the app consists of phoned-in user acquisition features that get in the way of me giving them my
money<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<p>I still use Square Wallet and will continue to, as it is still faster than cash or credit (provided I boot it up when I enter Starbucks). When I use it, I really get excited about the future.  What this app does is pretty awesome and the possibilities for it seem very cool.  I wish it did it in more places and I wish it did better, but I am concerned that this team&#8217;s priorities are really screwed up, and I hope that doesn&#8217;t hurt this app or Square in general.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>I realize there could be security implications with allowing payment without unlocking the phone, but a) few people lock their phones and b) it would be simple enough to limit the buying power of a transaction conducted this way <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>At least I hope this is what they are doing.  If they decide to “monetize eyeballs” i.e. sell ads as their main source of revenue, I will be very sad. <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>You know what acquires new users?  Making an awesome experience for the existing users. <a href='#fnref:3' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Self vs Professional Publishing]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/10/14/self-vs-professional-publishing.html"/>
    <updated>2013-10-14T13:13:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/10/14/self-vs-professional-publishing</id>
    <content type="html"><![CDATA[<p>I get asked occasionally about the self-publishing process and how it compares to the &#8220;professional&#8221; publishing process, since I have done both.  I thought it might be interesting to compare and contrast these two approaches.  The professional approach is regimented, organized, and carries many advantages, while self-publishing allows total freedom, at the cost of doing a lot more work for a lot less money.</p>

<!-- more -->


<p>During the promotion of my first book, I <a href="http://www.naildrivin5.com/blog/2012/04/24/five-months-of-ebook-sales.html">wrote a post</a> about the experience of working with a professional
publisher:</p>

<blockquote><p>I know that working with John [editor of my book] and the Prags [Pragmatic Programmers, the publishers] has made me a better writer, but would I be confident enough to &#8220;go it alone&#8221;? Given my lack of notability, I feel I benefit greatly from having my work published and distributed by the Prags. Further, knowing my writing style and abilities as I do, my work will be much higher quality with a team of professionals in my corner.</p></blockquote>

<p>The post is very &#8220;pro professional&#8221;, and I had a great experience.  I also sold (and continue to sell) a good number of copies.  As of now, I&#8217;ve sold over 6,000 copies of <a href="http://pragprog.com/book/dccar/build-awesome-command-line-applications-in-ruby">Build Awesome Command Line Apps With Ruby</a>.  I&#8217;m happy with those results, especially considering what a niche topic it is.</p>

<p>I conclude with</p>

<blockquote><p>That being said, I&#8217;d still love to try self-publishing at some point…</p></blockquote>

<p>With <a href="http://theseniorsoftwareengineer.com/">my current book</a>, I got my chance.  I proposed it to the Pragmatic Programmers, however they didn&#8217;t feel it
was a good fit for them.  The topic of the book is broad—what every programmer needs to know besides coding—and they have at
least three titles that could overlap with the subject matter.</p>

<p>I wanted the book to be written, so I soldiered on alone, deciding to self-publish.   I have not sold <em>nearly</em> as many copies
as I had with my first book at this point, but I&#8217;m still happy with the results, and certainly not done promoting the new
book.</p>

<p>Having gone through both a professional publishing and a self-publishing process, I thought it might be interesting to shed
some light on how these two processes work.  These are only two data
points, so your mileage may vary.</p>

<h2>Working with Professionals</h2>

<p>My original post contains a good deal of information about what it&#8217;s like to work with a team of publishing professionals.  Obviously, it&#8217;s only one datapoint, but my experience jibes with most other tech authors I&#8217;ve talked to.  The basic process is:</p>

<ol>
<li>Proposal accepted</li>
<li>Development editor assigned</li>
<li>Write a chapter</li>
<li>Editor reviews</li>
<li>Revise chapter based on feedback</li>
<li>Repeat from step 4 until chapter is good</li>
<li>Repeat from step 3 until about 25% done</li>
<li>Managing editor review</li>
<li>Revise as needed, then back to step 3 until half done</li>
<li>Publisher review</li>
<li>Revise as needed, then back to step 3 until mostly done</li>
<li>Tech reviews (these might happen earlier)</li>
<li>Copy-editing, indexing, and typesetting</li>
<li>Release!</li>
</ol>


<p>Let&#8217;s delve a bit deeper into some of these, because they are relevant to the self-publishing process.</p>

<p><span class='pullquote-right' data-pullquote='The development editor is the only person you can be sure will read your book in great detail '>
The day-to-day writing and revising is done by me, the author, with the help of a <em>development editor</em>.  The development
editor isn&#8217;t concerned with commas, spelling, or grammar. Instead, they&#8217;re charged with ensuring that the quality of the writing is high.  They will focus on flow, consistency and general &#8220;interestingness&#8221;.  The development editor is the only person you can be sure will read your book in great detail, which is a handy person to have around.
</span></p>

<p>So, if the development editor isn&#8217;t worried about commas and grammar, who does?  The answer is the copy-editor.  God bless
these people, because it sounds like an awful job.  They comb through the manuscript fixing all of the typos the author has
made.  This is done at the end because a) typos and missing commas aren&#8217;t important to the creative process and b) the text is
likely to change during development, so there&#8217;s no sense in copy-editing more than once.</p>

<p>Similarly, indexing and typesetting are saved until the end as well.  Indexing is what it sounds like—making the index.
Typesetting is a bit more involved.</p>

<p>In the old school, the author might produce the book in Word or some other electronic format designed for editing and commentary (or perhaps even
a typed/written manuscript in the <em>real</em> old school).  Once the work is done, the text
is transferred to a system like Quark or FrameMaker to be set for printing.  Many publishers still work this way.  The Pragmatic Programmers, however, pioneered a better way.  They have a toolchain whereby you write your book in text that can be converted into a beautifully typeset PDF (as well as various e-reader formats).  They even have a build server set up to build your book whenever you commit changes.</p>

<p>Despite the automation, there is still some manual tweaking that must happen before the book can be printed, and so there is a final
stage of manually adjusting the typography to ensure words are hyphenated in the correct place, there are no words on pages by
themselves, etc.</p>

<p>The real power of this system is that they can typeset the book for more than just print.  While the PDF looks like the
printed book, readers also get an ePUB  and a MOBI for reading on a wide variety of e-readers.  I don&#8217;t know how much manual
tweaking they do to this part, but given my experience with these formats (below), they&#8217;ve created some powerful tools that
produce really great e-reader formats.</p>

<p><span class='pullquote-left' data-pullquote='It&#8217;s all focused on producing the best book you can, in terms of both content and presentation. '>
If this sounds like a lot of process, it <em>is</em>!  It&#8217;s all focused on producing the best book you can, in terms of both content and presentation.  Since the publisher is fronting the money to pay the staff and produce the book before any copies are sold, they rightly want regular check-ins that progress is being made and that the quality is sufficient.  In other words, this process makes a lot of sense to me.
</span></p>

<p>Let&#8217;s talk about what&#8217;s good and what&#8217;s bad with this process.</p>

<h3>The Good</h3>

<p>Getting eyes on your book as you write is awesome.  There&#8217;s no doubt in my mind that my book was markedly better for having worked with this team of professionals.  Getting feedback from the publisher was also something that can&#8217;t be underestimated.  Their feedback was borderline brutal, but it came from the right place and was what I needed to hear to do my best work.</p>

<p>In terms of presentation, the end product looks beautiful on paper, and looks great on all the various electronic reading formats that permeate today&#8217;s technical landscape.  I never once had to worry about formatting, fonts, the Kindle DX, or anything.</p>

<p>They also have the setup to get your book into stores, listed on Amazon, etc.  As we&#8217;ll see later, this is no small feat and while most of my sales were from the Pragmatic Programmers website, I still sold over 1400 copies from &#8220;somewhere else&#8221;.</p>

<p><span class='pullquote-right' data-pullquote='Having a book published by a real publisher is a form of promotion that can be hard to match. '>
Finally, the publisher is a known entity that people look to for technical books.  The same book listed on their website vs only on an author&#8217;s website is going to sell far more, simply because it becomes known to many more people.  Having a book published by a real publisher is a form of promotion that can be hard to match.  And it&#8217;s the detailed process I&#8217;ve just described that creates that reputation for quality.
</span></p>

<h3>The Bad</h3>

<p>Firstly, all of this costs money, so my royalty per copy is roughly 50% of what the publisher collects from buyers.  Although we are in the &#8220;The Bad&#8221; section, let me be clear that <em>a 50% royalty is far above average</em>.  No other publisher that I know of is paying this high a rate.  To be honest, 50% seems way too generous, given what&#8217;s provided for me and the support I get.  But, as great as their royalty rate is, it&#8217;s still a cost—the wonderful staff and tools don&#8217;t come free, and this is the price.</p>

<p><span class='pullquote-left' data-pullquote='In effect, I need permission to work on the book. '>
Secondly, all the check-ins and reviews are forms of gate-keeping.  Editor approvals, copy-editing, indexing, and typesetting are gate-keeping activities, meaning that my ability to work on, promote, and sell the book is <em>dependent on others</em>.  In effect, I need permission to work on the book. I learned very quickly that working on Chapter 4 while Chapter 3 was still being reviewed and revised was a Very Bad Idea™.  Changes in one affect the other, and so while my work is being reviewed, there isn&#8217;t a whole lot I can do while I&#8217;m waiting.  Remember, the vast majority of the time spent creating a book is in revising and editing, not &#8220;getting it down&#8221;.
</span></p>

<p>Intellectually, I know that these gatekeepers are there for a reason, and that we are all on the same team, and that this process is designed to produce great results.  And it <em>does</em> do that, however it can still be frustrating. Particularly because I do this in my free time, which has to be carefully managed and budgeted.  If I have time to write, but feel unable to do so, it feels like a waste.  It also made the entire process <em>feel</em> slow.  Even if it really needed to take that long, the feeling of slowness can be de-motivating.</p>

<p>A more serious downside to the gate-keeping is that these gatekeepers must share your vision, or be convinced of it.  I agreed wholeheartedly with the vast majority of feedback I got from the editors and publisher, however there were times were I felt their advice was just wrong.  Not &#8220;wrong&#8221; as in &#8220;how to sell books&#8221; or &#8220;how English works&#8221;, but &#8220;that is not what I want to say&#8221;.  And so you have to convince someone to let you say what you want, or you have to compromise.  It
never once got adversarial, but it <em>was</em> frustrating to have to convince someone that my vision was correct.  I can only imagine how painful this is for
books that aren&#8217;t as objective as technology books.</p>

<p>The final downside is that not anyone can engage with a publisher.  They only take on so many books at once, and so you have to propose a book and convince them to help you develop it.  It is this process that ensures the publisher&#8217;s reputation for quality books, and provides the &#8220;instant promotion&#8221; you get by publishing with them.</p>

<p>As I mentioned, the proposal for my current book was turned down, so I decided to do all of this myself.</p>

<h2>Going it Alone</h2>

<p>Given the process I outlined when working with a publisher, you might be thinking that self-publishing is completely freeing
and reduces the process to:</p>

<ol>
<li>Write Book</li>
<li>Put on Website</li>
</ol>


<p>Nope.  Turns out it&#8217;s <em>more</em> work.</p>

<p><span class='pullquote-right' data-pullquote='I had to play the role of development editor, managing editor, publisher, copy-editor and typesetter all on my own. '>
Although the gate-keeping aspects of the professional process are frustrating at times, the process itself is a good one.  Even though I wouldn&#8217;t have a team helping me, I still wanted to produce a book of comparable quality.  That means I had to play the role of development editor, managing editor, publisher, copy-editor and typesetter all on my own.
</span></p>

<p>At this point, I had a first draft done, so I decided on this process:</p>

<ol>
<li>Cobble a toolchain together to validate I could generate the needed formats.</li>
<li>Revise and edit a chapter.</li>
<li>Sleep on edits and revise again.</li>
<li>Repeat step 3 as necessary.</li>
<li>Repeat step 2 until done with all chapters.</li>
<li>Re-read book, looking for flow and consistency.  Revise as needed.</li>
<li>Sleep on edits and repeat step 6 as needed.</li>
<li>Get a tech review from trusted friends and colleagues.</li>
<li>Revise, then go to step 6 as needed.</li>
<li>Set up needed accounts for distribution and payment processing.</li>
<li>Design cover for printed book.</li>
<li>Design website for book.</li>
<li>Copy-edit</li>
<li>Finish off toolchain.</li>
<li>Done!</li>
</ol>


<p>The role of development editor was played by me after a night&#8217;s sleep, along with removing the words &#8220;this&#8221;, &#8220;very&#8221;, and &#8220;thing&#8221; from my dictionary (so
they would show up as mis-spelled and I could eliminate them for better words).  The role of copy-editor was played by a Ruby script.  I had it look for
common mistakes that I personally make and don&#8217;t catch while reading.  It turns out, I use a <em>lot</em> of commas.  We&#8217;ll get to the typesetting in a moment.</p>

<p>The hope was that by replicating the process in a disciplined fashion, I could produce something of quality without needing
the other individuals to be involved (and, therefore, paid).  For the creative aspects of the book, this is hard to gage.  I feel like the writing in my
book is pretty good, but there&#8217;s no way to know how much better it could be, or what affect that would have on sales.</p>

<p>Other than actually getting the book written, I needed to handle typesetting it, distributing it, and getting paid for it.</p>

<h3>Distribution and Payment Processing</h3>

<p>I created a spreadsheet of about six different ways I could distribute the eBook and collect payments.  I actually did this before I got too far into the writing, because <a href="http://leanpub.com">LeanPub</a> was one of my options, and they provide a tool-chain along with distribution and payments.  Not surprisingly, they were by far the most expensive, costing 10% of the sale price plus 50 cents per copy sold<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.  Still, <em>way</em> cheaper than professional publishing, but for going on your own (and being willing to deal with the toolchain yourself—no small task as we&#8217;ll see), any other way is going to be cheaper.</p>

<p><span class='pullquote-left' data-pullquote='Setting up accounts with Send Owl and Stripe was incredibly simple, and the integration worked flawlessly. '>
I looked at Square Space, Shopify, Fetch App, Digital Delivery (now called Send Owl), and DPD.  They were all comparable in price, charging small monthly fees for distribution, with the payment processor (in most cases, Stripe), charging around 3% of the sale.  I went with Send Owl as they had the cheapest monthly rate, a good variety of coupon and discounting options, and the nicest looking default UI for the buying experience.  Setting up accounts with Send Owl and Stripe was incredibly simple, and the integration worked flawlessly.
</span></p>

<p>If only the toolchain would&#8217;ve been that easy.</p>

<h3>Toolchain</h3>

<p>The toolchain takes the source material—your writing—and produces electronic formats for distribution.  The three most common
are PDF, ePub, and MOBI.  There are various tools that can help and they are all pretty terrible, especially when you care as
much about the typography of the end-result as I do.  I wanted the PDF version to look professionally typeset.  The output of
a word processor is <em>not</em> what I wanted, and the PDFs generated by asciidoc and pandoc look horrendous to me.</p>

<p>That meant LaTeX.  The Pragmatic Programmers toolchain appeared to me to be based on LaTeX, and I had experience with it
during grad school, so I knew I could use it to get the desired output.  LaTeX is not for the faint-of-heart and while its
output is nothing short of beautiful, it is not a tool designed around ease of use.</p>

<p>LaTeX also doesn&#8217;t have a good way to produce e-reader formats from LaTeX source, and it is not enjoyable to write or edit in LaTeX&#8217;s arcane markup language.  I wrote the rough draft in Markdown, however Markdown doesn&#8217;t support cross references, which I knew I would need, so I went with Asciidoc.</p>

<p>I then set up a basic toolchain like so:</p>

<ol>
<li>Asciidoc fed into pandoc</li>
<li>pandoc generated LaTeX and ePub</li>
<li>LaTeX generated PDF</li>
<li>Calibre generated the MOBI from the ePub</li>
</ol>


<p>I spent quite a bit of time customizing the PDF output, but I think it was worth it.  I used the <a href="http://www.ctan.org/pkg/memoir">memoir</a> LaTeX package, which
makes it significantly easier to set margins, font sizes, headers, and footers, so that I could create a look that was unique,
and that would also fit the page size I planned to use for the print version.  It came out great, although was incredibly
painful and time-consuming to get right.  The world of TeX and LaTeX is not well-traveled, and so documentation is hard to
come by.</p>

<p><span class='pullquote-right' data-pullquote='Other than Memoir and LaTeX, I ended up being incredibly disappointed with every other element of the toolchain '>
Other than Memoir and LaTeX, I ended up being incredibly disappointed with every other element of the toolchain.  pandoc
stripped out all the cross-references and any other feature that its internal representation didn&#8217;t support (I added them
back via some <em>very</em> hacky Ruby scripts).  pandoc&#8217;s epub was bare-bones and underwhelming, despite the power of the format (at least on iPad).
Calibre&#8217;s Kindle output was downright awful.
</span></p>

<p>MOBI is fairly terrible and inflexible, and Calibre generated a pretty awful-looking book.  If you look at any bullet-list in
my book on a real Kindle, you&#8217;ll see what I mean.  It looks terrible.  And I didn&#8217;t realize it until I was completely done and
had no energy left to figure it out.</p>

<p>If I do this again, I will write my own ePub and MOBI generator, possibly by using Docbook or HTML as the source and
generating LaTeX, ePub, and MOBI from that, using all the power those formats offer.  LeanPub&#8217;s toolchain looks <em>decent</em>, but
the typography of the PDFs is not very good, in my opinion. It&#8217;s better than a word processor export, but still not amazing.</p>

<p>When I was mostly done with the book, I discovered <a href="http://tablo.io">Tablo</a>, which is a cloud-based toolchain aimed at getting your book into Amazon and the iBookstore.  I do not like writing in degenerate web-based editors without version control, and they provide no PDF option that I can see, so I would not use this service.   They are a better option than exporting from a word processor, though.</p>

<p><span class='pullquote-left' data-pullquote='Do not underestimate the amount of effort required to produce a nicely typeset book. '>
To make a longer story short, this is a rathole.  Do not underestimate the amount of effort required to produce a nicely typeset book.  But please,
   do not produce a poorly typeset book.  They are a chore to read.
</span></p>

<h3>The Print Version</h3>

<p>I knew I wanted to do a print run, so once I had the PDF output how I liked it, I ordered a copy from <a href="http://lulu.com">LuLu</a>, the only print-on-demand service provider I
could find. One copy is $7, and
it arrived in a few days.  It looks and feels like a real book.  The cover and paper are quite nice, and because of the typesetting, it looks great.  The
color on the cover is a bit more variable than I would like, but for the price and convenience of not having to order in bulk, this works really well.</p>

<p>Integrating them into my store was not so easy.</p>

<h3>The Buying Experience</h3>

<p>Send Owl is very straightforward: you upload whatever you are selling, set a price, and they give you a URL.  You configure payment methods and you are off to the races.</p>

<p>They also have the concept of a &#8220;package&#8221; where you can sell multiple items at once for a total reduced cost.  Once I had the print stuff ready to go, I wanted to create a package that gets you the ebook and the print book for a collective discount.  This is where I ran into trouble.  Send Owl doesn&#8217;t do fulfillment.  To get LuLu to fulfill, readers would need to buy from them direct, but LuLu provides no discount code mechanism, so I couldn&#8217;t offer the book, fulfilled from LuLu, at a reduced price to eBook buyers.</p>

<p>I also couldn&#8217;t do it the other way around, because LuLu will not provide you with the email addresses of buyers (or any way to contact them), so there was no way to get buyers of the physical book a discount code on the ebook!</p>

<p>So, I ordered 20 copies at cost and decided to fulfill them myself.  Of course, Send Owl has no way to calculate shipping, so I had to set a price that
included shipping, but still appeared to be a good deal.  To date, I&#8217;ve made $135 on the package deal, and spent $35 on shipping.  Not good.</p>

<p><span class='pullquote-right' data-pullquote='The extra step of requiring a decision hurt conversion'>
Interestingly, once I started offering the package, it required buyers to make a choice: do they get the ebook or the package?
It turns out that many of them decide to get neither.  The extra step of requiring a decision hurt conversion, so I killed the package.
Now, readers who buy the ebook get an email to buy direct form LuLu, at a reduced price.  That link is good for anyone, so
anyone with the link can get the book for that price, making it not really that &#8220;reduced&#8221;.  And now I have 17 books sitting in my
closet.
</span></p>

<p>That covers direct sales, but what about other channels?</p>

<h3>Other Sales Channels</h3>

<p>Early on, I looked at Kindle Direct Publishing (KDP).  This seemed like a pretty easy way to get listed on Amazon, and at least be a place where reviews could be written and found.  Unfortunately, Amazon reserves the right to change the price of your book, for any reason, for any length of time, without warning.  I even confirmed this with their customer support, because I thought it was too ludicrous to be true.  This means that Amazon could decide to sell my book for 99 cents, and the only thing I could do about it was remove it from the store.  Those were not terms I was comfortable with.</p>

<p>The Apple iBookStore is quite the opposite.  You set the price, Apple gets 30%, and that&#8217;s all she wrote.  Your book as to be approved, but it also has to have an ISBN, which can cost up to $200.  I may still try this, but I&#8217;d need to sell 13 copies to people who would otherwise never know about the book to make it break even.  And given how un-remarkable it looks on iPad (it looks fine, just not amazing), I&#8217;m not sure I&#8217;d want to list it there.</p>

<p>Getting the print version into Amazon and other stores is something LuLu can do, but it looks a bit onerous. You need an ISBN (and can&#8217;t use the same one for print and iBookStore—each format has to have its own), and your book must meet a laundry list of requirements before having to be approved.</p>

<p>These may turn into viable options, but for now, I&#8217;m holding off.</p>

<p>Now that I had a way for people to buy, I needed to get the word out.  I didn&#8217;t have the publishers website and marketing
channels, so I was on my own.</p>

<h3>Marketing and Promotion</h3>

<p>On launch day, I posted a link on my blog, posted twice on Twitter (once in the morning, once in the afternoon), and submitted links to both Hacker News and Reddit.</p>

<p><span class='pullquote-left' data-pullquote='I sold about 100 copies on day 1, which was a good feeling'>
Hacker News generated some discussion about how awful my website was (it was awful, since redesigned by a very kind friend), but didn&#8217;t generate many conversions (nor did Reddit).  Almost all traffic and purchases were from my blog or Twitter.  I sold about 100 copies on day 1, which was a good feeling.  After that, I&#8217;ve been getting a handful of sales every week in steady fashion.
</span></p>

<p>I posted coupon codes on Facebook and LinkedIn for $10 off.  This resulted in exactly one sale.</p>

<p>Initially I didn&#8217;t accept PayPal, as I didn&#8217;t want to deal with them.  After some feedback that I might be losing sales, I
turned it on, and most of my sales are now via PayPal.  I&#8217;ve had no problems thusfar.</p>

<p>I&#8217;ve written posts on my blog related to the book, with links, however these never generated a noticeable bump in sales.  I did a sale on &#8220;National Programmer&#8217;s Day&#8221;, which DID result in a bump (and was clearly worth it, since many of those sales would never have been made).  This is one thing that&#8217;s nice about going it on your own—you can change course like this any time, and do sales, or change the price pretty much on a whim.</p>

<p>What all this said to me was that I had &#8220;tapped out&#8221; my social network.  I&#8217;m proud of the sales I&#8217;ve made essentially based on my Twitter followers and blog audience, but I need to do something more to reach a new audience.  This is where I&#8217;m a bit stumped.</p>

<p>I plan to speak at more conferences, although I have my doubts that this is ultimately worth it, considering the cost of travel.  I&#8217;ve considered purchasing advertising, however the channels I would find most effective are places that I myself hate seeing ads, so I&#8217;m not sure how I feel about that.</p>

<h2>Which is better?</h2>

<p>As you can see, this is not so straightforward.  Going it on my own, I have a lot of freedom, can switch directions, and have complete control over all aspects of the book.  The downside, other than <em>having</em> to control those things, is that my personal reach is orders of magnitude lower than the reach of an established publisher.</p>

<p>The downside of a publisher is that I must first choose a topic they wish to publish a book on, and then deal with the process and gate-keeping that goes along with it.  But, that process produces a higher quality result.  How <em>much</em> higher is unknown.</p>

<p><span class='pullquote-right' data-pullquote='it doesn&#8217;t seem feasible to make a living entirely on writing tech books'>
It&#8217;s worth mentioning that it doesn&#8217;t seem feasible to make a living entirely on writing tech books.  While I&#8217;ve made some
good money on both efforts, neither would pay the rent or sustain even a modest lifestyle.  To do so, I would have to produce
very popular books on a frequent schedule.  There are very few tech books one would consider &#8220;seminal&#8221;, and their authors tend to
either have day jobs or a more diversified offering of services beyond writing.
</span></p>

<p>All that to say that writing books for me is a side project; something I do in my free time. Because of that, the
self-publishing route <em>felt</em> better.  It felt more agile, and much simpler.</p>

<p>That being said, I&#8217;m still getting royalties on my first book, which is going on two years old.  Will I be able to say the same about my current book two years from now?</p>

<h2>Too Long, DID Read</h2>

<p>This is a long post, but I hope you enjoyed it.  For making it all the way down here, I&#8217;m giving you $5 off my book.  <a href="http://transactions.sendowl.com/products/24086/D8D2ED13/add_to_cart">Click here</a> and enter the code <code>TLDR5</code> in the space labeled &#8220;Promo Code&#8221; before you buy.  Thanks for reading!</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>LeanPub is somewhat interesting.  They aren&#8217;t a traditional publisher, but it&#8217;s possible that their name carries some weight with readers.  I was looking at them as a toolchain vendor, although they might be interesting to consider as an additional sales channel. <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; An Introvert Goes to Dinner]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/09/27/an-introvert-goes-to-dinner.html"/>
    <updated>2013-09-27T08:52:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/09/27/an-introvert-goes-to-dinner</id>
    <content type="html"><![CDATA[<p>I&#8217;m trying out <a href="http://www.medium.com">Medium</a> as a place to do non-technical writing, mostly to keep this blog&#8217;s topic focused
on technology.  I won&#8217;t cross-post everything here, but this is my first one, <a href="https://medium.com/architecting-a-life/3c66705aac17">An Introvert Goes to Dinner</a>.  Excerpt:</p>

<blockquote><p>I actually enjoy solo trips like this. It&#8217;s a chance to be as alone as possible: I&#8217;m in a city were I don&#8217;t know anyone, typically with a lot of free time outside of whatever reason brings me to said city. I know I won&#8217;t have to talk to anyone.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; My Book is On Sale]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/09/13/my-book-is-on-sale.html"/>
    <updated>2013-09-13T11:08:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/09/13/my-book-is-on-sale</id>
    <content type="html"><![CDATA[<p>My book, <a href="http://theseniorsoftwareengineer.com">The Senior Software Engineer</a>, is on sale today for only <strong>$10!</strong>.  Happy Programmer&#8217;s Day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromebook Keyboard Slightly Innovative]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/09/06/chromebook-keyboard-slightly-innovative.html"/>
    <updated>2013-09-06T17:43:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/09/06/chromebook-keyboard-slightly-innovative</id>
    <content type="html"><![CDATA[<p>Brief follow up to my <a href="http://www.naildrivin5.com/blog/2013/08/29/a-real-keyboard-for-programmers.html">A real keyboard for programmers</a> post, I got a
<a href="http://www.google.com/intl/en/chrome/devices/">Chromebook</a> yesterday and the keyboard, while sporting the same layout as most other computers, actually
is better designed for what the Chromebook does.</p>

<p>Namely, it has no function keys, instead using them for browser navigation, window management, and hardware controls.  Most amazingly, though, it has no
Caps Lock, instead making it a Search key, which makes sense.  It&#8217;s a big key in a very prominent spot and Search is what Google wants you to do.</p>

<p><img src="http://www.naildrivin5.com/images/chromebook_keyboard.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A real keyboard for programmers?]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/08/29/a-real-keyboard-for-programmers.html"/>
    <updated>2013-08-29T07:58:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/08/29/a-real-keyboard-for-programmers</id>
    <content type="html"><![CDATA[<p>Jeff Atwood (AKA codinghorror), <a href="http://www.codinghorror.com/blog/2013/08/the-code-keyboard.html">introduced a new computer keyboard</a>, produced by WASD, called <a href="http://codekeyboards.com/">the CODE keyboard</a>:</p>

<blockquote><p>I told him that the state of keyboards was unacceptable to me as a geek, and I proposed a partnership wherein I was willing to work with him to do whatever it takes to produce a truly great mechanical keyboard.</p></blockquote>

<p>Jeff is heralding this as a &#8220;truly great mechanical keyboard&#8221;.  I was very eager to see what such a beast looked like.  Here it
is:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/5/57/ModelM.jpg" title="" ></p>

<p>Oh wait, sorry, that&#8217;s the original 101-key version of the IBM PC Keyboard, introduced in 1985.  How&#8217;d that get there?  It&#8217;s been
almost thirty years, so the CODE keyboard must be awesome, right?</p>

<!-- more -->


<p><img src="http://codekeyboards.com/img/code-34-right.jpg"></p>

<p>Hmmm.  How can a truly great keyboard still have a &#8220;Scroll Lock&#8221; key?  And what is that &#8220;Print Screen&#8221; key doing there?!  It even comes with a PS/2 adapter!</p>

<p>Aesthetically, this keyboard doesn&#8217;t do anything for me.  Between the haphazard typography and silly Windows &#8220;context menu&#8221; icon,
  I find it pretty ugly.  And no Bluetooth.</p>

<p>Let&#8217;s look deeper at the design, though.  What does it tell us?  This design has been around for thirty years, and here&#8217;s what it
has to say:</p>

<ul>
<li>Hitting &#8220;space&#8221; is the most important thing you could ever do.</li>
<li>Caps Lock and Enter are pretty important and of equal importance - they are the second easiest keys to hit outside of the home
keys.</li>
<li>Letters are more important than numbers, as numbers are farther away from the home position.</li>
<li>Control, Alt, &#8220;Meta&#8221;/Windows, and Shift are all more important than numbers (they are an equal distance away, but have much larger keys).</li>
<li>Alt is the most important modifier - it&#8217;s right where your thumbs are, making it easy to hold down while typing other things.</li>
<li>Tab and Backslash are of equal importance, and are more important than most keys.</li>
<li>Print Screen, Scroll Lock, Pause, Home, End, Page Up, Page Down, Insert, Delete and the arrow keys are all of equal importance,
but lesser than the alphanumerics and modifiers as they are set off to the right.</li>
<li>Analphabetics like &#8220;!&#8221;, &#8220;%&#8221;, and &#8220;{&#8221; are least important, because they require the shift key to enter. &#8220;+&#8221; and &#8220;~&#8221; are probably
the least relevant of these, because they are the most difficult to type: you must use Shift and your pinky, and you have to stretch for them.</li>
</ul>


<p>How much of this is actually true of writing prose?  Of writing code? I would argue that very little of it is correct.  At least
on a Mac, the location of &#8220;Alt&#8221; (called &#8220;Command&#8221;) makes sense - it&#8217;s the modifier for keyboard shortcuts.  On Windows, it&#8217;s
&#8220;Control&#8221;, and requires pinky contortions (which might be why a lot of developers map Caps Lock to Control).  Caps Lock has no
place on any keyboard.</p>

<p>There haven&#8217;t been a ton of innovations in the world of text entry over the years (at least not for writing prose or code - it&#8217;s
all been focused on text message).  There&#8217;s a smattering of &#8220;ergonomic&#8221; keyboards
some of which provide more &#8220;thumb keys&#8221;, but in general, this is the same keyboard that&#8217;s existed for the majority of our lives.  Even
alternate layouts like Dvorak keep most things they same - they just shuffle around the letters.</p>

<p>My personal favorite is the Apple keyboard, as it&#8217;s the same for external and laptop.  It bears many similarities to the classic
101 key layout, but has evolved a bit:</p>

<p><img src="http://images.apple.com/keyboard/images/hero_2.jpg"></p>

<p>Here:</p>

<ul>
<li>Stupid keys like Page Up, Scroll Lock, and Insert are gone.  They have no place in modern computing.</li>
<li>Backslash is shrunk to its rightful size.</li>
<li>Function keys are half-height to denote their unimportance, but are closer to the home position for ease of use (they also default to their alternate meanings - I&#8217;m much more likely to adjust volume than type F12).</li>
<li>The arrow keys are still close at hand, but use half-height keys to signify their lack of importance.</li>
</ul>


<p>This keyboard is classic Apple design in that it eliminates anachronistic features and is nice to look at.</p>

<p>But, it&#8217;s still basically the same keyboard as the CODE, which is the same keyboard that shipped with the first IBM PC.</p>

<h2>A better writing keyboard</h2>

<p>The current layout actually isn&#8217;t bad for writing prose (which isn&#8217;t surprising since it is an evolution of early mechanical keyboards). The letters are where you need them, with commas and periods close at hand.</p>

<p>The symbols next most-frequently needed are the exclamation mark, dash, and parenthesis.
They are all ill-placed in this layout, being far away from the home keys, while more convenient locations are taken up by the rarely-needed caret, ampersand, and asterisk.  I&#8217;d bump the parenthesis over one, putting the asterisk on the &#8220;0&#8221;, swap the exclamation mark with the ampersand, and finally, exchange the carat for the dash.</p>

<p>I&#8217;d also put the &#8220;Shift&#8221; key where &#8220;Alt&#8221; is (or perhaps divide up the space bar to allow shifting), because Shift is the
most-needed modifier when writing. I could also see a case for having the right &#8220;Alt&#8221; be a different modifier to allow accented and other adorned characters.</p>

<p>Where things get interesting is when you consider writing source code.</p>

<h2>A better coding keyboard</h2>

<p>Famously, vi was developed on a computer using an ADM3A terminal, which had this keyboard:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/KB_Terminal_ADM3A.svg/1000px-KB_Terminal_ADM3A.svg.png"></p>

<p>Notice where the arrow keys are?  Also notice what symbol is on the &#8220;Home&#8221; key?  Finally, do you see how convenient
the &#8220;@&#8221; key is to your right pinky (that&#8217;s the &#8220;execute macro&#8221; command in vi)? I find this fascinating.</p>

<h2>The Chicken and The Egg</h2>

<p>Here&#8217;s the keyboard of a Datapoint 3300, a terminal introduced in 1969 and could have easily been used in the development of the
&#8220;B&#8221; programming language, a precursor to C:</p>

<p><img src="http://www.naildrivin5.com/images/datapoint_3300_keyboard.png"></p>

<p>I&#8217;m not sure how one would enter curly-braces, but look at the positioning of keys for important symbols in C.  The parenthesis
are a bit more convienient, and the square brackets couldn&#8217;t be more at-hand, located as modified versions of M and K.  Note also
that &#8220;plus&#8221; is in a much nicer place—right under your pinky—while the asterisk is in a decent place for right-handers.</p>

<p>The 3300&#8217;s successor, the Datapoint 2200, has a bit of an odder layout, with the brackets and braces in a fairly strange position.</p>

<p><img src="http://www.naildrivin5.com/images/datapoint_2200_keyboard.png"></p>

<p>It&#8217;s hard to say if a keyboard influences language design or follows it.  Here&#8217;s the layout of the IBM 3279 terminal, in use in
the late 70&#8217;s, and you can be sure a <em>lot</em> of C code was written on this thing, just look at where the braces are!</p>

<p><img class="left" src="http://www.naildrivin5.com/images/keyboard_closeup.png" width="500"></p>

<p>It&#8217;s actually perfect for a curly-brace language.  The opening brace is a short right-pinky move away, with the closing
brace merely requiring a shift - a very easy move for right-handers.</p>

<p>Further, notice how easy it is to get to the other important symbols. The ampersand and asterisk—symbols crucial for dealing
with pointers—couldn&#8217;t be easier to access without displacing letters or numbers.</p>

<p>And here&#8217;s the keyboard of an early LISP machine:</p>

<p><img src="http://www.naildrivin5.com/images/lisp_machine_keyboard.png"></p>

<p>Notice how easy and juicy those parenthesis keys are (they are next to the &#8220;P&#8221; but also in their traditional location - the best of both worlds)?  And given the importance of the single quote, notice how convenient it is?  Of course, single quote has been in that place on a lot of old keyboards - perhaps it influenced the design of LISP?  It&#8217;s hard to say.</p>

<p>What about modern languages?</p>

<h2>A keyboard for modern languages</h2>

<p>A front-end developer is probably tired of hitting &#8220;Shift&#8221; to create HTML tags and JavaScript functions, and has probably hit the &#8220;plus&#8221; key way too often in search of the more useful dash (often used in CSS class names).</p>

<p>For me, typing a plus sign is fraught with typos, as is reaching for the exclamation point with my left hand.  In Ruby, a language that makes heavy use of the colon, I&#8217;m hitting &#8220;Shift&#8221; a lot, but the backslash key—much more rarely needed—couldn&#8217;t be more easy to get to.  Further, Ruby uses <code>snake_case</code> (which requires the shift key to access the underscore), and relies on hashes (created by curly braces) much more frequently than most languages<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>So, do I need a Ruby keyboard?  Would I even have enough <em>fingers</em> to use a Scala keyboard?</p>

<p>What would a programming language look like designed for our current thirty-year-old keyboard design?</p>

<h2>A language for modern keyboards</h2>

<ul>
<li>Perhaps carat is a better negation operator than the exclamation mark.</li>
<li>Perhaps argument lists and collection literals would all use square brackets.</li>
<li>Perhaps identifiers could have dashes in them.</li>
<li>Perhaps symbols created with Command/Option modifiers would be useful - many of them would be easier to type than the &#8220;@&#8221; sign.</li>
</ul>


<p>Could we even break some of our typing habits to use such a strange language?</p>

<p>I don&#8217;t have the answers, but I <em>do</em> know that a thirty-year-old keyboard design with mechanical switches and a Scroll Lock key isn&#8217;t what I&#8217;d call revolutionary.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>Of course, remapping tools could make this easier, and it might be worth looking into, but there&#8217;s something uncomfortable to me about having keys not do what they are labeled to do.  <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Inconsistent Architecture]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/08/21/inconsistent-architecture.html"/>
    <updated>2013-08-21T09:32:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/08/21/inconsistent-architecture</id>
    <content type="html"><![CDATA[<p>Quick, which is better: MiniTest or RSpec?  HAML or ERB?  SASS or LESS?</p>

<p>If you are building your first Rails app at your company, it doesn&#8217;t matter.  They all work more or less the same, so just pick one and go.  Take a vote or declare by fiat, but get on with your life.  No project ever failed because they picked HAML over ERB.</p>

<p>If, on the other hand, you are building a new Rails application that runs in an existing technical infrastructure (which is far more likely), then these are the absolute wrong questions to be asking.  Use what your team already uses <em>unless there&#8217;s a good technical reason not to</em>.  Why?</p>

<p>Because consistency is far more important than most other factors.</p>

<!-- more -->


<h2>Consistency is an enabler</h2>

<p>Consistency is the ultimate enabler.  Rails developers should know this better than most, because Rails is built on this very principle.  For example, in Rails, database primary key columns are named <code>ID</code> by default.  This consistency allows Rails to not only make things easier for us, but it also frees us from a pointless debate about naming conventions.  It really doesn&#8217;t matter if the primary key for the <code>ADDRESS</code> table is <code>ID</code> or <code>ADDRESS_ID</code>, but it <em>really</em> matters that all tables use the same naming scheme.</p>

<p>Such consistency enables productivity and agility.  When faced with change, Rails eliminates a large number of decisions we have to make<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.  Need to store some data?  Just choose the name of that data, and Rails handles naming the class and where it will be stored.  Need a new page in your app?  Just choose the name and Rails tells you were to put the code, even generating it for you.</p>

<p>Compare this to an application written using Spring MVC.  Spring is flexible.  It&#8217;s so
flexible.  There are probably 10 ways to map a URL to code, and all of them have equal
complexity.  Which means that your Spring MVC app will be hard to understand and
modify, as each developer maps URLs in their own special way, or you, as the tech lead,
spend an inordinate amount of time reviewing changes and keeping things consistent.
This is time that Rails tech leads don&#8217;t need to spend.</p>

<p>Changes that are constrained to one application aren&#8217;t the most difficult task a
developer faces, however.  As service-oriented architectures become more prevalent,
organizations often require changes that cross application boundaries.  For example,
you may need to move to a publish/subscribe model for performance
reasons, or you might need share views between applications to provide a
unified UI to key decision-makers.</p>

<h2>Cross-Application Changes are Key to Success</h2>

<p>An organization&#8217;s ability to make cross-application changes in the face of changing requirements or business climate can be crucial to staying competitive and successful.  Being unable to make changes can go so far as to sink a company<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>Changes across several applications in your architecture are difficult.
They require coordinated changes and consolidation of code, all timed to a
simultaneous release.</p>

<p>Consistency across applications is a force-multiplier for enabling these types of changes.  An Inconsistent Architecture can make these changes unnecessarily difficult, cost-ineffective, or even impossible.</p>

<h2>An Inconsistent Architecture Makes You Slow</h2>

<p>So, if your team has successfully fielded applications, yet is debating &#8220;MiniTest vs. RSpec&#8221;, you&#8217;re blowing it.  You need to be asking, instead, &#8220;What advantage will we gain by introducing this new library?&#8221; and you must also answer the question &#8220;Does this advantage outweigh the negative impact of having an Inconsistent Architecture?&#8221;</p>

<p>Here are some of the negatives:</p>

<ul>
<li>Team in a Constant State of Debate</li>
<li>Cross-Application Work is Taxing</li>
<li>Extraction of Shared Code Difficult</li>
</ul>


<h3>A State of Constant Debate</h3>

<p>Each new application requires a renewed debate about which &#8220;standard libraries&#8221; to use.  Inevitably, this debate also includes the meta-debate about standardization of libraries.  These debates are a waste of time.  Instead of delivering value to your customer or business, you are arguing about significant whitespace and &#8220;clean&#8221; markup.  Your competitors are laughing.</p>

<p>More to the point, however, the constant debate means you cannot develop tooling around application creation and management, because many more decisions are required than if you had a consistent set of agreed-upon libraries and techniques.  This means that the burden of application creation goes up, meaning the value of creating such applications goes down, meaning your business is overall less responsive.</p>

<h3>Cross-Application Work is Taxing</h3>

<p>In an Inconsistent Architecture, each application carriers its own unique set of libraries and microframeworks.  This means that anyone doing cross-application work - difficult enough by its nature - now must contend with several different ways of accomplishing the same thing.  Realistically, no one is going to have deep knowledge of all these tools and libraries.</p>

<p>This means that cross-application work will take longer as the developer in question must head to the documentation much more frequently.  Worse, said developer could simply shoe-horn code for unfamiliar libraries into what they find familiar, making it worse for everyone.</p>

<p>The result is that cross-application work takes longer than it should, and the
resulting code in the relevant applications will be of poorer quality.  A team that has a collective
and deep understanding of fewer tools is going to be more effective than one with only a shallow collective understanding of many tools.</p>

<h3>Extraction of Shared Code Difficult</h3>

<p>Often, cross-application work involves consolidating features according to business or operational requirements.  For example, you might be setting up a centralized user authentication system for all of your applications.  Each application might have slightly different requirements, so your extracted system must meet all of them.</p>

<p>When the code in all these applications is consistent in tooling and approach, this task is much simpler than when a smattering of libraries have been used.  Consider templating languages: even discerning that a template in ERB and one in HAML represent the same thing can be difficult; seeing the differences in order to create a correct shared UI even more-so.</p>

<p>This means the tasks of consolidating code, features, and behavior is now more difficult than they should be - everything must be converted into a common form, rather than simply moved around.</p>

<h2>Is it worth it?</h2>

<p>Having an Inconsistent Architecture carries a lot of negatives.  In <a href="http://www.theseniorsoftwareengineer.com">my book</a>, I have an entire chapter on setting up a new application.  In that
chapter, I talk about the &#8220;blessed stack&#8221;, which is the set of tools, libraries, and frameworks in use at your organization.  For example, at <a href="http://www.stitchfix.com">Stitch Fix</a>, we use Rails, RSpec, ERB, CoffeeScript, Resque, SASS, and Postgres.</p>

<p>The book uses the concept of the &#8220;blessed stack&#8221; as a way to re-frame the decisions you make when creating a new application.  To re-state something from above, if your applications all use SASS, you shouldn&#8217;t be having a &#8220;SASS vs. LESS&#8221; debate, you should be answering the question &#8220;What does LESS bring to the table that makes the pain of inconsistency worth it?&#8221;</p>

<p>The answer is almost always &#8220;nothing&#8221; (for most values of &#8220;SASS&#8221; or &#8220;LESS&#8221;).</p>

<p>That one tool is theoretically &#8220;better&#8221; than another is a discussion for happy hour.  If no standard has been established for a particular need, have a <em>quick</em> debate, and then make a decision (either by fiat or by vote).  Time spent debating is time not <a href="www.theseniorsoftwareengineer.com/focus_on_delivering_results_excerpt.html">delivering results</a>, and your team&#8217;s success does not hinge upon &#8220;clean markup&#8221;.</p>

<h2>But, how do we advance?</h2>

<p>As with the discussion around <a href="http://www.naildrivin5.com/blog/2013/08/08/responsible-refactoring.html">responsible refactoring</a>, there is an
escape hatch to what seems like myopic thinking.  The reading-comprehension-impaired
took away from that post &#8220;never refactor&#8221;, and the same crowd could interpret this
post as &#8220;never use new technology&#8221;.</p>

<p>Both the refactoring and this one revolve around reasons: do you have a good reason to
refactor that code?  OK, great, let&#8217;s do it. At the start of this post, I said that you should use what your team is already using <strong>unless there&#8217;s a good technical reason not to</strong>.</p>

<h2>A Good Technical Reason</h2>

<p>A mature and effective team is always open to debate, but such a team is also
impervious to fallacious arguments.  &#8220;The Rails Way&#8221; is an appeal to authority.
&#8220;Most developers use it&#8221; is an argumentum ad populum (and I&#8217;d be willing to bet you
didn&#8217;t conduct a real study anyway).</p>

<p>Here are some technical reasons (all of which you should be prepared to prove):</p>

<ul>
<li>We can&#8217;t meet our deadlines without library X</li>
<li>The standard won&#8217;t meet our performance requirements</li>
<li>Our default stack is a fundamental mismatch for the problem at hand</li>
<li>We&#8217;re about to lose official support for the status quo/status quo is no longer maintained</li>
<li>This is a low-risk, low-impact project - experimentation might be OK</li>
</ul>


<p>There are probably others more specific to your project, but the point is that you
really should be able to outline <em>why</em> introducing an inconsistency is a net win.
Beware Résumé-Driven-Development.</p>

<p>And, I know this all from experience.  I have been personally responsible for introducing technologies not meeting this burden in two different jobs. I&#8217;m still in contact with some of the developers at both jobs, and these decisions were not a net win, despite whatever problems they may have solved for me in the short-term<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<p>This experience is what brought me to this realization - there&#8217;s nothing like making a
mistake yourself to get clarity on the right way to do things.</p>

<h2>Evolving the Status Quo</h2>

<p>You might feel that working under such a &#8220;regime&#8221; means that you&#8217;ll never learn
anything new, and you&#8217;ll be stuck on the same old version of whatever web framework
you have.</p>

<p>The culture I&#8217;m describing here isn&#8217;t a conservative one, it&#8217;s one that values
consistency.  Understand the difference.</p>

<p>It turns out that a culture of consistency enables technical evolution moreso than one that does not.  When all applications have the same &#8220;shape&#8221;, it becomes markedly easier to move forward with technology choices.</p>

<p>At Stitch Fix, we have currently three Rails apps in production.  The Ruby parts of
them all have a similar shape - the use of controllers, models, and service objects
is fairly similar.  We also have an array of shared gems that have similar shapes as
well.  We use the same libraries across all apps for the most part.</p>

<p>This consistency will make our collective move to Rails 4 a lot smoother than
if every application and gem did things differently.  This will allow one or two
developers to move our team forward with little disruption in service or feature delivery.</p>

<p>If, instead, we&#8217;d fielded a mixture of Rails and Sinatra apps, used different testing
frameworks and different CSS pre-compilers, the task would be orders of magnitude more
difficult.  In this way, a culture of &#8220;use whatever you want&#8221; would actually hold the
organization <em>back</em> from using new technology.  I&#8217;ve worked there.  Twice.  And they
are still dealing with legacy libraries and tools.</p>

<h2>Step-by-Step Instructions</h2>

<p>Here is my ideal approach to technology choice, incredibly summarized (<a href="http://www.theseniorsoftwareengineer.com">the book</a> goes into more detail):</p>

<ol>
<li>Use what you are already using.</li>
<li>If someone wants to deviate, see step 1.</li>
<li>If someone <em>really</em> want to deviate, refuse to debate &#8220;Old vs. New&#8221;.  Refuse.   The
debate <em>must</em> be &#8220;New vs. Consistency&#8221;.  Be open to convincing arguments, and call
out fallacious ones.</li>
<li>If the problem at hand is a new one for your team, quickly choose the new standard so that you never have to make this decision again.  I&#8217;d recommend a brief discussion followed by a vote, with developers writing the code breaking ties, but if you need to decide by fiat, so be it.</li>
<li>Review the &#8220;blessed stack&#8221; periodically.  What&#8217;s working?  What&#8217;s not?  What does
the future look like?  Can you get there?  Be deliberate and not arbitrary in your
technical evolution, but <em>do evolve</em>.  Without this step, the entire thing falls
apart.</li>
</ol>


<p>A younger version of myself would not be into this way of working, so I can understand
if some of you think this is oppressive.  All I can tell you is that it is a pure joy
to solve problems amidst a consistently-architected set of applications, all of which
are themselves internally consistent, despite the technology that makes things
consistent<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>.  Such an
environment is encouraging of problem-solving, which is what I love about programming.
Arguing over <code>describe</code> vs. <code>test</code> seems de minimis now.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>And you can see very clearly what Rails <strong>doesn&#8217;t</strong> provide by surveying the common debates, for example where business logic goes. <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>It can also be very unpleasant working on teams like this, because over time, interesting and high-value projects become impossible, and developers turn into ticket-takers, just pumping out simple features, since they are all that can be reasonably accomplished <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>To be fair (to myself), in one of these cases, the team was encouraged to use whatever we wanted for whatever reason, and I bought into it. <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>The easiest codebase I ever worked in was in Java, using Spring, because the code was so consistenty designed and written.  Almost every change to it felt like I was merely transcribing business logic. <a href='#fnref:4' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&#10106;&#10144; Responsible Refactoring]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/08/08/responsible-refactoring.html"/>
    <updated>2013-08-08T09:11:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/08/08/responsible-refactoring</id>
    <content type="html"><![CDATA[<p>Emboldened by tests, and with the words &#8220;ruthless refactoring&#8221; in my head, I used to &#8220;improve&#8221; the codebase I was maintaining at a previous job.  One day,
my &#8220;cleanup&#8221; caused production to break.  How could this be?  I was being Agile.  I was Testing.  I was Merciless in my Refactoring.  I had found Code
Smells, dammit!</p>

<p>I was being irresponsible.</p>

<!-- more -->


<p>Lets be clear, first:  I&#8217;m not going to be talking about the third step of the TDD cycle.  Refactoring code that&#8217;s in development and not
currently running on production is something you must absolutely do.  Work clean, and <em>write</em> clean code.  What we&#8217;re talking about is changes to existing,
running code.</p>

<p>In <a href="http://www.naildrivin5.com/blog/2013/06/16/production-is-all-that-matters.html">Production is All That Matters</a>, I outlined the importance of code in production and how to keep it running smoothly.  One thing I
didn&#8217;t touch on was changing that code.  Every change to production introduces a risk of breaking something.  Any system beyond a to-do list or blog
engine has complexity that can be difficult to cover by tests.  Integration tests are brittle, and cross-system tests more so.  Manual QA is the most
brittle of all.</p>

<p>Ideally, the size of your changes to production should be commensurate with the size of the feature you are adding.  Small features should require small
changes.  Large changes should be an indicator of a large or complex feature.</p>

<p>A pure refactoring breaks this rule completely - a refactoring adds no direct business value to the application, yet introduces risk that something will break.</p>

<p>&#8220;But,&#8221; you say, &#8220;refactoring bad code makes it easier to change in the future.  It makes us faster later, and we can deliver more business value then!&#8221;</p>

<p>&#8220;The future&#8221;, you say?  I say <a href="http://en.wikipedia.org/wiki/You_aren't_gonna_need_it">You Ain&#8217;t Gonna Need It</a>, AKA YAGNI.  We tell ourselves not to invent features or add complexity to our code because
we don&#8217;t know what the future holds.  I would say that refactoring outside of the TDD cycle should be viewed in the same light.</p>

<p>How then, do we prevent our code base from rotting?  How can we <em>ever</em> improve it?  If we focus our efforts on demonstrable business value - the future
be damned - how do we avoid having a big pile of shit codebase?</p>

<p>Before we answer, consider a piece of code you&#8217;d like to refactor.  When you see it, it just looks bad.  It&#8217;s hard to follow, has poor naming, and is
generally ugly.  It&#8217;s <em>begging</em> to be cleaned up.  Now suppose that for the next six months, no requirement surfaces, nor bug is found, that requires modifying that code. Is its lack of cleanliness <em>really</em> a problem?</p>

<p>Clean code is not an end unto itself.  Repeat: clean code is not an end unto itself<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>Clean code is a feature of code that is easy to change.  Code that is easy to change enables us to provide value to the business more easily.</p>

<p>Our job isn&#8217;t to write clean code.  Our job isn&#8217;t even to necessarily even write code at all.  It&#8217;s to use software to deliver business value.</p>

<p>With that in mind, let&#8217;s get back to the question at hand: how do we improve our codebase?</p>

<p>When faced with a change we need to make, we form a plan of attack.  This plan may be entirely in our heads, or we might sketch it out, but at some level
we decide how we&#8217;re going to get started.  I would argue that there are at least two ways to tackle every problem:</p>

<ul>
<li>Plow through, making the change as expediently as possible, changing only what&#8217;s needed to ship.</li>
<li>Clean up or improve the code in a way that makes the change easier, then make the change.</li>
</ul>


<p>All you have to do is decide which approach will deliver more value more quickly.  To be honest, it&#8217;s often the first approach, but it&#8217;s not <em>always</em>.
Occasionally, it&#8217;s actually faster to clean things up first.</p>

<p>And <strong>this</strong> is how you improve your codebase. When cleaning up the code <em>enables you to work faster</em> for a task you aren&#8217;t dreaming up but <em>actually have at
hand</em>, refactoring is the way to go.</p>

<p>The beauty of this approach is that you never again need a &#8220;refactoring story&#8221; in your backlog, nor do you need to get &#8220;permission&#8221; to clean up some code.   You simply do it to get your job done faster and better.</p>

<p>Of course, we are bad at estimating, so how can we know what to do?  Here&#8217;s some guidelines that I&#8217;ve found helpful in determining if a refactoring will
help:</p>

<ul>
<li>Changes to public APIs - function, method, module, or class names - are almost never worth it, especially in a dynamically typed language, especially in Ruby but even moreso in JavaScript.</li>
<li>If you have to change a test, it&#8217;s probably not worth it (and not technically a refactoring).</li>
<li>If you&#8217;ll be deleting code, it&#8217;s probably a good sign.</li>
<li>If you are unfamiliar with the code, resist the urge to &#8220;clean it up&#8221; - we often conflate &#8220;I don&#8217;t understand this&#8221; with &#8220;this is poorly designed&#8221;.</li>
</ul>


<p>When you <em>do</em> decide a refactoring is going to help, be sure to put that refactoring in its own commit.  Ideally, get that refactoring up on production in advance
of your change (depending on the significance of your change).  Your tests only tell you what works, not what doesn&#8217;t.  Production can give you more
information.</p>

<p>Pushing your refactoring to production ahead of the actual change also has a nice side-effect: it forces you to consider the risk of the refactoring.  When deciding what to do, if you know your refactoring is going up to production on its own, it allows you to think more clearly about the risk involved in the proposed refactoring.  You may decide it&#8217;s not worth it.</p>

<p>This is what I call <em>responsible refactoring</em>.  Although you don&#8217;t get to go apeshit &#8220;improving&#8221; your codebase, you do get a clear and simple process to make the code better in a way that has demonstrable, immediate benefits.  Think about it next time you are tempted to &#8220;clean up&#8221; some smelly code.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'>It&#8217;s also worth pointing out that the following things are <strong>also</strong> not ends unto themselves: object-orientated, pure functional, immmutabile, referentially transparent, thread safe, O(log n), fast tests, the smallest-sized-CSS-you-can-dream-of, and performance.  I&#8217;m sure I left out about a billion things <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; Manual vs Automatic Continuous Deployment]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/08/07/manual-vs-automatic-continuous-deployment.html"/>
    <updated>2013-08-07T12:31:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/08/07/manual-vs-automatic-continuous-deployment</id>
    <content type="html"><![CDATA[<p>My ex-colleague from LivingSocial, <a href="https://twitter.com/danmayer">Dan Mayer</a> posted a <a href="http://mayerdan.com/programming/2013/08/04/thoughts-on-continuous-deployment/">great read about continuous deployment</a>, and the tradeoffs when doing an automatic deploy:</p>

<blockquote><p>After considering some of the real world implications of automated continuous deployment, I didn’t feel it was right for our team on most of our projects at the moment. Both because we would need a bit of additional tooling around deployment and dashboards, and because our tests are far to slow.</p></blockquote>

<p>It&#8217;s a good (and quick) read. Having worked on at least one of the apps that Dan&#8217;s talking about, I would agree he&#8217;s making the right call and that if your test suite is slow, automatic deployment can be a killer.  I also think there&#8217;s a relationship between the size of the contributor group and the speed of the test suite - the more devs pushing stuff in, the faster it has to be.</p>

<p>In <a href="http://www.theseniorsoftwareengineer.com">my book</a>, there&#8217;s a chapter on bootstrapping new applications, and my recommendation is to set up automatic continuous deployment from the start.  I stand by that, because it basically turns the problem Dan identifies around: slow tests slow your deployment which should thus motivate keeping tests slow (and applications lean).  We&#8217;ll see how it works out at <a href="http://stitchfixjobs.com/blog/2013/07/30/our-git-workflow/">Stitch Fix</a>.  We have one app with a somewhat slow test suite, and three with relatively fast ones.  Automatic deploys work really well so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&dagger; Stitch Fix Git Workflow]]></title>
    <link href="http://www.naildrivin5.com/blog/2013/07/30/stitch-fix-git-workflow.html"/>
    <updated>2013-07-30T11:04:00-04:00</updated>
    <id>http://www.naildrivin5.com/blog/2013/07/30/stitch-fix-git-workflow</id>
    <content type="html"><![CDATA[<p>The Stitch Fix <a href="http://stitchfixjobs.com/blog">tech blog</a> is up, and I just posted <a href="http://stitchfixjobs.com/blog/2013/07/30/our-git-workflow/">how we use Git and Hubot</a> to automate deployment, without having a complex series of
branches and tags.</p>

<blockquote><p>This is fairly simple - new code goes on branches, master is always deployable (when clean), and <code>deploy/production</code> always contains whatever&#8217;s on production.</p></blockquote>

<p><a href="http://www.theseniorsoftwareengineer.com">My book</a> talks about bootstrapping new applications, and my recommendation is to set up continuous deployment.  If you&#8217;ve ever worked on a release
schedule, you&#8217;ll know that continuous deployment is a pure joy.  It&#8217;s also a boon to the users, who get the features and fixes as fast as possible.</p>
]]></content>
  </entry>
  
</feed>
